[
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WITH s, avg(p.unitPrice) AS avgUnitPrice ORDER BY avgUnitPrice DESC LIMIT 5 RETURN s.companyName AS Supplier, avgUnitPrice AS AverageUnitPrice",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, avg(p.unitPrice) AS avgUnitPrice ORDER BY avgUnitPrice DESC LIMIT 5 NEXT RETURN s.companyName AS Supplier, avgUnitPrice AS AverageUnitPrice"
    },
    {
        "cypher": "MATCH (t:Technician) WHERE NOT EXISTS ((:RepairAssignment)-[:ASSIGNED_TO]->(t)) RETURN t.Name",
        "gql": "MATCH (t:Technician) WHERE NOT EXISTS ((:RepairAssignment)-[:ASSIGNED_TO]->(t)) RETURN t.Name"
    },
    {
        "cypher": "MATCH (c:Company) RETURN count(c)",
        "gql": "MATCH (c:Company) RETURN count(c)"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: 'New Energy Group'}) RETURN a",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: 'New Energy Group'}) RETURN a"
    },
    {
        "cypher": "MATCH (n:District) WHERE n.City_Population >= 200000 AND n.City_Population <= 2000000 RETURN n.District_name, n.City_Population",
        "gql": "MATCH (n:District) WHERE n.City_Population >= 200000 AND n.City_Population <= 2000000 RETURN n.District_name, n.City_Population"
    },
    {
        "cypher": "MATCH (n:Article) -[:PUBLISHED_IN{pages: '1-31'}]->(m:Journal) WHERE m.title < date('2020-12-31') RETURN avg(m.name) AS avg_name",
        "gql": "MATCH (n:Article) -[:PUBLISHED_IN{pages: '1-31'}]->(m:Journal) WHERE m.title < date('2020-12-31') RETURN avg(m.name) AS avg_name"
    },
    {
        "cypher": "MATCH (t1:hiring)-[]-(t2:shop) WITH t2, count(t1.Shop_ID) AS cnt RETURN t2.Name ORDER BY cnt DESC LIMIT 1",
        "gql": "MATCH (t1:hiring)-[]-(t2:shop) RETURN t2, count(t1.Shop_ID) AS cnt NEXT RETURN t2.Name ORDER BY cnt DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (d:domain {name: 'Robotics'})<-[:paper_in_domain]-(p:paper)-[:paper_in_venue]->(c:conference)<-[:author_in_affiliation]-(a:author)-[:author_in_affiliation]->(aff:affiliation {name: 'Tsinghua University'}) RETURN c.name, COUNT(p) AS num_papers ORDER BY num_papers DESC",
        "gql": "MATCH (d:domain {name: 'Robotics'})<-[:paper_in_domain]-(p:paper)-[:paper_in_venue]->(c:conference)<-[:author_in_affiliation]-(a:author)-[:author_in_affiliation]->(aff:affiliation {name: 'Tsinghua University'}) RETURN c.name, COUNT(p) AS num_papers ORDER BY num_papers DESC"
    },
    {
        "cypher": "MATCH (m:Musical) WHERE m.Award <> \"Tony Award\" RETURN DISTINCT m.Nominee",
        "gql": "MATCH (m:Musical) WHERE m.Award <> \"Tony Award\" RETURN DISTINCT m.Nominee"
    },
    {
        "cypher": "MATCH (n:Article) -[:HAS_DOI]->(m:DOI) WITH DISTINCT n, m RETURN n.abstract AS abstract, count(m) AS count LIMIT 20",
        "gql": "MATCH (n:Article)-[:HAS_DOI]->(m:DOI) RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS `count` LIMIT 20"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WITH g, avg(m.revenue) AS avg_revenue ORDER BY avg_revenue ASC LIMIT 3 RETURN g.name AS genre, avg_revenue",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g, avg(m.revenue) AS avg_revenue ORDER BY avg_revenue ASC LIMIT 3 NEXT RETURN g.name AS genre, avg_revenue"
    },
    {
        "cypher": "MATCH (user:User)-[:VIP]->(stream:Stream) WITH user, count(DISTINCT stream) AS vip_stream_count WHERE vip_stream_count >= 3 MATCH (user)-[:MODERATOR]->(:Stream) RETURN count(DISTINCT user) AS vip_moderator_count",
        "gql": "MATCH (user:User)-[:VIP]->(stream:Stream) RETURN user, count(stream) AS vip_stream_count NEXT MATCH (user)-[:MODERATOR]->(:Stream) RETURN count(user) AS vip_moderator_count"
    },
    {
        "cypher": "MATCH (t:Tweet) RETURN t.id ORDER BY t.created_at ASC LIMIT 1",
        "gql": "MATCH (t:Tweet) RETURN t.id ORDER BY t.created_at ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (p:Product) WITH p.Product_Type_Code AS Product_Type_Code, COUNT(p) as count WHERE count >= 2 RETURN Product_Type_Code",
        "gql": "MATCH (p:`Product`) RETURN p.Product_Type_Code AS Product_Type_Code, COUNT(p) AS `count` NEXT RETURN Product_Type_Code"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.year='2000' WITH DISTINCT n, m RETURN n.title AS title, count(m) AS count LIMIT 20",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.`year` = '2000' RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` LIMIT 20"
    },
    {
        "cypher": "MATCH (neo4j:Me {screen_name: 'neo4j'})<-[:FOLLOWS]-(user:User) RETURN user.screen_name, user.name, user.followers, user.following, user.profile_image_url, user.url, user.location, user.statuses ORDER BY user.followers DESC LIMIT 5",
        "gql": "MATCH (neo4j:Me {screen_name: 'neo4j'})<-[:FOLLOWS]-(user:User) RETURN user.screen_name, user.name, user.followers, user.following, user.profile_image_url, user.url, user.location, user.statuses ORDER BY user.followers DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Patient)-[:HAS_ALLERGY]->(:Allergy),       (p)-[:HAS_DOCTOR]->(smith:Doctor {name: 'Dr. Smith'})-[:GAVE_DIAGNOSIS]->(diagnosis:Diagnosis)<-[:HAS_DIAGNOSIS]-(p) RETURN COUNT(distinct p) as PatientsNum",
        "gql": "MATCH (p:Patient)-[:HAS_ALLERGY]->(:Allergy),       (p)-[:HAS_DOCTOR]->(smith:Doctor {name: 'Dr. Smith'})-[:GAVE_DIAGNOSIS]->(diagnosis:Diagnosis)<-[:HAS_DIAGNOSIS]-(p) RETURN COUNT(distinct p) as PatientsNum"
    },
    {
        "cypher": "MATCH (c:Campus) WHERE c.Location = \"Northridge\" AND c.County = \"Los Angeles\" OR c.Location = \"San Francisco\" AND c.County = \"San Francisco\" RETURN c.Campus",
        "gql": "MATCH (c:Campus) WHERE c.Location = \"Northridge\" AND c.County = \"Los Angeles\" OR c.Location = \"San Francisco\" AND c.County = \"San Francisco\" RETURN c.Campus"
    },
    {
        "cypher": "MATCH (me:Me)-[:AMPLIFIES]->(user:User) RETURN user.screen_name AS AmplifiedUser",
        "gql": "MATCH (me:Me)-[:AMPLIFIES]->(user:User) RETURN user.screen_name AS AmplifiedUser"
    },
    {
        "cypher": "MATCH (me:Me {name: 'Neo4j'})-[:FOLLOWS]->(user:User) RETURN user.name, user.screen_name, user.followers, user.following ORDER BY user.followers DESC LIMIT 5",
        "gql": "MATCH (me:Me {name: 'Neo4j'})-[:FOLLOWS]->(user:User) RETURN user.name, user.screen_name, user.followers, user.following ORDER BY user.followers DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:CatalogContent) WHERE c.next_entry_id > 8 RETURN c.catalog_entry_name",
        "gql": "MATCH (c:CatalogContent) WHERE c.next_entry_id > 8 RETURN c.catalog_entry_name"
    },
    {
        "cypher": "MATCH (u:User)-[:CHATTER]->(s:Stream)-[:VIP]->(u) RETURN avg(u.followers)",
        "gql": "MATCH (u:User)-[:CHATTER]->(s:Stream)-[:VIP]->(u) RETURN avg(u.followers)"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q.title, q.score ORDER BY q.score ASC LIMIT 3",
        "gql": "MATCH (q:Question) RETURN q.title, q.score ORDER BY q.score ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0 WITH o, min(o.revenue) AS minRevenue RETURN o.name AS Organization, minRevenue ORDER BY minRevenue ASC LIMIT 1",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0 RETURN o, min(o.revenue) AS minRevenue NEXT RETURN o.name AS Organization, minRevenue ORDER BY minRevenue ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (e:Event) RETURN e.Name ORDER BY e.Year DESC LIMIT 1",
        "gql": "MATCH (e:Event) RETURN e.Name ORDER BY e.`Year` DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '293-299' RETURN n.article_id AS article_id, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '293-299' RETURN n.article_id AS article_id, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (o:Order)-[rel:ORDERS]->(p:Product) WHERE rel.quantity > 10 WITH avg(toFloat(rel.unitPrice)) AS avgPrice RETURN avgPrice",
        "gql": "MATCH (o:`Order`)-[rel:ORDERS]->(p:`Product`) WHERE rel.quantity > 10 RETURN avg(rel.unitPrice) AS avgPrice NEXT RETURN avgPrice"
    },
    {
        "cypher": "MATCH (students:Students) RETURN students.first_name,students.middle_name,students.last_name ORDER BY students.date_first_registered ASC LIMIT 1",
        "gql": "MATCH (students:Students) RETURN students.first_name,students.middle_name,students.last_name ORDER BY students.date_first_registered ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (org:Organization {isPublic: true})-[:HAS_CEO]->(ceo:Person) MATCH (ceo)-[:HAS_CHILD]->(child:Person) RETURN ceo.name AS CEO, child.name AS Child",
        "gql": "MATCH (org:Organization {isPublic: true})-[:HAS_CEO]->(ceo:Person) MATCH (ceo)-[:HAS_CHILD]->(child:Person) RETURN ceo.name AS CEO, child.name AS Child"
    },
    {
        "cypher": "MATCH (u1:User {label: \"inchristbl.bsky.social\"})-[:INTERACTED]->(u2:User) WHERE u2.area < 3 RETURN u2.label",
        "gql": "MATCH (u1:User {label: \"inchristbl.bsky.social\"})-[:INTERACTED]->(u2:User) WHERE u2.area < 3 RETURN u2.label"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.country_codes = 'HKG' AND e.service_provider = 'Mossack Fonseca' RETURN e",
        "gql": "MATCH (e:Entity) WHERE e.country_codes = 'HKG' AND e.service_provider = 'Mossack Fonseca' RETURN e"
    },
    {
        "cypher": "MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.y < -5000 RETURN u1 LIMIT 3",
        "gql": "MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.y < -5000 RETURN u1 LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Student) RETURN s.Major, COUNT(s) ORDER BY COUNT(s) ASC LIMIT 1",
        "gql": "MATCH (s:Student) RETURN s.Major, COUNT(s) ORDER BY COUNT(s) ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.votes IS NOT NULL RETURN m.title, m.votes ORDER BY m.votes DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.votes IS NOT NULL RETURN m.title, m.votes ORDER BY m.votes DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:INTERACTS_WITH]->(user:User) RETURN user.screen_name, COUNT(*) AS interaction_count ORDER BY interaction_count DESC LIMIT 1",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:INTERACTS_WITH]->(user:User) RETURN user.screen_name, COUNT(*) AS interaction_count ORDER BY interaction_count DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.summary = 'Pretty funny at times' RETURN m.title",
        "gql": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.summary = 'Pretty funny at times' RETURN m.title"
    },
    {
        "cypher": "MATCH (p:Publication) WITH p.Publisher as Publisher, COUNT(p) AS count WHERE count > 1 return Publisher",
        "gql": "MATCH (p:Publication) RETURN p.Publisher AS Publisher, COUNT(p) AS `count` NEXT RETURN Publisher"
    },
    {
        "cypher": "MATCH (m:Member) RETURN COUNT(DISTINCT m.Level)",
        "gql": "MATCH (m:Member) RETURN COUNT(DISTINCT m.Level)"
    },
    {
        "cypher": "MATCH (rust_stream:Stream)-[:PLAYS]->(game:Game {name: \"Rust\"}) MATCH (rust_stream)-[:VIP]->(vip_user:User) MATCH (vip_user)-[:VIP]->(other_stream:Stream) MATCH (chatter_user:User)-[:CHATTER]->(other_stream) RETURN DISTINCT chatter_user.name",
        "gql": "MATCH (rust_stream:Stream)-[:PLAYS]->(game:Game {name: \"Rust\"}) MATCH (rust_stream)-[:VIP]->(vip_user:User) MATCH (vip_user)-[:VIP]->(other_stream:Stream) MATCH (chatter_user:User)-[:CHATTER]->(other_stream) RETURN DISTINCT chatter_user.name"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE m.budget > 50000000 RETURN m.title ORDER BY m.release_date LIMIT 3",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE m.budget > 50000000 RETURN m.title ORDER BY m.release_date LIMIT 3"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:MENTIONS]->(u:User {screen_name: 'neo4j'}) WHERE t.favorites > 100 RETURN t.text AS tweet_text, t.favorites AS favorite_count, t.created_at AS created_at",
        "gql": "MATCH (t:Tweet)-[:MENTIONS]->(u:User {screen_name: 'neo4j'}) WHERE t.favorites > 100 RETURN t.text AS tweet_text, t.favorites AS favorite_count, t.created_at AS created_at"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1006 OR n.article_id < 1048 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1006 OR n.article_id < 1048 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (a:Article {title: 'Funds for Consumer Behavior Specialist Infinite An'})-[:MENTIONS]->(o:Organization) RETURN o LIMIT 3",
        "gql": "MATCH (a:Article {title: 'Funds for Consumer Behavior Specialist Infinite An'})-[:MENTIONS]->(o:Organization) RETURN o LIMIT 3"
    },
    {
        "cypher": "MATCH (t:Tweet) RETURN t.text, t.favorites ORDER BY t.favorites DESC LIMIT 5",
        "gql": "MATCH (t:Tweet) RETURN t.text, t.favorites ORDER BY t.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WITH c, COUNT(DISTINCT p.productID) AS distinctProducts ORDER BY distinctProducts DESC LIMIT 3 RETURN c.companyName AS customerName, distinctProducts",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`)-[:ORDERS]->(p:`Product`) RETURN c, COUNT(p.productID) AS distinctProducts ORDER BY distinctProducts DESC LIMIT 3 NEXT RETURN c.companyName AS customerName, distinctProducts"
    },
    {
        "cypher": "MATCH (o:Order {shipCountry: 'Denmark'})-[:ORDERS]->(p:Product) WITH avg(toFloat(o.discount)) AS averageDiscount RETURN averageDiscount",
        "gql": "MATCH (o:`Order`{shipCountry:'Denmark'})-[:ORDERS]->(p:`Product`) RETURN avg(o.discount) AS averageDiscount NEXT RETURN averageDiscount"
    },
    {
        "cypher": "MATCH (p:Person)<-[:HAS_CEO]-(o:Organization) WHERE o.revenue IS NOT NULL RETURN p.name AS ceo, o.name AS company, o.revenue AS revenue ORDER BY o.revenue DESC LIMIT 5",
        "gql": "MATCH (p:Person)<-[:HAS_CEO]-(o:Organization) WHERE o.revenue IS NOT NULL RETURN p.name AS ceo, o.name AS company, o.revenue AS revenue ORDER BY o.revenue DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Article{comments:'26 pages, revised, to appear in Advances in Cryptology -- Asiacrypt   2005'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{comments:'26 pages, revised, to appear in Advances in Cryptology -- Asiacrypt   2005'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.votes > 100 RETURN m.title",
        "gql": "MATCH (m:Movie) WHERE m.votes > 100 RETURN m.title"
    },
    {
        "cypher": "MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie) WHERE m.revenue IS NOT NULL RETURN pc.name, sum(m.revenue) AS total_revenue ORDER BY total_revenue DESC LIMIT 3",
        "gql": "MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie) WHERE m.revenue IS NOT NULL RETURN pc.name, sum(m.revenue) AS total_revenue ORDER BY total_revenue DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)<-[:VIP]-(:User) RETURN s.name AS stream_name ORDER BY s.total_view_count DESC LIMIT 3",
        "gql": "MATCH (s:Stream)<-[:VIP]-(:User) RETURN s.name AS stream_name ORDER BY s.total_view_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (e1:Entity {name: \"Deutsche Bank AG\"}) MATCH (e1)-[:COUNTRY]->(c:Country) MATCH (c)<-[:COUNTRY]-(e2:Entity) MATCH (e2)-[:ORIGINATOR]->(f:Filing) WITH avg(f.amount) AS averageAmount RETURN averageAmount",
        "gql": "MATCH (e1:Entity{name:\"Deutsche Bank AG\"}) MATCH (e1)-[:COUNTRY]->(c:Country) MATCH (c)<-[:COUNTRY]-(e2:Entity) MATCH (e2)-[:ORIGINATOR]->(f:Filing) RETURN avg(f.amount) AS averageAmount NEXT RETURN averageAmount"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[oi:ORDERS]->(p:Product) WHERE c.country = 'USA' WITH avg(toFloat(oi.unitPrice)) AS avgPrice RETURN avgPrice",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`)-[oi:ORDERS]->(p:`Product`) WHERE c.country = 'USA' RETURN avg(oi.unitPrice) AS avgPrice NEXT RETURN avgPrice"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 10 OR n.cluster < 7 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 10 OR n.cluster < 7 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (m:Movie)-[r:HAS_KEYWORD]->(k:Keyword) RETURN m.title AS movie, count(r) AS num_keywords ORDER BY num_keywords DESC LIMIT 10",
        "gql": "MATCH (m:Movie)-[r:HAS_KEYWORD]->(k:Keyword) RETURN m.title AS movie, count(r) AS num_keywords ORDER BY num_keywords DESC LIMIT 10"
    },
    {
        "cypher": "MATCH (m:Movie) MATCH (m)-[:ORIGINAL_LANGUAGE]->(l:Language) WITH l, count(m) AS movieCount ORDER BY movieCount DESC RETURN l.name AS language, movieCount LIMIT 1",
        "gql": "MATCH (m:Movie) MATCH (m)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN l, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN l.name AS language, movieCount LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.last_name = 'Neeman' OR n.first_name IS NOT NULL RETURN DISTINCT n.first_name AS first_name",
        "gql": "MATCH (n:Author) WHERE n.last_name = 'Neeman' OR n.first_name IS NOT NULL RETURN DISTINCT n.first_name AS first_name"
    },
    {
        "cypher": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician), (T1)-[:ASSIGNED_TO]->(T2:Machine) RETURN T3.Name ORDER BY T2.quality_rank",
        "gql": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician), (T1)-[:ASSIGNED_TO]->(T2:Machine) RETURN T3.Name ORDER BY T2.quality_rank"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.description IS NULL RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.description IS NULL RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m",
        "gql": "MATCH (m:Movie) RETURN m"
    },
    {
        "cypher": "MATCH (r:Review) WITH r ORDER BY r.stars DESC, r.date ASC LIMIT 3 RETURN r.reviewId, r.text, r.stars, r.date",
        "gql": "MATCH (r:Review) RETURN r ORDER BY r.stars DESC, r.`date` ASC LIMIT 3 NEXT RETURN r.reviewId, r.text, r.stars, r.`date`"
    },
    {
        "cypher": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category) RETURN DISTINCT c.name AS categories",
        "gql": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category) RETURN DISTINCT c.name AS categories"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN m.title LIMIT 3",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN m.title LIMIT 3"
    },
    {
        "cypher": "MATCH p=(a:Article{article_id:'1048'})-[*]->(d:Keyword{name:'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-'}) RETURN count(p)",
        "gql": "MATCH (a:Article{article_id:'1048'})-[]->{1,}(d:Keyword{name:'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) WITH c.name AS country, COUNT(DISTINCT e.id) AS originator_count ORDER BY originator_count DESC LIMIT 3 RETURN country, originator_count",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.name AS country, COUNT(e.id) AS originator_count ORDER BY originator_count DESC LIMIT 3 NEXT RETURN country, originator_count"
    },
    {
        "cypher": "MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE a.countries = 'Hong Kong' RETURN e LIMIT 5",
        "gql": "MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE a.countries = 'Hong Kong' RETURN e LIMIT 5"
    },
    {
        "cypher": "MATCH (e:Entity)-[:COUNTRY]->(c:Country) WHERE c.code = 'CHN' WITH e MATCH (e)-[:FILED]->(f:Filing) RETURN avg(f.amount)",
        "gql": "MATCH (e:Entity)-[:COUNTRY]->(c:Country) WHERE c.code = 'CHN' RETURN e NEXT MATCH (e)-[:FILED]->(f:Filing) RETURN avg(f.amount)"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE b.city = 'San Mateo' AND c.name = 'Coffee' RETURN b.name",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE b.city = 'San Mateo' AND c.name = 'Coffee' RETURN b.name"
    },
    {
        "cypher": "MATCH (q:Question {answered: true}) RETURN q ORDER BY q.createdAt LIMIT 3",
        "gql": "MATCH (q:Question {answered: true}) RETURN q ORDER BY q.createdAt LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User) WHERE u.size < 2.0 RETURN u ORDER BY u.size DESC LIMIT 5",
        "gql": "MATCH (u:User) WHERE u.`size` < 2.0 RETURN u ORDER BY u.`size` DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(mentioned:User) RETURN mentioned.screen_name, count(t) AS mentions_count ORDER BY mentions_count DESC",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(mentioned:User) RETURN mentioned.screen_name, count(t) AS mentions_count ORDER BY mentions_count DESC"
    },
    {
        "cypher": "MATCH (c1:Character)-[i:INTERACTS45]->(c2:Character) WHERE i.weight > 50 RETURN c1.name AS character1, c2.name AS character2, i.weight AS weight",
        "gql": "MATCH (c1:Character)-[i:INTERACTS45]->(c2:Character) WHERE i.weight > 50 RETURN c1.name AS character1, c2.name AS character2, i.weight AS weight"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.imdbRating >= 9 RETURN DISTINCT d.name LIMIT 5",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.imdbRating >= 9 RETURN DISTINCT d.name LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) WHERE p.name = 'Keanu Reeves' AND m.title = 'The Matrix' RETURN r.roles AS roles",
        "gql": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) WHERE p.name = 'Keanu Reeves' AND m.title = 'The Matrix' RETURN r.roles AS roles"
    },
    {
        "cypher": "MATCH (a:Article{title:'Notes for a Quantum Index Theorem'})-[:PUBLISHED_IN]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Notes for a Quantum Index Theorem'})-[:PUBLISHED_IN]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.author_id IS NULL RETURN count(n)",
        "gql": "MATCH (n:Author) WHERE n.author_id IS NULL RETURN count(n)"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.label <> 'Population Dynamics_0' RETURN DISTINCT n.description AS description",
        "gql": "MATCH (n:Topic) WHERE n.label <> 'Population Dynamics_0' RETURN DISTINCT n.description AS description"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE m.votes > 200 WITH p, count(m) AS num_movies ORDER BY num_movies DESC LIMIT 5 RETURN p.name AS director, num_movies",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE m.votes > 200 RETURN p, count(m) AS num_movies ORDER BY num_movies DESC LIMIT 5 NEXT RETURN p.name AS director, num_movies"
    },
    {
        "cypher": "MATCH (a:AllDocument) MATCH (b:RefCalendar) WHERE a.Date_Stored = b.Calendar_Date RETURN a.Date_Stored, b.Day_Number",
        "gql": "MATCH (a:AllDocument) MATCH (b:RefCalendar) WHERE a.Date_Stored = b.Calendar_Date RETURN a.Date_Stored, b.Day_Number"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS|:CONCERNS|:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE f.amount < 500000 WITH c, count(f) AS num_filings ORDER BY num_filings DESC LIMIT 5 RETURN c.name AS country_name, num_filings",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE f.amount < 500000 RETURN c, count(f) AS num_filings ORDER BY num_filings DESC LIMIT 5 NEXT RETURN c.name AS country_name, num_filings"
    },
    {
        "cypher": "MATCH (p:Product) RETURN avg(p.pages_per_minute_color)",
        "gql": "MATCH (p:`Product`) RETURN avg(p.pages_per_minute_color)"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WHERE p.unitsInStock > 80 RETURN s",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) WHERE p.unitsInStock > 80 RETURN s"
    },
    {
        "cypher": "MATCH (s:Storm) WHERE NOT EXISTS((s)-[:AFFECTS]->(:Region)) RETURN s.Name",
        "gql": "MATCH (s:Storm) WHERE NOT EXISTS((s)-[:AFFECTS]->(:Region)) RETURN s.Name"
    },
    {
        "cypher": "MATCH (a:Article{abstract:'  Determining contributions by sub-portfolios or single exposures to portfolio-wide economic capital for credit risk is an important risk measurement task. Often economic capital is measured as Value-at-Risk (VaR) of the portfolio loss distribution. For many of the credit portfolio risk models used in practice, the VaR contributions then have to be estimated from Monte Carlo samples. In the context of a partly continuous loss distribution (i.e. continuous except for a positive point mass on zero), we investigate how to combine kernel estimation methods with importance sampling to achieve more efficient (i.e. less volatile) estimation of VaR contributions. '})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{`abstract`:'  Determining contributions by sub-portfolios or single exposures to portfolio-wide economic capital for credit risk is an important risk measurement task. Often economic capital is measured as Value-at-Risk (VaR) of the portfolio loss distribution. For many of the credit portfolio risk models used in practice, the VaR contributions then have to be estimated from Monte Carlo samples. In the context of a partly continuous loss distribution (i.e. continuous except for a positive point mass on zero), we investigate how to combine kernel estimation methods with importance sampling to achieve more efficient (i.e. less volatile) estimation of VaR contributions. '})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.originator_bank = 'CIMB Bank Berhad' AND f.amount > 500000 RETURN e.name AS originator_entity_name ORDER BY f.begin LIMIT 3",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.originator_bank = 'CIMB Bank Berhad' AND f.amount > 500000 RETURN e.name AS originator_entity_name ORDER BY f.begin LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WITH g, count(DISTINCT s) AS streamCount WHERE streamCount > 5 RETURN g.name AS Game, streamCount",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN g, count(s) AS streamCount NEXT RETURN g.name AS Game, streamCount"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WHERE p.unitPrice < 10 RETURN DISTINCT c.categoryName",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.unitPrice < 10 RETURN DISTINCT c.categoryName"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 1000 WITH u, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 1 RETURN u.display_name AS user, u.reputation AS reputation, question_count",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 1000 RETURN u, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 1 NEXT RETURN u.display_name AS user, u.reputation AS reputation, question_count"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.motto IS NOT NULL AND o.motto <> \"\" RETURN DISTINCT country.name AS Country",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.motto IS NOT NULL AND o.motto <> \"\" RETURN DISTINCT country.name AS Country"
    },
    {
        "cypher": "MATCH (org:Organization)-[:IN_CITY]->(city:City) WHERE city.name = 'Rome' WITH sum(org.nbrEmployees) AS totalEmployees RETURN totalEmployees",
        "gql": "MATCH (org:Organization)-[:IN_CITY]->(city:City) WHERE city.name = 'Rome' RETURN sum(org.nbrEmployees) AS totalEmployees NEXT RETURN totalEmployees"
    },
    {
        "cypher": "MATCH (a:Author) RETURN count(*)",
        "gql": "MATCH (a:Author) RETURN count(*)"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) WHERE r.weight > 150 RETURN c1.name AS character1, c2.name AS character2, r.weight AS weight",
        "gql": "MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) WHERE r.weight > 150 RETURN c1.name AS character1, c2.name AS character2, r.weight AS weight"
    },
    {
        "cypher": "MATCH (s:Stadium) WHERE s.Opening_year = 2005 RETURN avg(s.Capacity)",
        "gql": "MATCH (s:Stadium) WHERE s.Opening_year = 2005 RETURN avg(s.Capacity)"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answer_count = 0 RETURN q LIMIT 3",
        "gql": "MATCH (q:Question) WHERE q.answer_count = 0 RETURN q LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article{title:'Rational points on compactifications of semi-simple algebraic groups'})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Rational points on compactifications of semi-simple algebraic groups'})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 100000 AND q.answered = true RETURN u",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 100000 AND q.answered = true RETURN u"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'Singapore' RETURN f ORDER BY f.amount ASC LIMIT 3",
        "gql": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'Singapore' RETURN f ORDER BY f.amount ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article{title:'Capital allocation for credit portfolios with kernel estimators'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Capital allocation for credit portfolios with kernel estimators'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (t:Technician) RETURN t.Name ORDER BY t.Age",
        "gql": "MATCH (t:Technician) RETURN t.Name ORDER BY t.Age"
    },
    {
        "cypher": "MATCH (p:Person {name: 'Nancy Meyers'})-[:DIRECTED]->(m:Movie) MATCH (a:Person)-[:ACTED_IN]->(m) RETURN DISTINCT a.name",
        "gql": "MATCH (p:Person {name: 'Nancy Meyers'})-[:DIRECTED]->(m:Movie) MATCH (a:Person)-[:ACTED_IN]->(m) RETURN DISTINCT a.name"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN m.title AS movie, r.rating AS rating, r.summary AS review ORDER BY r.rating DESC LIMIT 3",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN m.title AS movie, r.rating AS rating, r.summary AS review ORDER BY r.rating DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity {name: 'Barclays Bank Plc'}) RETURN f.id AS FilingID, f.amount AS Amount ORDER BY f.amount DESC LIMIT 5",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity {name: 'Barclays Bank Plc'}) RETURN f.id AS FilingID, f.amount AS Amount ORDER BY f.amount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.score < 0 RETURN q.title, q.score, q.link ORDER BY q.score ASC LIMIT 5",
        "gql": "MATCH (q:Question) WHERE q.score < 0 RETURN q.title, q.score, q.link ORDER BY q.score ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Keyword) WHERE n.name <> 'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-' RETURN DISTINCT n.name AS name",
        "gql": "MATCH (n:Keyword) WHERE n.name <> 'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-' RETURN DISTINCT n.name AS name"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'}) WHERE o.revenue < 5000000 RETURN o",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'}) WHERE o.revenue < 5000000 RETURN o"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Tom Hanks\"})-[:CAST_FOR]->(m:Movie) RETURN avg(m.budget)",
        "gql": "MATCH (p:Person {name: \"Tom Hanks\"})-[:CAST_FOR]->(m:Movie) RETURN avg(m.budget)"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product {discontinued: true}) WITH s, count(p) AS discontinuedProducts ORDER BY discontinuedProducts DESC LIMIT 3 RETURN s.companyName, discontinuedProducts",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`{discontinued:true}) RETURN s, count(p) AS discontinuedProducts ORDER BY discontinuedProducts DESC LIMIT 3 NEXT RETURN s.companyName, discontinuedProducts"
    },
    {
        "cypher": "MATCH (d:Document) WHERE d.document_status_code = \"done\" AND d.document_type_code = \"Paper\" MATCH (s:RefShippingAgent {shipping_agent_name: \"USPS\"}) WHERE NOT EXISTS ((d)-[:HAS_SHIPPING_AGENT]->(s)) RETURN d.document_id",
        "gql": "MATCH (d:Document) WHERE d.document_status_code = \"done\" AND d.document_type_code = \"Paper\" MATCH (s:RefShippingAgent {shipping_agent_name: \"USPS\"}) WHERE NOT EXISTS ((d)-[:HAS_SHIPPING_AGENT]->(s)) RETURN d.document_id"
    },
    {
        "cypher": "MATCH (r:Review) WITH r ORDER BY r.stars ASC LIMIT 1 RETURN r.text",
        "gql": "MATCH (r:Review) RETURN r ORDER BY r.stars ASC LIMIT 1 NEXT RETURN r.text"
    },
    {
        "cypher": "MATCH (c:Character) WHERE 0.5 <= c.pagerank <= 1.0 RETURN c.name AS character_name, c.book45PageRank ORDER BY c.book45PageRank DESC",
        "gql": "MATCH (c:Character) WHERE 0.5 <= c.pagerank <= 1.0 RETURN c.name AS character_name, c.book45PageRank ORDER BY c.book45PageRank DESC"
    },
    {
        "cypher": "MATCH (c:Company) RETURN DISTINCT c.Main_Industry",
        "gql": "MATCH (c:Company) RETURN DISTINCT c.Main_Industry"
    },
    {
        "cypher": "MATCH (n:Article), (:Author {last_name: 'Dunajski'}) WHERE NOT (n) --> (:Author) RETURN n.article_id",
        "gql": "MATCH (n:Article), (:Author {last_name: 'Dunajski'}) WHERE NOT (n) --> (:Author) RETURN n.article_id"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 1",
        "gql": "MATCH (m:Movie) RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (me:Me {name: 'Neo4j'})<-[:MENTIONS]-(tweet1:Tweet)<-[:RETWEETS]-(:Tweet)<-[:POSTS]-(user:User)<-[:MENTIONS]-(tweet2:Tweet) RETURN DISTINCT tweet2.id_str",
        "gql": "MATCH (me:Me {name: 'Neo4j'})<-[:MENTIONS]-(tweet1:Tweet)<-[:RETWEETS]-(:Tweet)<-[:POSTS]-(user:User)<-[:MENTIONS]-(tweet2:Tweet) RETURN DISTINCT tweet2.id_str"
    },
    {
        "cypher": "MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN t, h",
        "gql": "MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN t, h"
    },
    {
        "cypher": "MATCH (a:Article) RETURN a.id, a.date ORDER BY a.date ASC LIMIT 1",
        "gql": "MATCH (a:Article) RETURN a.id, a.`date` ORDER BY a.`date` ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (c:Character)-[r:INTERACTS1 {weight: 291, book: 1}]->(:Character) RETURN c LIMIT 3",
        "gql": "MATCH (c:Character)-[r:INTERACTS1 {weight: 291, book: 1}]->(:Character) RETURN c LIMIT 3"
    },
    {
        "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(rack:Rack {zone: 3})-[:HOLDS]->(machine:Machine)-[:TYPE]->(type:Type) RETURN rack.name AS rackName, machine.name AS machineName, type.name AS typeName ORDER BY rack.name, machine.name LIMIT 5",
        "gql": "MATCH (dc:DataCenter)-[:CONTAINS]->(rack:Rack {zone: 3})-[:HOLDS]->(machine:Machine)-[:TYPE]->(type:Type) RETURN rack.name AS rackName, machine.name AS machineName, type.name AS typeName ORDER BY rack.name, machine.name LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Topic{cluster:'10'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Topic{cluster:'10'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.struck_off_date = '15-FEB-2013' RETURN e.name AS entity_name, e.struck_off_date AS struck_off_date",
        "gql": "MATCH (e:Entity) WHERE e.struck_off_date = '15-FEB-2013' RETURN e.name AS entity_name, e.struck_off_date AS struck_off_date"
    },
    {
        "cypher": "MATCH (e:Employee) RETURN COUNT(e)",
        "gql": "MATCH (e:Employee) RETURN COUNT(e)"
    },
    {
        "cypher": "MATCH (a:Journal{name:'J.Statist.Phys'})-[*]->(d:DOI{name:'10.2140/gt.2000.4.407'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Journal{name:'J.Statist.Phys'})-[]->{1,}(d:DOI{name:'10.2140/gt.2000.4.407'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (s:Stream {name: \"dota2mc_ru\"})<-[:CHATTER]-(chatter:Stream) RETURN chatter.url",
        "gql": "MATCH (s:Stream {name: \"dota2mc_ru\"})<-[:CHATTER]-(chatter:Stream) RETURN chatter.url"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.isDissolved = true AND o.revenue > 10000000 RETURN o.name ORDER BY o.name LIMIT 3",
        "gql": "MATCH (o:Organization) WHERE o.isDissolved = true AND o.revenue > 10000000 RETURN o.name ORDER BY o.name LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.nbrEmployees > 300 RETURN DISTINCT c.name AS cityName",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.nbrEmployees > 300 RETURN DISTINCT c.name AS cityName"
    },
    {
        "cypher": "MATCH (aff1:affiliation)<-[:author_in_affiliation]-(a:author {name: 'Zhouchen Lin'})-[:author_write_paper]->(p:paper)<-[:author_write_paper]-(coa:author)-[:author_in_affiliation]->(aff2:affiliation) WHERE aff1 <> aff2 RETURN aff1.name, aff2.name, COUNT(*) AS collaborations ORDER BY collaborations DESC",
        "gql": "MATCH (aff1:affiliation)<-[:author_in_affiliation]-(a:author {name: 'Zhouchen Lin'})-[:author_write_paper]->(p:paper)<-[:author_write_paper]-(coa:author)-[:author_in_affiliation]->(aff2:affiliation) WHERE aff1 <> aff2 RETURN aff1.name, aff2.name, COUNT(*) AS collaborations ORDER BY collaborations DESC"
    },
    {
        "cypher": "MATCH (t:Tweet) RETURN t ORDER BY t.created_at DESC LIMIT 5",
        "gql": "MATCH (t:Tweet) RETURN t ORDER BY t.created_at DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) MATCH (p)-[:WROTE]->(m) RETURN m.title AS movie_title",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) MATCH (p)-[:WROTE]->(m) RETURN m.title AS movie_title"
    },
    {
        "cypher": "MATCH (stream)-[:CHATTER]->(chatter:User)-[:CHATTER]->(target_stream:Stream) MATCH (target_stream)-[:PLAYS]->(g:Game {name: 'Rust'}) WHERE target_stream.followers > 5000 MATCH (stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'}) RETURN DISTINCT stream.name",
        "gql": "MATCH (stream)-[:CHATTER]->(chatter:User)-[:CHATTER]->(target_stream:Stream) MATCH (target_stream)-[:PLAYS]->(g:Game {name: 'Rust'}) WHERE target_stream.followers > 5000 MATCH (stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'}) RETURN DISTINCT stream.name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN count(m)",
        "gql": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN count(m)"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category) WITH s, size(collect(DISTINCT c.categoryID)) AS categoryCount ORDER BY categoryCount ASC LIMIT 1 RETURN s.companyName",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN s, size(c.categoryID) AS categoryCount ORDER BY categoryCount ASC LIMIT 1 NEXT RETURN s.companyName"
    },
    {
        "cypher": "MATCH (e:Employee)-[:HAS_BENEFIT]->(b:Benefit) WHERE b.type = 'Health Insurance' RETURN e.name",
        "gql": "MATCH (e:Employee)-[:HAS_BENEFIT]->(b:Benefit) WHERE b.type = 'Health Insurance' RETURN e.name"
    },
    {
        "cypher": "MATCH (cc:CatalogContent) RETURN cc.catalog_entry_name ORDER BY cc.price_in_dollars DESC LIMIT 1",
        "gql": "MATCH (cc:CatalogContent) RETURN cc.catalog_entry_name ORDER BY cc.price_in_dollars DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Timed_Status_of_Thing) RETURN COUNT(DISTINCT n.Status_of_Thing_Code)",
        "gql": "MATCH (n:Timed_Status_of_Thing) RETURN COUNT(DISTINCT n.Status_of_Thing_Code)"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.upVotes > 0 AND q.downVotes > 0 RETURN u.display_name, u.id, u.link",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.upVotes > 0 AND q.downVotes > 0 RETURN u.display_name, u.id, u.link"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:ACTED_IN]-(p:Person) WHERE size(r.roles) = 3 RETURN m.title",
        "gql": "MATCH (m:Movie)<-[r:ACTED_IN]-(p:Person) WHERE size(r.roles) = 3 RETURN m.title"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.label = 'Dynamical Systems_10' RETURN n",
        "gql": "MATCH (n:Topic) WHERE n.label = 'Dynamical Systems_10' RETURN n"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1BetweennessCentrality IS NOT NULL RETURN c.name AS character, c.book1BetweennessCentrality AS centrality ORDER BY centrality LIMIT 3",
        "gql": "MATCH (c:Character) WHERE c.book1BetweennessCentrality IS NOT NULL RETURN c.name AS character, c.book1BetweennessCentrality AS centrality ORDER BY centrality LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:ORIGINATOR]->(f:Filing) RETURN c.name AS Country, count(f) AS NumberOfFilings ORDER BY NumberOfFilings DESC LIMIT 5",
        "gql": "MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:ORIGINATOR]->(f:Filing) RETURN c.name AS Country, count(f) AS NumberOfFilings ORDER BY NumberOfFilings DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS BusinessName, b.location AS Location",
        "gql": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS BusinessName, b.location AS Location"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.name, c.Assets_billion ORDER BY c.name ASC",
        "gql": "MATCH (c:Company) RETURN c.name, c.Assets_billion ORDER BY c.name ASC"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.released = 2008 RETURN m.title, m.released ORDER BY m.title LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.released = 2008 RETURN m.title, m.released ORDER BY m.title LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta='18' WITH DISTINCT n, m RETURN n.abstract AS abstract, count(m) AS count LIMIT 20",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '18' RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS `count` LIMIT 20"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Science Fiction'}) RETURN avg(m.budget)",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Science Fiction'}) RETURN avg(m.budget)"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) WITH m, count(c) AS countries_count WHERE countries_count > 1 RETURN m ORDER BY m.popularity DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN m, count(c) AS countries_count NEXT RETURN m ORDER BY m.popularity DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (ceo:Person)<-[:HAS_CEO]-(org:Organization {isPublic: true}),       (ceo)-[:HAS_CHILD]->(child:Person) RETURN ceo.name AS CEO, org.name AS Organization, child.name AS Child",
        "gql": "MATCH (ceo:Person)<-[:HAS_CEO]-(org:Organization {isPublic: true}),       (ceo)-[:HAS_CHILD]->(child:Person) RETURN ceo.name AS CEO, org.name AS Organization, child.name AS Child"
    },
    {
        "cypher": "MATCH (n:Article {comments:'Published by Geometry and Topology at   http://www.maths.warwick.ac.uk/gt/GTVol4/paper14.abs.html'}) RETURN n",
        "gql": "MATCH (n:Article {comments:'Published by Geometry and Topology at   http://www.maths.warwick.ac.uk/gt/GTVol4/paper14.abs.html'}) RETURN n"
    },
    {
        "cypher": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Area DESC",
        "gql": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Area DESC"
    },
    {
        "cypher": "MATCH (u:User) WHERE u.location IS NOT NULL RETURN u.location AS Location, count(u) AS UserCount ORDER BY UserCount DESC LIMIT 3",
        "gql": "MATCH (u:User) WHERE u.location IS NOT NULL RETURN u.location AS Location, count(u) AS UserCount ORDER BY UserCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN s LIMIT 3",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN s LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Station)-[:SERVES]->(t:Train) WITH s.Name as name, count(t) AS count WHERE count >= 2 RETURN name",
        "gql": "MATCH (s:Station)-[:SERVES]->(t:Train) RETURN s.Name AS name, count(t) AS `count` NEXT RETURN name"
    },
    {
        "cypher": "MATCH (u:User)-[:VIP]->(s:Stream) WITH u, count(s) AS vipCount ORDER BY vipCount DESC LIMIT 3 RETURN u.name, vipCount",
        "gql": "MATCH (u:User)-[:VIP]->(s:Stream) RETURN u, count(s) AS vipCount ORDER BY vipCount DESC LIMIT 3 NEXT RETURN u.name, vipCount"
    },
    {
        "cypher": "MATCH (u:User) RETURN u.name, u.screen_name, u.statuses ORDER BY u.statuses DESC LIMIT 5",
        "gql": "MATCH (u:User) RETURN u.name, u.screen_name, u.statuses ORDER BY u.statuses DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Article {title:'Log mirror symmetry and local mirror symmetry'})-[:PUBLISHED_IN {year: '2001'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Log mirror symmetry and local mirror symmetry'})-[:PUBLISHED_IN{`year`:'2001'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) MATCH (s)-[:HAS_TEAM]->(:Team) RETURN g.name AS game, SUM(s.total_view_count) AS total_views ORDER BY total_views DESC LIMIT 3",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) MATCH (s)-[:HAS_TEAM]->(:Team) RETURN g.name AS game, SUM(s.total_view_count) AS total_views ORDER BY total_views DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person) RETURN p.Name ORDER BY p.Date_of_Birth",
        "gql": "MATCH (p:Person) RETURN p.Name ORDER BY p.Date_of_Birth"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.tagline IS NOT NULL RETURN m.title, m.tagline ORDER BY size(m.tagline) DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.tagline IS NOT NULL RETURN m.title, m.tagline ORDER BY size(m.tagline) DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) WHERE u.reputation > 5000 RETURN DISTINCT t.name",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) WHERE u.reputation > 5000 RETURN DISTINCT t.name"
    },
    {
        "cypher": "MATCH (n:Article) -[wr:WRITTEN_BY]->(m) WHERE n.article_id='1009' RETURN m.affiliation",
        "gql": "MATCH (n:Article) -[wr:WRITTEN_BY]->(m) WHERE n.article_id='1009' RETURN m.affiliation"
    },
    {
        "cypher": "MATCH (n:Campus {Campus: \"San Francisco State University\"})<-[:TEACHES]-(fee:CsuFee {Year: 1996}) return fee.CampusFee",
        "gql": "MATCH (n:Campus{Campus:\"San Francisco State University\"})<-[:TEACHES]-(fee:CsuFee{`Year`:1996}) RETURN fee.CampusFee"
    },
    {
        "cypher": "MATCH (q:Question {upVotes: 2}) RETURN q LIMIT 5",
        "gql": "MATCH (q:Question {upVotes: 2}) RETURN q LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book45PageRank < 0.7 RETURN c LIMIT 3",
        "gql": "MATCH (c:Character) WHERE c.book45PageRank < 0.7 RETURN c LIMIT 3"
    },
    {
        "cypher": "MATCH (book:Book), (publication:Publication)  WHERE publication.Book_ID = book.Book_ID RETURN book.Title as Title ORDER BY publication.Price DESC",
        "gql": "MATCH (book:Book), (publication:Publication)  WHERE publication.Book_ID = book.Book_ID RETURN book.Title as Title ORDER BY publication.Price DESC"
    },
    {
        "cypher": "MATCH (a:Article {title:'Notes for a Quantum Index Theorem'})-[:PUBLISHED_IN {pages: '45-96'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article {title:'Notes for a Quantum Index Theorem'})-[:PUBLISHED_IN {pages: '45-96'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.runtime < 90 AND exists((m)<-[:RATED]-()) RETURN m.title AS movie, m.revenue AS revenue ORDER BY revenue DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.runtime < 90 AND exists((m)<-[:RATED]-()) RETURN m.title AS movie, m.revenue AS revenue ORDER BY revenue DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (b:BehaviorIncident) WHERE b.incident_type_code = \"NOISE\" RETURN b.date_incident_start, b.date_incident_end",
        "gql": "MATCH (b:BehaviorIncident) WHERE b.incident_type_code = \"NOISE\" RETURN b.date_incident_start, b.date_incident_end"
    },
    {
        "cypher": "MATCH (o:Organization {isDissolved: true})<-[:MENTIONS]-(a:Article) RETURN a.title AS articleTitle, a.siteName AS articleSiteName",
        "gql": "MATCH (o:Organization {isDissolved: true})<-[:MENTIONS]-(a:Article) RETURN a.title AS articleTitle, a.siteName AS articleSiteName"
    },
    {
        "cypher": "MATCH (n:DocumentLocation) RETURN n.Location_Code, count(*)",
        "gql": "MATCH (n:DocumentLocation) RETURN n.Location_Code, count(*)"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '227'}]->(m) WHERE n.title='Generating Functional in CFT on Riemann Surfaces II: Homological Aspects' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '227'}]->(m) WHERE n.title='Generating Functional in CFT on Riemann Surfaces II: Homological Aspects' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q ORDER BY q.creation_date LIMIT 5",
        "gql": "MATCH (q:Question) RETURN q ORDER BY q.creation_date LIMIT 5"
    },
    {
        "cypher": "MATCH (documents:Documents) WHERE documents.Document_Name = \"Robbin CV\" RETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "gql": "MATCH (documents:Documents) WHERE documents.Document_Name = \"Robbin CV\" RETURN documents.Document_ID,documents.Template_ID,documents.Document_Description"
    },
    {
        "cypher": "MATCH (o:Organization {name: \"New Energy Group\"})<-[:MENTIONS]-(a:Article) RETURN a ORDER BY a.date DESC LIMIT 3",
        "gql": "MATCH (o:Organization{name:\"New Energy Group\"})<-[:MENTIONS]-(a:Article) RETURN a ORDER BY a.`date` DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Technician) RETURN COUNT(*)",
        "gql": "MATCH (n:Technician) RETURN COUNT(*)"
    },
    {
        "cypher": "MATCH (t:Teacher) WHERE t.last_name = \"Medhurst\" RETURN t.gender",
        "gql": "MATCH (t:Teacher) WHERE t.last_name = \"Medhurst\" RETURN t.gender"
    },
    {
        "cypher": "MATCH (a:Article{abstract:'  We extend a result of to Esnault-Levine-Viehweg concerning the Chow groups of hypersurfaces in projective space to those in weighted projective spaces. '})-[:WRITTEN_BY]->(c:Author)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{`abstract`:'  We extend a result of to Esnault-Levine-Viehweg concerning the Chow groups of hypersurfaces in projective space to those in weighted projective spaces. '})-[:WRITTEN_BY]->(c:Author)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH p=(a:Journal{journal_id:'f6582df4742923aacfc6e67638bd4bf6'})-[*]->(d:Keyword{name:'gain'}) RETURN count(p)",
        "gql": "MATCH (a:Journal{journal_id:'f6582df4742923aacfc6e67638bd4bf6'})-[]->{1,}(d:Keyword{name:'gain'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (m:Movie {title: 'Toy Story'}), (other:Movie) WHERE other.runtime = m.runtime AND other <> m RETURN other.title, other.runtime",
        "gql": "MATCH (m:Movie {title: 'Toy Story'}), (other:Movie) WHERE other.runtime = m.runtime AND other <> m RETURN other.title, other.runtime"
    },
    {
        "cypher": "MATCH (c:Candidate) RETURN c.Support_rate, c.Consider_rate, c.Oppose_rate ORDER BY c.Unsure_rate",
        "gql": "MATCH (c:Candidate) RETURN c.Support_rate, c.Consider_rate, c.Oppose_rate ORDER BY c.Unsure_rate"
    },
    {
        "cypher": "MATCH (l:RefLocation) RETURN DISTINCT l.Location_Code",
        "gql": "MATCH (l:RefLocation) RETURN DISTINCT l.Location_Code"
    },
    {
        "cypher": "MATCH (u:User)-[r:RATED]->(m:Movie) WITH u, AVG(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 5 RETURN u.userId, u.name, avgRating",
        "gql": "MATCH (u:User)-[r:RATED]->(m:Movie) RETURN u, AVG(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 5 NEXT RETURN u.userId, u.name, avgRating"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: \"Animation\"}) WITH avg(m.runtime) AS averageRuntime RETURN averageRuntime",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:\"Animation\"}) RETURN avg(m.runtime) AS averageRuntime NEXT RETURN averageRuntime"
    },
    {
        "cypher": "MATCH (r:RefLocation) RETURN count(*)",
        "gql": "MATCH (r:RefLocation) RETURN count(*)"
    },
    {
        "cypher": "MATCH (l:List) RETURN DISTINCT l.Classroom, l.Grade",
        "gql": "MATCH (l:`List`) RETURN DISTINCT l.Classroom, l.Grade"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE country.name <> \"United States of America\" RETURN DISTINCT o",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE country.name <> \"United States of America\" RETURN DISTINCT o"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE a.bornIn = 'France' RETURN m.title LIMIT 3",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE a.bornIn = 'France' RETURN m.title LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)-[:VIP]->(:User) WITH avg(s.total_view_count) AS average_view_count RETURN average_view_count",
        "gql": "MATCH (s:Stream)-[:VIP]->(:User) RETURN avg(s.total_view_count) AS average_view_count NEXT RETURN average_view_count"
    },
    {
        "cypher": "MATCH (c:Character {name: \"Cersei-Lannister\"})-[:INTERACTS45 {book: 45}]->(other:Character) WITH other ORDER BY other.book45PageRank DESC LIMIT 3 RETURN other.name AS character_name",
        "gql": "MATCH (c:Character{name:\"Cersei-Lannister\"})-[:INTERACTS45{book:45}]->(other:Character) RETURN other ORDER BY other.book45PageRank DESC LIMIT 3 NEXT RETURN other.name AS character_name"
    },
    {
        "cypher": "MATCH (l:List) WHERE l.Classroom = 108 RETURN l.FirstName",
        "gql": "MATCH (l:`List`) WHERE l.Classroom = 108 RETURN l.FirstName"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE datetime(a.date).year = 2019 RETURN DISTINCT o.name",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.`date` = 2019 RETURN DISTINCT o.name"
    },
    {
        "cypher": "MATCH (m:Movie) UNWIND m.countries AS country WITH country, COUNT(DISTINCT m) AS movieCount ORDER BY movieCount DESC RETURN country, movieCount LIMIT 1",
        "gql": "MATCH (m:Movie) RETURN country, COUNT(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN country, movieCount LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Just Chatting'}),        (s)-[:HAS_TEAM]->(t:Team) WHERE s.total_view_count > 1000000 RETURN DISTINCT t.name",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Just Chatting'}),        (s)-[:HAS_TEAM]->(t:Team) WHERE s.total_view_count > 1000000 RETURN DISTINCT t.name"
    },
    {
        "cypher": "MATCH (p:Product) WHERE p.reorderLevel > 20 RETURN p.productName, p.reorderLevel ORDER BY p.productName LIMIT 3",
        "gql": "MATCH (p:`Product`) WHERE p.reorderLevel > 20 RETURN p.productName, p.reorderLevel ORDER BY p.productName LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Topic) MATCH (m:Topic) RETURN n.label, m.cluster LIMIT 8",
        "gql": "MATCH (n:Topic) MATCH (m:Topic) RETURN n.label, m.cluster LIMIT 8"
    },
    {
        "cypher": "MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'CA'}) RETURN b.name AS businessName",
        "gql": "MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'CA'}) RETURN b.name AS businessName"
    },
    {
        "cypher": "MATCH (o:Officer)-[r:officer_of {link: \"shareholder of\"}]->(e:Entity {incorporation_date: \"10-JAN-2006\"}) RETURN o.name AS officer_name, e.name AS entity_name",
        "gql": "MATCH (o:Officer)-[r:officer_of {link: \"shareholder of\"}]->(e:Entity {incorporation_date: \"10-JAN-2006\"}) RETURN o.name AS officer_name, e.name AS entity_name"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) WITH m, COUNT(a) AS actorCount ORDER BY actorCount DESC LIMIT 3 RETURN m.title AS movieTitle, actorCount",
        "gql": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN m, COUNT(a) AS actorCount ORDER BY actorCount DESC LIMIT 3 NEXT RETURN m.title AS movieTitle, actorCount"
    },
    {
        "cypher": "MATCH (d:Director {bornIn: 'USA'})-[:DIRECTED]->(m:Movie) RETURN m.title LIMIT 5",
        "gql": "MATCH (d:Director {bornIn: 'USA'})-[:DIRECTED]->(m:Movie) RETURN m.title LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Member) RETURN count(m), m.Address",
        "gql": "MATCH (m:Member) RETURN count(m), m.Address"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Adventure'}) WITH a, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 5 RETURN a.name AS actor, movieCount",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre{name:'Adventure'}) RETURN a, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 5 NEXT RETURN a.name AS actor, movieCount"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.comments  IS NOT NULL AND n.article_id > 1063 RETURN n.comments AS comments, n.article_id AS article_id ORDER BY article_id DESC",
        "gql": "MATCH (n:Article) WHERE n.comments  IS NOT NULL AND n.article_id > 1063 RETURN n.comments AS comments, n.article_id AS article_id ORDER BY article_id DESC"
    },
    {
        "cypher": "MATCH (c:Course) RETURN c.CName ORDER BY c.Credits",
        "gql": "MATCH (c:Course) RETURN c.CName ORDER BY c.Credits"
    },
    {
        "cypher": "MATCH (p:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language {id: 'en'}) RETURN p.name AS ProductionCompany, COUNT(m) AS FilmCount ORDER BY FilmCount DESC LIMIT 3",
        "gql": "MATCH (p:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language {id: 'en'}) RETURN p.name AS ProductionCompany, COUNT(m) AS FilmCount ORDER BY FilmCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet) WHERE t.favorites > 200 RETURN t LIMIT 5",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet) WHERE t.favorites > 200 RETURN t LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Keyword {key_id:'c807a6943bac079cc85fda45518ea7f4'}) RETURN n",
        "gql": "MATCH (n:Keyword {key_id:'c807a6943bac079cc85fda45518ea7f4'}) RETURN n"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title <> 'Summation and transformation formulas for elliptic hypergeometric series' RETURN DISTINCT n.abstract AS abstract",
        "gql": "MATCH (n:Article) WHERE n.title <> 'Summation and transformation formulas for elliptic hypergeometric series' RETURN DISTINCT n.`abstract` AS `abstract`"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '217'}]->(m) WHERE n.title='Geometrical Tools for Quantum Euclidean Spaces' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '217'}]->(m) WHERE n.title='Geometrical Tools for Quantum Euclidean Spaces' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (app:Application {name: 'webserver'})-[:LISTENS]->(port:Port) RETURN COUNT(DISTINCT port.port) AS numberOfPorts",
        "gql": "MATCH (app:Application {name: 'webserver'})-[:LISTENS]->(port:Port) RETURN COUNT(DISTINCT port.port) AS numberOfPorts"
    },
    {
        "cypher": "MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE r.stars < 4.5 RETURN b.name LIMIT 3",
        "gql": "MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE r.stars < 4.5 RETURN b.name LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.createdAt >= '2019-01-01T00:00:00Z' AND q.createdAt <= '2019-12-31T23:59:59Z' AND q.answered = true RETURN q",
        "gql": "MATCH (q:Question) WHERE q.createdAt >= '2019-01-01T00:00:00Z' AND q.createdAt <= '2019-12-31T23:59:59Z' AND q.answered = true RETURN q"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {year : '2001'}]->(m) WHERE n.comments='28 pages, LaTex' RETURN m.name",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2001'}]->(m) WHERE n.comments = '28 pages, LaTex' RETURN m.name"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.link IS NOT NULL RETURN q.title, q.createdAt, u.display_name ORDER BY q.createdAt LIMIT 3",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.link IS NOT NULL RETURN q.title, q.createdAt, u.display_name ORDER BY q.createdAt LIMIT 3"
    },
    {
        "cypher": "MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.area <> 1.77 RETURN DISTINCT u1.label",
        "gql": "MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.area <> 1.77 RETURN DISTINCT u1.label"
    },
    {
        "cypher": "MATCH (sections:Sections) RETURN sections.section_name,sections.section_description",
        "gql": "MATCH (sections:Sections) RETURN sections.section_name,sections.section_description"
    },
    {
        "cypher": "MATCH (r:Resident) RETURN DISTINCT r.date_moved_in",
        "gql": "MATCH (r:Resident) RETURN DISTINCT r.date_moved_in"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name, c.book1BetweennessCentrality ORDER BY c.book1BetweennessCentrality DESC LIMIT 1",
        "gql": "MATCH (c:Character) RETURN c.name, c.book1BetweennessCentrality ORDER BY c.book1BetweennessCentrality DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.year < 2000 RETURN m.title AS title, m.budget AS budget ORDER BY m.budget DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.`year` < 2000 RETURN m.title AS title, m.budget AS budget ORDER BY m.budget DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WITH b, COUNT(r) AS reviewCount ORDER BY reviewCount DESC LIMIT 1 RETURN b.name AS businessName, reviewCount",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) RETURN b, COUNT(r) AS reviewCount ORDER BY reviewCount DESC LIMIT 1 NEXT RETURN b.name AS businessName, reviewCount"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN]->(m) WHERE n.comments='19 pages, AMSLatex, references added' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN]->(m) WHERE n.comments='19 pages, AMSLatex, references added' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 95 WITH size(split(r.summary, \" \")) AS words RETURN avg(words) AS average_word_count",
        "gql": "MATCH (:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 95 RETURN size(r.summary) AS words NEXT RETURN avg(words) AS average_word_count"
    },
    {
        "cypher": "MATCH (a:Answer) RETURN a ORDER BY a.uuid ASC LIMIT 3",
        "gql": "MATCH (a:Answer) RETURN a ORDER BY a.uuid ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[r:RATED]->(m:Movie) WHERE r.timestamp > 1451606400 RETURN m.title, m.year, r.rating ORDER BY r.timestamp DESC LIMIT 5",
        "gql": "MATCH (u:User)-[r:RATED]->(m:Movie) WHERE r.`timestamp` > 1451606400 RETURN m.title, m.`year`, r.rating ORDER BY r.`timestamp` DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 2 OR n.cluster < 11 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 2 OR n.cluster < 11 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = \"en\" RETURN count(s)",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = \"en\" RETURN count(s)"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.degree > 0 RETURN c.name, c.book1PageRank ORDER BY c.book1PageRank LIMIT 5",
        "gql": "MATCH (c:Character) WHERE c.degree > 0 RETURN c.name, c.book1PageRank ORDER BY c.book1PageRank LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Stream)<-[:MODERATOR]-(u:User)-[:VIP]->(s) RETURN s.name AS stream_name, u.name AS moderator_vip_name",
        "gql": "MATCH (s:Stream)<-[:MODERATOR]-(u:User)-[:VIP]->(s) RETURN s.name AS stream_name, u.name AS moderator_vip_name"
    },
    {
        "cypher": "MATCH (zone:Zone {zone: 3})-[:ROUTES]->(interface:Interface) RETURN interface.ip",
        "gql": "MATCH (zone:Zone {zone: 3})-[:ROUTES]->(interface:Interface) RETURN interface.ip"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars < 4.0 RETURN COUNT(DISTINCT b) AS numberOfBusinesses",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars < 4.0 RETURN COUNT(DISTINCT b) AS numberOfBusinesses"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.abstract='  In this article we study the interface generated by the collision between two cristals growing layer by layer on a one-dimensional substrate through random decomposition of particles. We relate this interface with the notion of beta-path in an equivalent directed polymer model and, by using asymptotics results from Baik and Rains (2000) and some hydrodynamic tools introduced by Cator and Groeenenboon (2005), we derive a law of large numbers for such a path and obtain some bounds for its fluctuations. ' RETURN m.key_id",
        "gql": "MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.`abstract` = '  In this article we study the interface generated by the collision between two cristals growing layer by layer on a one-dimensional substrate through random decomposition of particles. We relate this interface with the notion of beta-path in an equivalent directed polymer model and, by using asymptotics results from Baik and Rains (2000) and some hydrodynamic tools introduced by Cator and Groeenenboon (2005), we derive a law of large numbers for such a path and obtain some bounds for its fluctuations. ' RETURN m.key_id"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.year >= 2012 RETURN m.title, m.year, m.imdbVotes ORDER BY m.imdbVotes DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.`year` >= 2012 RETURN m.title, m.`year`, m.imdbVotes ORDER BY m.imdbVotes DESC LIMIT 3"
    },
    {
        "cypher": "MATCH p=(a:Topic{label:'Mathematical Analysis_8'})-[*]->(d:Report{report_no:'SFB 478 Geometrische Stukturen in der Mathematik, Muenster; Preprint   No. 73'}) RETURN count(p)",
        "gql": "MATCH (a:Topic{label:'Mathematical Analysis_8'})-[]->{1,}(d:Report{report_no:'SFB 478 Geometrische Stukturen in der Mathematik, Muenster; Preprint   No. 73'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (parent:Organization {name: \"Accenture\"})-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN subsidiary.name AS subsidiaryName",
        "gql": "MATCH (parent:Organization {name: \"Accenture\"})-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN subsidiary.name AS subsidiaryName"
    },
    {
        "cypher": "MATCH (u:User)-[:POSTS]->(t:Tweet) RETURN t.text AS tweet_text, t.created_at AS created_at ORDER BY t.created_at DESC LIMIT 3",
        "gql": "MATCH (u:User)-[:POSTS]->(t:Tweet) RETURN t.text AS tweet_text, t.created_at AS created_at ORDER BY t.created_at DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Course {Days:\"MTW\"}) RETURN c.CName",
        "gql": "MATCH (c:Course {Days:\"MTW\"}) RETURN c.CName"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(:Category), (r:Review)-[:REVIEWS]->(b) WHERE b.city = 'Burlingame' RETURN DISTINCT b.name",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(:Category), (r:Review)-[:REVIEWS]->(b) WHERE b.city = 'Burlingame' RETURN DISTINCT b.name"
    },
    {
        "cypher": "MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application) RETURN a.name",
        "gql": "MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application) RETURN a.name"
    },
    {
        "cypher": "MATCH (a:Article {title:'Summation and transformation formulas for elliptic hypergeometric series'})-[:PUBLISHED_IN {year: '2002'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Summation and transformation formulas for elliptic hypergeometric series'})-[:PUBLISHED_IN{`year`:'2002'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (b:Business {address: '723 California Dr'})-[:REVIEWS]-(r:Review) RETURN b.name, b.businessId",
        "gql": "MATCH (b:Business {address: '723 California Dr'})-[:REVIEWS]-(r:Review) RETURN b.name, b.businessId"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: \"Seattle\"}) WHERE o.revenue > 10000000 RETURN o LIMIT 5",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: \"Seattle\"}) WHERE o.revenue > 10000000 RETURN o LIMIT 5"
    },
    {
        "cypher": "MATCH (investor:Organization)-[:HAS_INVESTOR]->(company:Organization)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS ceoName, company.name AS companyName, investor.name AS investorName LIMIT 3",
        "gql": "MATCH (investor:Organization)-[:HAS_INVESTOR]->(company:Organization)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS ceoName, company.name AS companyName, investor.name AS investorName LIMIT 3"
    },
    {
        "cypher": "MATCH (n:DOI) WHERE n.doi_id = 'f2f5ea4787de1e16c51c306e07bb740c' OR n.name IS NOT NULL RETURN DISTINCT n.name AS name",
        "gql": "MATCH (n:DOI) WHERE n.doi_id = 'f2f5ea4787de1e16c51c306e07bb740c' OR n.name IS NOT NULL RETURN DISTINCT n.name AS name"
    },
    {
        "cypher": "MATCH (n:DOI) WHERE n.doi_id = 'abce5ed79c520bdb8fd79a61a852648d' OR n.doi_id IS NOT NULL RETURN DISTINCT n.doi_id AS doi_id",
        "gql": "MATCH (n:DOI) WHERE n.doi_id = 'abce5ed79c520bdb8fd79a61a852648d' OR n.doi_id IS NOT NULL RETURN DISTINCT n.doi_id AS doi_id"
    },
    {
        "cypher": "MATCH (a:Article {articleId: 667379003})-[:VARIANT_OF]->(p:Product) RETURN p.productTypeName",
        "gql": "MATCH (a:Article{articleId:667379003})-[:VARIANT_OF]->(p:`Product`) RETURN p.productTypeName"
    },
    {
        "cypher": "MATCH ()- [r:same_name_as]->() RETURN DISTINCT r.sourceID",
        "gql": "MATCH ()-[r:same_name_as]->() RETURN DISTINCT r.sourceID"
    },
    {
        "cypher": "MATCH (c:Candidate) RETURN c.Support_rate ORDER BY c.Support_rate DESC LIMIT 3",
        "gql": "MATCH (c:Candidate) RETURN c.Support_rate ORDER BY c.Support_rate DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 11 OR n.cluster < 5 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 11 OR n.cluster < 5 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (p:Product)-[o:ORDERS]->(:Order) WITH p.productName AS productName, COUNT(DISTINCT o.unitPrice) AS priceVariations ORDER BY priceVariations DESC LIMIT 3 RETURN productName, priceVariations",
        "gql": "MATCH (p:`Product`)-[o:ORDERS]->(:`Order`) RETURN p.productName AS productName, COUNT(o.unitPrice) AS priceVariations ORDER BY priceVariations DESC LIMIT 3 NEXT RETURN productName, priceVariations"
    },
    {
        "cypher": "MATCH p=(a:Author{author_id:'f6bcab8e721fbec0f293fee49d73c9c4'})-[*]->(d:UpdateDate{update_date:'2014-11-11'}) RETURN count(p)",
        "gql": "MATCH (a:Author{author_id:'f6bcab8e721fbec0f293fee49d73c9c4'})-[]->{1,}(d:UpdateDate{update_date:'2014-11-11'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (o:Organization {name: 'Accenture'})<-[:HAS_SUBSIDIARY*1..3]-(parent:Organization) RETURN parent.name LIMIT 3",
        "gql": "MATCH (o:Organization{name:'Accenture'})<-[:HAS_SUBSIDIARY]-{1,3}(parent:Organization) RETURN parent.name LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Answer)-[:ANSWERED]->(q:Question) WHERE a.is_accepted = false RETURN a LIMIT 3",
        "gql": "MATCH (a:Answer)-[:ANSWERED]->(q:Question) WHERE a.is_accepted = false RETURN a LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality > 0.5 AND c.book1PageRank < 1 RETURN c.name AS character",
        "gql": "MATCH (c:Character) WHERE c.centrality > 0.5 AND c.book1PageRank < 1 RETURN c.name AS character"
    },
    {
        "cypher": "MATCH (u:User {display_name: 'Anu'})-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question) WITH avg(q.view_count) AS average_view_count RETURN average_view_count",
        "gql": "MATCH (u:User{display_name:'Anu'})-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question) RETURN avg(q.view_count) AS average_view_count NEXT RETURN average_view_count"
    },
    {
        "cypher": "MATCH (e:Editor) RETURN e.Age, COUNT(e) ORDER BY e.Age",
        "gql": "MATCH (e:Editor) RETURN e.Age, COUNT(e) ORDER BY e.Age"
    },
    {
        "cypher": "MATCH (c:Campus)<-[:TEACHES]-(f:Faculty) WHERE f.Year = 2002 RETURN f.Faculty ORDER BY f.Faculty DESC LIMIT 1",
        "gql": "MATCH (c:Campus)<-[:TEACHES]-(f:Faculty) WHERE f.`Year` = 2002 RETURN f.Faculty ORDER BY f.Faculty DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '218'}]->(m) WHERE n.article_id='1139' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '218'}]->(m) WHERE n.article_id='1139' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '131-170' RETURN n.title AS title, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '131-170' RETURN n.title AS title, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (s:Student) WHERE s.Age > 18 AND s.Major = 600 RETURN s.Fname, s.LName",
        "gql": "MATCH (s:Student) WHERE s.Age > 18 AND s.Major = 600 RETURN s.Fname, s.LName"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.runtime > 180 WITH d, COUNT(m) AS movieCount ORDER BY movieCount DESC LIMIT 3 RETURN d.name AS directorName, movieCount",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.runtime > 180 RETURN d, COUNT(m) AS movieCount ORDER BY movieCount DESC LIMIT 3 NEXT RETURN d.name AS directorName, movieCount"
    },
    {
        "cypher": "MATCH (a:Address) RETURN a.city ORDER BY a.city",
        "gql": "MATCH (a:Address) RETURN a.city ORDER BY a.city"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: \"Seattle\"}) RETURN a.id AS ArticleID, a.title AS ArticleTitle, a.date AS ArticleDate",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City{name:\"Seattle\"}) RETURN a.id AS ArticleID, a.title AS ArticleTitle, a.`date` AS ArticleDate"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.degree IS NOT NULL RETURN c.name, c.degree ORDER BY c.degree DESC LIMIT 5",
        "gql": "MATCH (c:Character) WHERE c.degree IS NOT NULL RETURN c.name, c.degree ORDER BY c.degree DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE e.country = 'CHN' WITH avg(f.amount) AS average_amount RETURN average_amount",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE e.country = 'CHN' RETURN avg(f.amount) AS average_amount NEXT RETURN average_amount"
    },
    {
        "cypher": "MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) WHERE s.followers > 10000 RETURN t.name AS team_name ORDER BY t.createdAt LIMIT 3",
        "gql": "MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) WHERE s.followers > 10000 RETURN t.name AS team_name ORDER BY t.createdAt LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business {name: \"Ducky's Car Wash\"})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name",
        "gql": "MATCH (b:Business {name: \"Ducky's Car Wash\"})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WITH d, count(DISTINCT m.countries) AS numCountries WHERE numCountries > 3 RETURN d.name, numCountries ORDER BY numCountries DESC LIMIT 5",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d, count(m.countries) AS numCountries NEXT RETURN d.name, numCountries ORDER BY numCountries DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Report) WHERE n.report_no = 'none provided' OR n.report_id IS NOT NULL RETURN DISTINCT n.report_id AS report_id",
        "gql": "MATCH (n:Report) WHERE n.report_no = 'none provided' OR n.report_id IS NOT NULL RETURN DISTINCT n.report_id AS report_id"
    },
    {
        "cypher": "MATCH (a:Journal{name:'Commun.Math.Phys'})-[*]->(d:Keyword{key_id:'d2d74b47b149d8090871a2f33e80809b'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Journal{name:'Commun.Math.Phys'})-[]->{1,}(d:Keyword{key_id:'d2d74b47b149d8090871a2f33e80809b'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:AMPLIFIES]->(user:User) RETURN user.screen_name, COUNT(*) AS amplification_count ORDER BY amplification_count DESC LIMIT 5",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:AMPLIFIES]->(user:User) RETURN user.screen_name, COUNT(*) AS amplification_count ORDER BY amplification_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (r:Review)-[:REVIEWS]->(b:Business) WITH b, r ORDER BY r.stars ASC LIMIT 1 RETURN b.name AS businessName, r.stars AS lowestRating",
        "gql": "MATCH (r:Review)-[:REVIEWS]->(b:Business) RETURN b, r ORDER BY r.stars ASC LIMIT 1 NEXT RETURN b.name AS businessName, r.stars AS lowestRating"
    },
    {
        "cypher": "MATCH p=(a:UpdateDate{update_date:'2017-07-11'})-[*]->(d:Author{first_name:'Marco'}) RETURN count(p)",
        "gql": "MATCH (a:UpdateDate{update_date:'2017-07-11'})-[]->{1,}(d:Author{first_name:'Marco'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.first_name <> 'J. Daniel' RETURN DISTINCT n.affiliation AS affiliation",
        "gql": "MATCH (n:Author) WHERE n.first_name <> 'J. Daniel' RETURN DISTINCT n.affiliation AS affiliation"
    },
    {
        "cypher": "MATCH (b:Business) WITH b.state AS state, count(b) AS businessCount ORDER BY businessCount DESC RETURN state, businessCount LIMIT 3",
        "gql": "MATCH (b:Business) RETURN b.state AS state, count(b) AS businessCount ORDER BY businessCount DESC NEXT RETURN state, businessCount LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order) WHERE o.shipCountry = 'France' RETURN c.customerID, c.companyName, c.contactName LIMIT 3",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`) WHERE o.shipCountry = 'France' RETURN c.customerID, c.companyName, c.contactName LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business {address: '301 E Main St'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN COUNT(DISTINCT u) AS numberOfUsers",
        "gql": "MATCH (b:Business {address: '301 E Main St'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN COUNT(DISTINCT u) AS numberOfUsers"
    },
    {
        "cypher": "MATCH (n:Article) MATCH (m:Article) RETURN n.abstract, m.title LIMIT 8",
        "gql": "MATCH (n:Article) MATCH (m:Article) RETURN n.`abstract`, m.title LIMIT 8"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Music' RETURN m.title",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Music' RETURN m.title"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN m.title AS Movie, count(a) AS NumberOfActors ORDER BY NumberOfActors DESC LIMIT 1",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN m.title AS Movie, count(a) AS NumberOfActors ORDER BY NumberOfActors DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (p:Person) RETURN count(DISTINCT p.Hometown)",
        "gql": "MATCH (p:Person) RETURN count(DISTINCT p.Hometown)"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answered = true RETURN count(q) AS AnsweredQuestionsCount",
        "gql": "MATCH (q:Question) WHERE q.answered = true RETURN count(q) AS AnsweredQuestionsCount"
    },
    {
        "cypher": "MATCH (n:Article) -[:HAS_DOI]->(m:DOI) WITH DISTINCT n, m RETURN n.title AS title, count(m) AS count LIMIT 20",
        "gql": "MATCH (n:Article)-[:HAS_DOI]->(m:DOI) RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` LIMIT 20"
    },
    {
        "cypher": "MATCH (t:Technician) RETURN t.Team, t.Starting_Year",
        "gql": "MATCH (t:Technician) RETURN t.Team, t.Starting_Year"
    },
    {
        "cypher": "MATCH (a:Author{last_name:'Burnol'})-[*]->(d:DOI{name:'10.1007/s00365-002-0501-6'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Author{last_name:'Burnol'})-[]->{1,}(d:DOI{name:'10.1007/s00365-002-0501-6'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (r:Resident) RETURN avg(r.age) as average_age",
        "gql": "MATCH (r:Resident) RETURN avg(r.age) as average_age"
    },
    {
        "cypher": "MATCH (u:User)-[:VIP]->(s:Stream) WITH u, COUNT(s) AS vip_stream_count ORDER BY vip_stream_count DESC LIMIT 3 RETURN u.name AS userName, vip_stream_count",
        "gql": "MATCH (u:User)-[:VIP]->(s:Stream) RETURN u, COUNT(s) AS vip_stream_count ORDER BY vip_stream_count DESC LIMIT 3 NEXT RETURN u.name AS userName, vip_stream_count"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:CREW_FOR]-(crew:Person) WITH m, count(crew) AS crewCount ORDER BY crewCount DESC LIMIT 3 RETURN m.title AS movieTitle",
        "gql": "MATCH (m:Movie)<-[:CREW_FOR]-(crew:Person) RETURN m, count(crew) AS crewCount ORDER BY crewCount DESC LIMIT 3 NEXT RETURN m.title AS movieTitle"
    },
    {
        "cypher": "MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN m.title, l.name LIMIT 5",
        "gql": "MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN m.title, l.name LIMIT 5"
    },
    {
        "cypher": "MATCH (os:OS {name: 'RHEL'})-[:INSTANCE]->(version:Version) RETURN version.name LIMIT 3",
        "gql": "MATCH (os:OS {name: 'RHEL'})-[:INSTANCE]->(version:Version) RETURN version.name LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) WHERE a.bornIn = \"USA\" AND g.name = \"Comedy\" RETURN m.title AS MovieTitle, a.name AS ActorName",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) WHERE a.bornIn = \"USA\" AND g.name = \"Comedy\" RETURN m.title AS MovieTitle, a.name AS ActorName"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Jeremy Allen White\"})-[:ACTED_IN]->(m:Movie) RETURN COUNT(m) AS movies_played",
        "gql": "MATCH (p:Person {name: \"Jeremy Allen White\"})-[:ACTED_IN]->(m:Movie) RETURN COUNT(m) AS movies_played"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p) RETURN p.name LIMIT 3",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p) RETURN p.name LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WITH m, count(DISTINCT g) AS genreCount ORDER BY genreCount DESC LIMIT 5 RETURN m.title AS movieTitle, genreCount",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m, count(g) AS genreCount ORDER BY genreCount DESC LIMIT 5 NEXT RETURN m.title AS movieTitle, genreCount"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '217'}]->(m) WHERE n.title='Classification of Subsystems for Local Nets with Trivial Superselection   Structure' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '217'}]->(m) WHERE n.title='Classification of Subsystems for Local Nets with Trivial Superselection   Structure' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.originator_iso = \"SGP\" MATCH (f)-[:BENEFITS]->(be:Entity)-[:COUNTRY]->(bc:Country) WITH bc.name AS beneficiary_country, count(f) AS filing_count ORDER BY filing_count DESC RETURN beneficiary_country, filing_count LIMIT 5",
        "gql": "MATCH (f:Filing) WHERE f.originator_iso = \"SGP\" MATCH (f)-[:BENEFITS]->(be:Entity)-[:COUNTRY]->(bc:Country) RETURN bc.name AS beneficiary_country, count(f) AS filing_count ORDER BY filing_count DESC NEXT RETURN beneficiary_country, filing_count LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN a.name LIMIT 5",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN a.name LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(:Tag {name: 'neo4j'}) WITH DISTINCT u MATCH (u)-[:COMMENTED]->(c:Comment) RETURN min(c.score)",
        "gql": "MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(:Tag{name:'neo4j'}) RETURN DISTINCT u NEXT MATCH (u)-[:COMMENTED]->(c:Comment) RETURN min(c.score)"
    },
    {
        "cypher": "MATCH (u:User)-[r:FRIENDS_WITH]->() RETURN u, COUNT(r) AS count_FRIENDS_WITH_",
        "gql": "MATCH (u:User)-[r:FRIENDS_WITH]->() RETURN u, COUNT(r) AS count_FRIENDS_WITH_"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review) WITH u, avg(r.stars) AS average_rating RETURN u.name, average_rating ORDER BY average_rating DESC LIMIT 3",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review) RETURN u, avg(r.stars) AS average_rating NEXT RETURN u.name, average_rating ORDER BY average_rating DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.rating > 90 RETURN m.title, r.rating",
        "gql": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.rating > 90 RETURN m.title, r.rating"
    },
    {
        "cypher": "MATCH (a:Address {countries: 'Samoa'})-[r]-() WITH DISTINCT r.link AS link RETURN link LIMIT 3",
        "gql": "MATCH (a:Address{countries:'Samoa'})-[r]-() RETURN DISTINCT r.link AS link NEXT RETURN link LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE e.countries = \"Hong Kong\" RETURN e.name, a.address",
        "gql": "MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE e.countries = \"Hong Kong\" RETURN e.name, a.address"
    },
    {
        "cypher": "MATCH (m:Movie) WITH m.released AS releaseYear, count(m) AS movieCount ORDER BY movieCount DESC RETURN releaseYear, movieCount LIMIT 1",
        "gql": "MATCH (m:Movie) RETURN m.released AS releaseYear, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN releaseYear, movieCount LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Keyword {key_id:'72e4f3fc2930bd3a0a7730a664d069d6'}) RETURN n",
        "gql": "MATCH (n:Keyword {key_id:'72e4f3fc2930bd3a0a7730a664d069d6'}) RETURN n"
    },
    {
        "cypher": "MATCH (library:Business {name: 'Missoula Public Library'})-[:IN_CATEGORY]->(category:Category) MATCH (business:Business)-[:IN_CATEGORY]->(category) MATCH (business)<-[:REVIEWS]-(review:Review) MATCH (review)<-[:WROTE]-(user:User) RETURN DISTINCT user.name",
        "gql": "MATCH (library:Business {name: 'Missoula Public Library'})-[:IN_CATEGORY]->(category:Category) MATCH (business:Business)-[:IN_CATEGORY]->(category) MATCH (business)<-[:REVIEWS]-(review:Review) MATCH (review)<-[:WROTE]-(user:User) RETURN DISTINCT user.name"
    },
    {
        "cypher": "MATCH (vip_stream:Stream)-[:VIP]->(vip:User) MATCH (vip)-[:CHATTER]->(ru_stream:Stream)-[:HAS_LANGUAGE]->(lang:Language) WHERE lang.name = 'ru' RETURN DISTINCT vip_stream.name",
        "gql": "MATCH (vip_stream:Stream)-[:VIP]->(vip:User) MATCH (vip)-[:CHATTER]->(ru_stream:Stream)-[:HAS_LANGUAGE]->(lang:Language) WHERE lang.name = 'ru' RETURN DISTINCT vip_stream.name"
    },
    {
        "cypher": "MATCH (p:Patient)-[h:HAD_SURGERY]->(s:Surgery)-[:OF_TYPE]->(st:SurgeryType) WITH p.name as patient, s, st.name as surgeryType WITH patient, count(s) as numSurgeries, COLLECT(surgeryType) as surgeryTypes WHERE numSurgeries > 1 RETURN patient, surgeryTypes",
        "gql": "MATCH (p:Patient)-[h:HAD_SURGERY]->(s:Surgery)-[:OF_TYPE]->(st:SurgeryType) RETURN p.name AS patient, s, st.name AS surgeryType NEXT RETURN patient, surgeryTypes"
    },
    {
        "cypher": "MATCH (a:Actor) RETURN a.Name ORDER BY a.Name ASC",
        "gql": "MATCH (a:Actor) RETURN a.Name ORDER BY a.Name ASC"
    },
    {
        "cypher": "MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN c.name, count(a) AS adultFilmCount ORDER BY adultFilmCount DESC LIMIT 3",
        "gql": "MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN c.name, count(a) AS adultFilmCount ORDER BY adultFilmCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Report), (:Topic {label: 'Mathematical Analysis_8'}) WHERE NOT (n) --> (:Topic) RETURN n.report_no",
        "gql": "MATCH (n:Report), (:Topic {label: 'Mathematical Analysis_8'}) WHERE NOT (n) --> (:Topic) RETURN n.report_no"
    },
    {
        "cypher": "MATCH (f:Filing) RETURN f ORDER BY f.amount ASC LIMIT 3",
        "gql": "MATCH (f:Filing) RETURN f ORDER BY f.amount ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.lastEditTimestamp = '1638311020926' RETURN e",
        "gql": "MATCH (e:Entity) WHERE e.lastEditTimestamp = '1638311020926' RETURN e"
    },
    {
        "cypher": "MATCH (t:Technician) WITH t.Team as Team, COUNT(t) AS count WHERE count >= 2 RETURN Team",
        "gql": "MATCH (t:Technician) RETURN t.Team AS Team, COUNT(t) AS `count` NEXT RETURN Team"
    },
    {
        "cypher": "MATCH (f:Filing)-[:CONCERNS]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 1000000 RETURN e LIMIT 3",
        "gql": "MATCH (f:Filing)-[:CONCERNS]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 1000000 RETURN e LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity {name: 'HOTFOCUS CO., LTD.'}) RETURN e.countries",
        "gql": "MATCH (e:Entity {name: 'HOTFOCUS CO., LTD.'}) RETURN e.countries"
    },
    {
        "cypher": "MATCH (dt:RefDocumentType) WHERE dt.document_type_code = \"Paper\" RETURN dt.document_type_description",
        "gql": "MATCH (dt:RefDocumentType) WHERE dt.document_type_code = \"Paper\" RETURN dt.document_type_description"
    },
    {
        "cypher": "MATCH (n:Author) RETURN n.author_id",
        "gql": "MATCH (n:Author) RETURN n.author_id"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.summary = 'Fun, but a little far fetched' RETURN m.title",
        "gql": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.summary = 'Fun, but a little far fetched' RETURN m.title"
    },
    {
        "cypher": "MATCH (p:Person {name: 'Julie Spellman Sweet'})-[r]-(o:Organization) WHERE p.name IS NOT NULL AND o.name IS NOT NULL RETURN p, r, o",
        "gql": "MATCH (p:Person {name: 'Julie Spellman Sweet'})-[r]-(o:Organization) WHERE p.name IS NOT NULL AND o.name IS NOT NULL RETURN p, r, o"
    },
    {
        "cypher": "MATCH (o:Officer)-[:officer_of]->(e:Entity {incorporation_date: '06-JAN-2006'}) RETURN o.name AS OfficerName",
        "gql": "MATCH (o:Officer)-[:officer_of]->(e:Entity {incorporation_date: '06-JAN-2006'}) RETURN o.name AS OfficerName"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.lastEditTimestamp = '1638311020926' RETURN e.name, e.node_id, e.countries, e.ibcRUC, e.valid_until, e.country_codes, e.service_provider, e.address, e.inactivation_date, e.struck_off_date, e.status, e.jurisdiction_description, e.incorporation_date, e.original_name, e.jurisdiction, e.internal_id, e.sourceID, e.former_name, e.company_type, e.tax_stat_description, e.note, e.dorm_date, e.type, e.closed_date, e.company_number, e.comments, e.entity_number",
        "gql": "MATCH (e:Entity) WHERE e.lastEditTimestamp = '1638311020926' RETURN e.name, e.node_id, e.countries, e.ibcRUC, e.valid_until, e.country_codes, e.service_provider, e.address, e.inactivation_date, e.struck_off_date, e.status, e.jurisdiction_description, e.incorporation_date, e.original_name, e.jurisdiction, e.internal_id, e.sourceID, e.former_name, e.company_type, e.tax_stat_description, e.note, e.dorm_date, e.type, e.closed_date, e.company_number, e.comments, e.entity_number"
    },
    {
        "cypher": "MATCH (s:Stream) RETURN s.name AS stream_name, s.followers AS follower_count ORDER BY follower_count DESC LIMIT 5",
        "gql": "MATCH (s:Stream) RETURN s.name AS stream_name, s.followers AS follower_count ORDER BY follower_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Journal{journal_id:'f6582df4742923aacfc6e67638bd4bf6'})-[*]->(d:Article{article_id:'1052'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Journal{journal_id:'f6582df4742923aacfc6e67638bd4bf6'})-[]->{1,}(d:Article{article_id:'1052'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (stadium:stadium) WHERE 5000<=stadium.capacity<=10000 RETURN stadium.location,stadium.name",
        "gql": "MATCH (stadium:stadium) WHERE 5000<=stadium.capacity<=10000 RETURN stadium.location,stadium.name"
    },
    {
        "cypher": "MATCH (:Actor {name: \"Tom Hanks\"})-[:ACTED_IN]->(:Movie)<-[:DIRECTED]-(directors:Director) RETURN COUNT(DISTINCT directors) AS NumberOfDirectorsWorkedWithTomHanks",
        "gql": "MATCH (:Actor {name: \"Tom Hanks\"})-[:ACTED_IN]->(:Movie)<-[:DIRECTED]-(directors:Director) RETURN COUNT(DISTINCT directors) AS NumberOfDirectorsWorkedWithTomHanks"
    },
    {
        "cypher": "MATCH (a:Article{title:'Failure of Brown representability in derived categories'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Article{title:'Failure of Brown representability in derived categories'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (u:User {id: 1})-[r:RATED]->(m:Movie) RETURN m.title, r.rating, r.timestamp ORDER BY r.timestamp DESC LIMIT 3",
        "gql": "MATCH (u:User{id:1})-[r:RATED]->(m:Movie) RETURN m.title, r.rating, r.`timestamp` ORDER BY r.`timestamp` DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c1:Character)-[:INTERACTS1]->(c2:Character) RETURN c1.community AS Community, count(*) AS Frequency ORDER BY Frequency DESC LIMIT 5",
        "gql": "MATCH (c1:Character)-[:INTERACTS1]->(c2:Character) RETURN c1.community AS Community, count(*) AS Frequency ORDER BY Frequency DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User {display_name: 'Adrien Lemaire'})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) RETURN t.name LIMIT 3",
        "gql": "MATCH (u:User {display_name: 'Adrien Lemaire'})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) RETURN t.name LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Actor) WHERE a.tmdbId IS NOT NULL AND a.imdbId IS NULL RETURN a.name LIMIT 3",
        "gql": "MATCH (a:Actor) WHERE a.tmdbId IS NOT NULL AND a.imdbId IS NULL RETURN a.name LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) RETURN m",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) RETURN m"
    },
    {
        "cypher": "MATCH (c:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) WITH c, count(distinct l) as numLangs WHERE numLangs > 1 RETURN c.name LIMIT 3",
        "gql": "MATCH (c:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN c, count(l) AS numLangs NEXT RETURN c.name LIMIT 3"
    },
    {
        "cypher": "MATCH (actor:Actor)-[:ACTED_IN]->(movie:Movie) WHERE actor.born < date('1950-01-01') AND movie.imdbRating > 8.0 RETURN DISTINCT actor.name",
        "gql": "MATCH (actor:Actor)-[:ACTED_IN]->(movie:Movie) WHERE actor.born < date('1950-01-01') AND movie.imdbRating > 8.0 RETURN DISTINCT actor.name"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WITH s, count(DISTINCT l) AS distinctLanguages ORDER BY distinctLanguages DESC LIMIT 3 RETURN s.id, s.name, distinctLanguages",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN s, count(l) AS distinctLanguages ORDER BY distinctLanguages DESC LIMIT 3 NEXT RETURN s.id, s.name, distinctLanguages"
    },
    {
        "cypher": "MATCH (r:Review)-[:REVIEWS]->(b:Business) WHERE r.date.year = 2016 WITH b, count(r) AS reviewCount RETURN b.name AS businessName, reviewCount ORDER BY reviewCount DESC LIMIT 1",
        "gql": "MATCH (r:Review)-[:REVIEWS]->(b:Business) WHERE r.`date` = 2016 RETURN b, count(r) AS reviewCount NEXT RETURN b.name AS businessName, reviewCount ORDER BY reviewCount DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) UNWIND m.countries AS country WITH d, COUNT(DISTINCT country) AS countryCount RETURN d.name AS directorName, countryCount ORDER BY countryCount DESC LIMIT 3",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d, COUNT(country) AS countryCount NEXT RETURN d.name AS directorName, countryCount ORDER BY countryCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Report) WHERE n.report_no = 'PAM-780' OR n.report_no IS NOT NULL RETURN DISTINCT n.report_no AS report_no",
        "gql": "MATCH (n:Report) WHERE n.report_no = 'PAM-780' OR n.report_no IS NOT NULL RETURN DISTINCT n.report_no AS report_no"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.city = 'San Mateo' RETURN u.name",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.city = 'San Mateo' RETURN u.name"
    },
    {
        "cypher": "MATCH p=(a:Article{title:'Chow groups of weighted hypersurfaces'})-[*]->(d:DOI{name:'10.1142/S0219061301000077'}) RETURN count(p)",
        "gql": "MATCH (a:Article{title:'Chow groups of weighted hypersurfaces'})-[]->{1,}(d:DOI{name:'10.1142/S0219061301000077'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (u:User {name: 'Omar Huffman'})-[:RATED]->(m:Movie) RETURN m.title AS MovieTitle, m.imdbRating AS IMDbRating ORDER BY m.imdbRating DESC LIMIT 5",
        "gql": "MATCH (u:User {name: 'Omar Huffman'})-[:RATED]->(m:Movie) RETURN m.title AS MovieTitle, m.imdbRating AS IMDbRating ORDER BY m.imdbRating DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answered = true RETURN q.title, q.downVotes ORDER BY q.downVotes DESC LIMIT 3",
        "gql": "MATCH (q:Question) WHERE q.answered = true RETURN q.title, q.downVotes ORDER BY q.downVotes DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (fc:Farm_competition) RETURN fc.Theme ORDER BY fc.Year ASC",
        "gql": "MATCH (fc:Farm_competition) RETURN fc.Theme ORDER BY fc.`Year` ASC"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.budget > 100000000 RETURN DISTINCT g.name AS genre_name",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.budget > 100000000 RETURN DISTINCT g.name AS genre_name"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '217' RETURN n.title AS title, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '217' RETURN n.title AS title, count(m) AS `count`"
    },
    {
        "cypher": "MATCH p=(a:Categories{specifications:'cond-mat.soft'})-[*]->(d:Journal{journal_id:'d3b321ed42589ea798c241aa7de23d2d'}) RETURN count(p)",
        "gql": "MATCH (a:Categories{specifications:'cond-mat.soft'})-[]->{1,}(d:Journal{journal_id:'d3b321ed42589ea798c241aa7de23d2d'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (c:Character)-[i:INTERACTS3]->(other:Character) RETURN c.name, min(i.weight) AS minWeight ORDER BY minWeight LIMIT 5",
        "gql": "MATCH (c:Character)-[i:INTERACTS3]->(other:Character) RETURN c.name, min(i.weight) AS minWeight ORDER BY minWeight LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Character) RETURN max(c.degree) AS max_degree, c.book1BetweennessCentrality ORDER BY max_degree DESC LIMIT 1",
        "gql": "MATCH (c:Character) RETURN max(c.degree) AS max_degree, c.book1BetweennessCentrality ORDER BY max_degree DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Article{title:'Modeling Credit Risk with Partial Information'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Modeling Credit Risk with Partial Information'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.label = 'Category theory_3' RETURN n",
        "gql": "MATCH (n:Topic) WHERE n.label = 'Category theory_3' RETURN n"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answered = true AND q.score >= 1 RETURN q",
        "gql": "MATCH (q:Question) WHERE q.answered = true AND q.score >= 1 RETURN q"
    },
    {
        "cypher": "MATCH (a:Article) RETURN a ORDER BY a.sentiment DESC LIMIT 5",
        "gql": "MATCH (a:Article) RETURN a ORDER BY a.sentiment DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(:Movie), (p)-[:PRODUCED]->(:Movie) RETURN DISTINCT p.name LIMIT 3",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(:Movie), (p)-[:PRODUCED]->(:Movie) RETURN DISTINCT p.name LIMIT 3"
    },
    {
        "cypher": "MATCH (singer:singer) WHERE singer.Country = 'France' RETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "gql": "MATCH (singer:singer) WHERE singer.Country = 'France' RETURN avg(singer.Age),min(singer.Age),max(singer.Age)"
    },
    {
        "cypher": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie {title: 'Speed Racer'}) RETURN p.name, r.roles LIMIT 3",
        "gql": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie {title: 'Speed Racer'}) RETURN p.name, r.roles LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country) WHERE o.revenue > 1E8 RETURN DISTINCT c.name LIMIT 3",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country) WHERE o.revenue > 1E8 RETURN DISTINCT c.name LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany {name: 'Pixar Animation Studios'}) RETURN m.title",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany {name: 'Pixar Animation Studios'}) RETURN m.title"
    },
    {
        "cypher": "MATCH (u:User {name: 'itsbigchase'})-[:CHATTER]->(s:Stream) RETURN s ORDER BY s.createdAt ASC LIMIT 3",
        "gql": "MATCH (u:User {name: 'itsbigchase'})-[:CHATTER]->(s:Stream) RETURN s ORDER BY s.createdAt ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet) RETURN rt LIMIT 3",
        "gql": "MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet) RETURN rt LIMIT 3"
    },
    {
        "cypher": "MATCH (i:Intermediary) -[:intermediary_of]-> (e:Entity) WHERE i.status = \"ACTIVE\" RETURN DISTINCT e.country_codes",
        "gql": "MATCH (i:Intermediary) -[:intermediary_of]-> (e:Entity) WHERE i.status = \"ACTIVE\" RETURN DISTINCT e.country_codes"
    },
    {
        "cypher": "MATCH (u:User {id: 1})-[:RATED]->(m:Movie) RETURN m.title AS MovieTitle",
        "gql": "MATCH (u:User {id: 1})-[:RATED]->(m:Movie) RETURN m.title AS MovieTitle"
    },
    {
        "cypher": "MATCH (Candidate:Candidate) RETURN Candidate.Support_rate ORDER BY Candidate.Support_rate DESC LIMIT 3",
        "gql": "MATCH (Candidate:Candidate) RETURN Candidate.Support_rate ORDER BY Candidate.Support_rate DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) WITH d, count(DISTINCT g) AS num_genres WHERE num_genres > 3 RETURN d.name AS director, num_genres ORDER BY num_genres DESC LIMIT 3",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN d, count(g) AS num_genres NEXT RETURN d.name AS director, num_genres ORDER BY num_genres DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (pc:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) WHERE m.budget > 100000000 RETURN pc.name AS production_company, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 3",
        "gql": "MATCH (pc:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) WHERE m.budget > 100000000 RETURN pc.name AS production_company, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 3",
        "gql": "MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Company)-[:OWNS]->(gs:GasStation) RETURN c.Company, count(*) as num_stations ORDER BY num_stations DESC",
        "gql": "MATCH (c:Company)-[:OWNS]->(gs:GasStation) RETURN c.Company, count(*) as num_stations ORDER BY num_stations DESC"
    },
    {
        "cypher": "MATCH (f:Faculty) WHERE f.Year = 2002 RETURN sum(f.Faculty) as total",
        "gql": "MATCH (f:Faculty) WHERE f.`Year` = 2002 RETURN sum(f.Faculty) AS total"
    },
    {
        "cypher": "MATCH (l:List) WHERE l.Classroom = 111 RETURN l.LastName",
        "gql": "MATCH (l:`List`) WHERE l.Classroom = 111 RETURN l.LastName"
    },
    {
        "cypher": "MATCH (n:Journal) MATCH (m:Topic) RETURN n.journal_id, m.description LIMIT 8",
        "gql": "MATCH (n:Journal) MATCH (m:Topic) RETURN n.journal_id, m.description LIMIT 8"
    },
    {
        "cypher": "MATCH (gc:Gradeconversion) RETURN max(gc.gradepoint), min(gc.gradepoint)",
        "gql": "MATCH (gc:Gradeconversion) RETURN max(gc.gradepoint), min(gc.gradepoint)"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.motto IS NOT NULL AND o.isPublic = true RETURN o.name, o.motto LIMIT 3",
        "gql": "MATCH (o:Organization) WHERE o.motto IS NOT NULL AND o.isPublic = true RETURN o.name, o.motto LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0.5 RETURN o LIMIT 3",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0.5 RETURN o LIMIT 3"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:CONTAINS]->(link:Link) RETURN tweet.text, tweet.favorites ORDER BY tweet.favorites DESC LIMIT 5",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:CONTAINS]->(link:Link) RETURN tweet.text, tweet.favorites ORDER BY tweet.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business) RETURN DISTINCT b.city",
        "gql": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business) RETURN DISTINCT b.city"
    },
    {
        "cypher": "MATCH (c:Company)-[:OWNS]->(gs:GasStation) WHERE c.Company = 'ExxonMobil' RETURN gs.Manager_Name as manager_name",
        "gql": "MATCH (c:Company)-[:OWNS]->(gs:GasStation) WHERE c.Company = 'ExxonMobil' RETURN gs.Manager_Name as manager_name"
    },
    {
        "cypher": "MATCH (a:Actor) RETURN a.Character, a.Duration",
        "gql": "MATCH (a:Actor) RETURN a.Character, a.`Duration`"
    },
    {
        "cypher": "MATCH (neo:User {screen_name: \"neo4j\"})-[:FOLLOWS]->(follower:User) MATCH (follower)-[:POSTS]->(tweet:Tweet)-[:CONTAINS]->(link:Link) RETURN DISTINCT tweet",
        "gql": "MATCH (neo:User {screen_name: \"neo4j\"})-[:FOLLOWS]->(follower:User) MATCH (follower)-[:POSTS]->(tweet:Tweet)-[:CONTAINS]->(link:Link) RETURN DISTINCT tweet"
    },
    {
        "cypher": "MATCH (kr:Organization {name: \"Knowledge Rules\"})-[:IN_CITY]->(krCity:City) WITH krCity MATCH (otherOrg:Organization)-[:IN_CITY]->(krCity) WITH otherOrg MATCH (otherOrg)<-[:MENTIONS]-(article:Article) RETURN avg(article.sentiment)",
        "gql": "MATCH (kr:Organization{name:\"Knowledge Rules\"})-[:IN_CITY]->(krCity:City) MATCH (otherOrg:Organization)-[:IN_CITY]->(krCity) RETURN krCity NEXT MATCH (otherOrg)<-[:MENTIONS]-(article:Article) RETURN avg(article.sentiment)"
    },
    {
        "cypher": "MATCH (a:Author) RETURN a.lname ORDER BY a.lname",
        "gql": "MATCH (a:Author) RETURN a.lname ORDER BY a.lname"
    },
    {
        "cypher": "MATCH (a:Student_Address) RETURN max(a.monthly_rental), min(a.monthly_rental)",
        "gql": "MATCH (a:Student_Address) RETURN max(a.monthly_rental), min(a.monthly_rental)"
    },
    {
        "cypher": "MATCH (p:Product) RETURN avg(p.pages_per_minute_color)",
        "gql": "MATCH (p:`Product`) RETURN avg(p.pages_per_minute_color)"
    },
    {
        "cypher": "MATCH p=(a:Report{report_id:'d4a4409b7e8a77f4894c998a04162257'})-[*]->(d:Topic{label:'Mathematics_6'}) RETURN count(p)",
        "gql": "MATCH (a:Report{report_id:'d4a4409b7e8a77f4894c998a04162257'})-[]->{1,}(d:Topic{label:'Mathematics_6'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (n:Article) -[:HAS_DOI]->(m:DOI) WITH DISTINCT n, m RETURN n.comments AS comments, count(m) AS doi_count ORDER BY doi_count",
        "gql": "MATCH (n:Article)-[:HAS_DOI]->(m:DOI) RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS doi_count ORDER BY doi_count"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WITH a, count(DISTINCT m.languages) AS numLanguages WHERE numLanguages > 3 RETURN a.name, numLanguages ORDER BY numLanguages DESC LIMIT 3",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a, count(m.languages) AS numLanguages NEXT RETURN a.name, numLanguages ORDER BY numLanguages DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE b.address = '723 California Dr' RETURN b.name AS businessName, c.name AS categoryName",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE b.address = '723 California Dr' RETURN b.name AS businessName, c.name AS categoryName"
    },
    {
        "cypher": "MATCH (u:User)-[:CREATED]->(p:Post) WITH u, COUNT(p) AS postCount ORDER BY postCount ASC LIMIT 1 RETURN postCount",
        "gql": "MATCH (u:User)-[:CREATED]->(p:Post) RETURN u, COUNT(p) AS postCount ORDER BY postCount ASC LIMIT 1 NEXT RETURN postCount"
    },
    {
        "cypher": "MATCH (T1:Templates)-[]-(T2:Documents) WHERE T2.Document_Name = \"Data base\" RETURN T1.Template_Type_Code",
        "gql": "MATCH (T1:Templates)-[]-(T2:Documents) WHERE T2.Document_Name = \"Data base\" RETURN T1.Template_Type_Code"
    },
    {
        "cypher": "MATCH (m:Movie)-[:DIRECTED]-(d:Director) WHERE m.imdbRating > 8.0 RETURN DISTINCT d.name",
        "gql": "MATCH (m:Movie)-[:DIRECTED]-(d:Director) WHERE m.imdbRating > 8.0 RETURN DISTINCT d.name"
    },
    {
        "cypher": "MATCH (u:User) RETURN u.screen_name, u.followers ORDER BY u.followers ASC LIMIT 3",
        "gql": "MATCH (u:User) RETURN u.screen_name, u.followers ORDER BY u.followers ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization {name: \"Accenture\"})<-[:MENTIONS]-(a:Article) RETURN a ORDER BY a.date DESC LIMIT 3",
        "gql": "MATCH (o:Organization{name:\"Accenture\"})<-[:MENTIONS]-(a:Article) RETURN a ORDER BY a.`date` DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Airport)<-[:LANDS_AT]-(b:Flight)-[:OPERATED_BY]->(c:OperateCompany) RETURN a.id, COUNT(*)",
        "gql": "MATCH (a:Airport)<-[:LANDS_AT]-(b:Flight)-[:OPERATED_BY]->(c:OperateCompany) RETURN a.id, COUNT(*)"
    },
    {
        "cypher": "MATCH (s:Stream)-[:MODERATOR]->(m) WITH s, size(collect(m)) AS moderatorCount MATCH (s)-[:PLAYS]->(g:Game) WITH g.name AS gameName, sum(moderatorCount) AS totalModeratorCount ORDER BY totalModeratorCount DESC LIMIT 3 RETURN gameName, totalModeratorCount",
        "gql": "MATCH (s:Stream)-[:MODERATOR]->(m) MATCH (s)-[:PLAYS]->(g:Game) RETURN s, size(m) AS moderatorCount NEXT RETURN gameName, totalModeratorCount"
    },
    {
        "cypher": "MATCH (a:Actor) RETURN a.Duration ORDER BY a.age DESC LIMIT 1",
        "gql": "MATCH (a:Actor) RETURN a.`Duration` ORDER BY a.age DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag) WHERE q.score < 0 RETURN t.name, count(q) AS usage ORDER BY usage DESC LIMIT 5",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag) WHERE q.score < 0 RETURN t.name, count(q) AS usage ORDER BY usage DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1PageRank IS NOT NULL RETURN c.name, c.book1PageRank ORDER BY c.book1PageRank DESC LIMIT 5",
        "gql": "MATCH (c:Character) WHERE c.book1PageRank IS NOT NULL RETURN c.name, c.book1PageRank ORDER BY c.book1PageRank DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.beneficiary_bank_country = 'United States' WITH e, count(f) AS filingsCount ORDER BY filingsCount DESC RETURN e, filingsCount",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.beneficiary_bank_country = 'United States' RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC NEXT RETURN e, filingsCount"
    },
    {
        "cypher": "MATCH (j:Journal)-[:EDited_BY]->(e:Editor) RETURN e.Name, j.Theme",
        "gql": "MATCH (j:Journal)-[:EDited_BY]->(e:Editor) RETURN e.Name, j.Theme"
    },
    {
        "cypher": "MATCH (s:Stadium) RETURN s.Country AS country, count(*)",
        "gql": "MATCH (s:Stadium) RETURN s.Country AS country, count(*)"
    },
    {
        "cypher": "MATCH (p:Person)-[r:CREW_FOR]->(m:Movie) WHERE r.job = 'Director' WITH p, count(m) AS films_directed ORDER BY films_directed DESC LIMIT 5 RETURN p.name AS Director, films_directed",
        "gql": "MATCH (p:Person)-[r:CREW_FOR]->(m:Movie) WHERE r.job = 'Director' RETURN p, count(m) AS films_directed ORDER BY films_directed DESC LIMIT 5 NEXT RETURN p.name AS Director, films_directed"
    },
    {
        "cypher": "MATCH (c:Candidate) RETURN c.Poll_Source ORDER BY c.Oppose_rate DESC LIMIT 1",
        "gql": "MATCH (c:Candidate) RETURN c.Poll_Source ORDER BY c.Oppose_rate DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (e:Entity {internal_id: '1001263'}) RETURN e.struck_off_date",
        "gql": "MATCH (e:Entity {internal_id: '1001263'}) RETURN e.struck_off_date"
    },
    {
        "cypher": "MATCH (c1:Character {community: 578}), (c2:Character {community: 579}) WHERE c1.name = c2.name RETURN c1.name AS CharacterName LIMIT 5",
        "gql": "MATCH (c1:Character {community: 578}), (c2:Character {community: 579}) WHERE c1.name = c2.name RETURN c1.name AS CharacterName LIMIT 5"
    },
    {
        "cypher": "MATCH (d:Department) WHERE d.Building = \"Mergenthaler\" RETURN d.DName",
        "gql": "MATCH (d:Department) WHERE d.Building = \"Mergenthaler\" RETURN d.DName"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(:Team) WHERE s.followers > 10000 RETURN s.name, s.followers ORDER BY s.followers DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:HAS_TEAM]->(:Team) WHERE s.followers > 10000 RETURN s.name, s.followers ORDER BY s.followers DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WITH s, COUNT(DISTINCT g) AS uniqueGames ORDER BY uniqueGames DESC LIMIT 3 RETURN s.name AS streamName, uniqueGames",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN s, COUNT(g) AS uniqueGames ORDER BY uniqueGames DESC LIMIT 3 NEXT RETURN s.name AS streamName, uniqueGames"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN]->(m) WHERE n.title='A New Cohomology Theory for Orbifold' RETURN m.name",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN]->(m) WHERE n.title='A New Cohomology Theory for Orbifold' RETURN m.name"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answer_count > 1 RETURN q.title, q.link, q.creation_date ORDER BY q.creation_date DESC LIMIT 5",
        "gql": "MATCH (q:Question) WHERE q.answer_count > 1 RETURN q.title, q.link, q.creation_date ORDER BY q.creation_date DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Station) WHERE s.Location <> 'London' RETURN s.Name, s.Total_Passengers",
        "gql": "MATCH (s:Station) WHERE s.Location <> 'London' RETURN s.Name, s.Total_Passengers"
    },
    {
        "cypher": "MATCH (t:Technician) RETURN t.Team, t.Starting_Year",
        "gql": "MATCH (t:Technician) RETURN t.Team, t.Starting_Year"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})<-[:MENTIONS]-(t:Tweet) WHERE t.favorites > 100 RETURN t.text, t.favorites, t.created_at ORDER BY t.favorites DESC LIMIT 3",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})<-[:MENTIONS]-(t:Tweet) WHERE t.favorites > 100 RETURN t.text, t.favorites, t.created_at ORDER BY t.favorites DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:PRODUCED]-(p) RETURN m.title AS MovieTitle LIMIT 3",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:PRODUCED]-(p) RETURN m.title AS MovieTitle LIMIT 3"
    },
    {
        "cypher": "MATCH (c1:Character)-[i:INTERACTS45]->(c2:Character) RETURN c1.name, c2.name, i.weight AS weight ORDER BY i.weight DESC LIMIT 3",
        "gql": "MATCH (c1:Character)-[i:INTERACTS45]->(c2:Character) RETURN c1.name, c2.name, i.weight AS weight ORDER BY i.weight DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (g:Gymnast) RETURN g.Total_Points ORDER BY g.Floor_Exercise_Points DESC",
        "gql": "MATCH (g:Gymnast) RETURN g.Total_Points ORDER BY g.Floor_Exercise_Points DESC"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.degree < 5 AND c.degree > 0 RETURN c",
        "gql": "MATCH (c:Character) WHERE c.degree < 5 AND c.degree > 0 RETURN c"
    },
    {
        "cypher": "MATCH (a:Journal{journal_id:'e7b0a9b48142710ab6e87f136f6b7606'})-[*]->(d:Categories{specifications:'cs.CC'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Journal{journal_id:'e7b0a9b48142710ab6e87f136f6b7606'})-[]->{1,}(d:Categories{specifications:'cs.CC'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH p=(a:Keyword{key_id:'6ded85146e3dbfb1bb866831b8948f5b'})-[*]->(d:Journal{journal_id:'6dc95119d8a737d9ffc7fe367159849b'}) RETURN count(p)",
        "gql": "MATCH (a:Keyword{key_id:'6ded85146e3dbfb1bb866831b8948f5b'})-[]->{1,}(d:Journal{journal_id:'6dc95119d8a737d9ffc7fe367159849b'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (p:Person) RETURN avg(p.Weight), min(p.Weight), p.Sex",
        "gql": "MATCH (p:Person) RETURN avg(p.Weight), min(p.Weight), p.Sex"
    },
    {
        "cypher": "MATCH (p:Person) WITH count(DISTINCT p.Hometown) as hometowns RETURN hometowns",
        "gql": "MATCH (p:Person) RETURN count(p.Hometown) AS hometowns NEXT RETURN hometowns"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.last_name = 'Leoni' OR n.author_id IS NOT NULL RETURN DISTINCT n.author_id AS author_id",
        "gql": "MATCH (n:Author) WHERE n.last_name = 'Leoni' OR n.author_id IS NOT NULL RETURN DISTINCT n.author_id AS author_id"
    },
    {
        "cypher": "MATCH p=(a:Author{first_name:'Bernhard'})-[*]->(d:Categories{category_id:'4b7053a7def1fb0250a0e83ebd2f9a7b'}) RETURN count(p)",
        "gql": "MATCH (a:Author{first_name:'Bernhard'})-[]->{1,}(d:Categories{category_id:'4b7053a7def1fb0250a0e83ebd2f9a7b'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (u:User)-[:FOLLOWS]->(:User {name: 'Bob'}) RETURN u.name AS name",
        "gql": "MATCH (u:User)-[:FOLLOWS]->(:User {name: 'Bob'}) RETURN u.name AS name"
    },
    {
        "cypher": "MATCH (c:Character {name: 'Ryman-Frey'}) RETURN c.centrality",
        "gql": "MATCH (c:Character {name: 'Ryman-Frey'}) RETURN c.centrality"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name, c.pagerank ORDER BY c.pagerank LIMIT 1",
        "gql": "MATCH (c:Character) RETURN c.name, c.pagerank ORDER BY c.pagerank LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1056 OR n.article_id < 1013 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1056 OR n.article_id < 1013 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (u:User) WHERE u.followers > 10000 MATCH (u)-[:VIP]->(s:Stream) WITH avg(s.total_view_count) AS average_view_count RETURN average_view_count",
        "gql": "MATCH (u:User) WHERE u.followers > 10000 MATCH (u)-[:VIP]->(s:Stream) RETURN avg(s.total_view_count) AS average_view_count NEXT RETURN average_view_count"
    },
    {
        "cypher": "MATCH (s:Storm)-[r:AFFECTS]->(n:Region) RETURN count(DISTINCT n.Region_id)",
        "gql": "MATCH (s:Storm)-[r:AFFECTS]->(n:Region) RETURN count(DISTINCT n.Region_id)"
    },
    {
        "cypher": "MATCH (n:Author) MATCH (m:Author) RETURN n.last_name, m.author_id LIMIT 8",
        "gql": "MATCH (n:Author) MATCH (m:Author) RETURN n.last_name, m.author_id LIMIT 8"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, q ORDER BY u.reputation DESC LIMIT 1",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, q ORDER BY u.reputation DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget IS NOT NULL RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.budget IS NOT NULL RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WITH s, COUNT(l) AS languageCount ORDER BY languageCount DESC LIMIT 5 RETURN s.name AS streamName, languageCount",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN s, COUNT(l) AS languageCount ORDER BY languageCount DESC LIMIT 5 NEXT RETURN s.name AS streamName, languageCount"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.last_name <> 'Chakrabarti' RETURN DISTINCT n.author_id AS author_id",
        "gql": "MATCH (n:Author) WHERE n.last_name <> 'Chakrabarti' RETURN DISTINCT n.author_id AS author_id"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.former_name IS NOT NULL RETURN e.former_name AS FormerName, e.name AS CurrentName",
        "gql": "MATCH (e:Entity) WHERE e.former_name IS NOT NULL RETURN e.former_name AS FormerName, e.name AS CurrentName"
    },
    {
        "cypher": "MATCH (c:Course) RETURN count(c)",
        "gql": "MATCH (c:Course) RETURN count(c)"
    },
    {
        "cypher": "MATCH (:Order)-[o:ORDERS]->(p:Product) RETURN p.productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 3",
        "gql": "MATCH (:`Order`)-[o:ORDERS]->(p:`Product`) RETURN p.productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream {name: \"maximilian_dood\"}) MATCH (s)-[:MODERATOR]->(u:User) RETURN count(DISTINCT u) AS total_moderators",
        "gql": "MATCH (s:Stream {name: \"maximilian_dood\"}) MATCH (s)-[:MODERATOR]->(u:User) RETURN count(DISTINCT u) AS total_moderators"
    },
    {
        "cypher": "MATCH (c1:Character)-[:INTERACTS]-(c2:Character) WHERE c1.community = c2.community RETURN c1.name AS Character1, c2.name AS Character2, c1.community AS SharedCommunity",
        "gql": "MATCH (c1:Character)-[:INTERACTS]-(c2:Character) WHERE c1.community = c2.community RETURN c1.name AS Character1, c2.name AS Character2, c1.community AS SharedCommunity"
    },
    {
        "cypher": "MATCH (a:Address) WHERE a.jurisdiction_description = 'Samoa' WITH DISTINCT a MATCH (e:Entity)-[:registered_address]->(a) RETURN count(DISTINCT e)",
        "gql": "MATCH (a:Address) WHERE a.jurisdiction_description = 'Samoa' RETURN DISTINCT a NEXT MATCH (e:Entity)-[:registered_address]->(a) RETURN count(e)"
    },
    {
        "cypher": "MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b",
        "gql": "MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(ci:City) WHERE a.sentiment < 0.5 RETURN DISTINCT o.name",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(ci:City) WHERE a.sentiment < 0.5 RETURN DISTINCT o.name"
    },
    {
        "cypher": "MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: \"Electronic Products Manufacturers\"}) MATCH (org)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS CEOName, org.name AS OrganizationName",
        "gql": "MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: \"Electronic Products Manufacturers\"}) MATCH (org)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS CEOName, org.name AS OrganizationName"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing) WITH e, count(f) AS filings_count ORDER BY filings_count DESC LIMIT 3 RETURN e.name AS BankName, filings_count",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing) RETURN e, count(f) AS filings_count ORDER BY filings_count DESC LIMIT 3 NEXT RETURN e.name AS BankName, filings_count"
    },
    {
        "cypher": "MATCH (teacher:teacher) WHERE teacher.Hometown <> 'little lever urban district' RETURN teacher.Name",
        "gql": "MATCH (teacher:teacher) WHERE teacher.Hometown <> 'little lever urban district' RETURN teacher.Name"
    },
    {
        "cypher": "MATCH (n:Report) MATCH (m:Topic) RETURN n.report_id, m.description LIMIT 8",
        "gql": "MATCH (n:Report) MATCH (m:Topic) RETURN n.report_id, m.description LIMIT 8"
    },
    {
        "cypher": "MATCH (m:Machine)-[:TYPE]->(t:Type) RETURN t.type AS MachineType, t.cpu AS CPUPower ORDER BY t.cpu DESC LIMIT 5",
        "gql": "MATCH (m:Machine)-[:TYPE]->(t:Type) RETURN t.type AS MachineType, t.cpu AS CPUPower ORDER BY t.cpu DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Categories{category_id:'eea477d68b70c3a05be12567240033ef'})-[*]->(d:Author{first_name:'S. O.'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Categories{category_id:'eea477d68b70c3a05be12567240033ef'})-[]->{1,}(d:Author{first_name:'S. O.'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician) MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T2:Machine) RETURN T3.Name ORDER BY T2.quality_rank",
        "gql": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician) MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T2:Machine) RETURN T3.Name ORDER BY T2.quality_rank"
    },
    {
        "cypher": "MATCH (a:Airport) RETURN a.Country, count(*) as country",
        "gql": "MATCH (a:Airport) RETURN a.Country, count(*) as country"
    },
    {
        "cypher": "MATCH (b:Branch) RETURN b.Name, b.Address_road, b.City ORDER BY b.Open_year",
        "gql": "MATCH (b:Branch) RETURN b.Name, b.Address_road, b.City ORDER BY b.Open_year"
    },
    {
        "cypher": "MATCH (s1:Stream)-[:PLAYS]->(:Game {name: \"Rust\"}) WITH s1 MATCH (s1)<-[:CHATTER]-(u:User)-[:CHATTER]->(s2:Stream) WITH DISTINCT s2 ORDER BY s2.total_view_count DESC LIMIT 5 RETURN s2",
        "gql": "MATCH (s1:Stream)-[:PLAYS]->(:Game{name:\"Rust\"}) MATCH (s1)<-[:CHATTER]-(u:User)-[:CHATTER]->(s2:Stream) RETURN s1 NEXT RETURN s2"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'}) RETURN s.companyName",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Dairy Products'}) RETURN s.companyName"
    },
    {
        "cypher": "MATCH (a:Categories{category_id:'994d468c3f0dd780baf58c6d7f205afd'})-[*]->(d:Categories{specifications:'math.AT'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Categories{category_id:'994d468c3f0dd780baf58c6d7f205afd'})-[]->{1,}(d:Categories{specifications:'math.AT'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product) RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 5",
        "gql": "MATCH (s:Supplier{companyName:'Exotic Liquids'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 5"
    },
    {
        "cypher": "MATCH p=(a:Report{report_id:'45009bf7f2e3f4f275de6d92deab7b27'})-[*]->(d:Report{report_no:'JNMP 4/2002 (Letter)'}) RETURN count(p)",
        "gql": "MATCH (a:Report{report_id:'45009bf7f2e3f4f275de6d92deab7b27'})-[]->{1,}(d:Report{report_no:'JNMP 4/2002 (Letter)'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag) WHERE q.score = 0 RETURN DISTINCT t.name AS tag",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag) WHERE q.score = 0 RETURN DISTINCT t.name AS tag"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Laurence Fishburne\"})-[:PRODUCED]->(m:Movie) WHERE m.released >= 2001 RETURN m ORDER BY m.released ASC LIMIT 3",
        "gql": "MATCH (p:Person {name: \"Laurence Fishburne\"})-[:PRODUCED]->(m:Movie) WHERE m.released >= 2001 RETURN m ORDER BY m.released ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {year : '2001'}]->(m) WHERE n.comments='31 pages, LaTex' RETURN m.journal_id",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2001'}]->(m) WHERE n.comments = '31 pages, LaTex' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (d:District) WHERE d.City_Population >= 200000 AND d.City_Population <= 2000000 RETURN d.District_name, d.City_Population",
        "gql": "MATCH (d:District) WHERE d.City_Population >= 200000 AND d.City_Population <= 2000000 RETURN d.District_name, d.City_Population"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1052 OR n.article_id < 1008 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1052 OR n.article_id < 1008 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (s:Station) RETURN s.Name, s.Location, s.Number_of_Platforms",
        "gql": "MATCH (s:Station) RETURN s.Name, s.Location, s.Number_of_Platforms"
    },
    {
        "cypher": "MATCH (p:Procedure) RETURN max(p.Cost), min(p.Cost), avg(p.Cost)",
        "gql": "MATCH (p:`Procedure`) RETURN max(p.Cost), min(p.Cost), avg(p.Cost)"
    },
    {
        "cypher": "MATCH (b:Business {address: '200 W Pine St'})<-[:REVIEWS]-(r:Review) RETURN r ORDER BY r.stars DESC LIMIT 3",
        "gql": "MATCH (b:Business {address: '200 W Pine St'})<-[:REVIEWS]-(r:Review) RETURN r ORDER BY r.stars DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Storm) WHERE NOT EXISTS((s)-[:AFFECTS]->(:Region)) RETURN s.Name",
        "gql": "MATCH (s:Storm) WHERE NOT EXISTS((s)-[:AFFECTS]->(:Region)) RETURN s.Name"
    },
    {
        "cypher": "MATCH (e:Entity {jurisdiction: 'SAM'}) RETURN DISTINCT e.service_provider",
        "gql": "MATCH (e:Entity {jurisdiction: 'SAM'}) RETURN DISTINCT e.service_provider"
    },
    {
        "cypher": "MATCH (n:Report), (:Report {report_no: 'SFB 478 Geometrische Stukturen in der Mathematik, Muenster; Preprint   No. 73'}) WHERE NOT (n) --> (:Report) RETURN n.report_no",
        "gql": "MATCH (n:Report), (:Report {report_no: 'SFB 478 Geometrische Stukturen in der Mathematik, Muenster; Preprint   No. 73'}) WHERE NOT (n) --> (:Report) RETURN n.report_no"
    },
    {
        "cypher": "MATCH (n:Author), (:Author {author_id: '788db042978edbbfc654927e23ac21d1'}) WHERE NOT (n) --> (:Author) RETURN n.author_id",
        "gql": "MATCH (n:Author), (:Author {author_id: '788db042978edbbfc654927e23ac21d1'}) WHERE NOT (n) --> (:Author) RETURN n.author_id"
    },
    {
        "cypher": "MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-() WITH p, avg(r.rating) AS average_rating RETURN p.name, average_rating ORDER BY average_rating DESC LIMIT 1",
        "gql": "MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-() RETURN p, avg(r.rating) AS average_rating NEXT RETURN p.name, average_rating ORDER BY average_rating DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Article{abstract:'  We present a new, more elementary proof of the Freedman-Teichner result that the geometric classification techniques (surgery, s-cobordism, and pseudoisotopy) hold for topological 4-manifolds with groups of subexponential growth. In an appendix Freedman and Teichner give a correction to their original proof, and reformulate the growth estimates in terms of coarse geometry. '})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Article{`abstract`:'  We present a new, more elementary proof of the Freedman-Teichner result that the geometric classification techniques (surgery, s-cobordism, and pseudoisotopy) hold for topological 4-manifolds with groups of subexponential growth. In an appendix Freedman and Teichner give a correction to their original proof, and reformulate the growth estimates in terms of coarse geometry. '})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (r:Review)-[:REVIEWS]->(b:Business) WHERE r.stars < 4.0 RETURN r.reviewId AS reviewId, r.text AS reviewText, r.stars AS rating, b.name AS businessName",
        "gql": "MATCH (r:Review)-[:REVIEWS]->(b:Business) WHERE r.stars < 4.0 RETURN r.reviewId AS reviewId, r.text AS reviewText, r.stars AS rating, b.name AS businessName"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:MENTIONS]->(:User {screen_name: 'neo4j'})-[:POSTS]->(tweet)-[:TAGS]->(h:Hashtag) RETURN DISTINCT h.name",
        "gql": "MATCH (t:Tweet)-[:MENTIONS]->(:User {screen_name: 'neo4j'})-[:POSTS]->(tweet)-[:TAGS]->(h:Hashtag) RETURN DISTINCT h.name"
    },
    {
        "cypher": "MATCH (dogs:Dogs) RETURN max(dogs.age)",
        "gql": "MATCH (dogs:Dogs) RETURN max(dogs.age)"
    },
    {
        "cypher": "MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) WITH e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 3 MATCH (e)-[:COUNTRY]->(c:Country) RETURN c.name AS CountryName, count(e) AS NumberOfEntities ORDER BY NumberOfEntities DESC",
        "gql": "MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 3 NEXT MATCH (e)-[:COUNTRY]->(c:Country) RETURN c.name AS CountryName, count(e) AS NumberOfEntities ORDER BY NumberOfEntities DESC"
    },
    {
        "cypher": "MATCH (p:Person)-[:REVIEWED {summary: 'Silly, but fun'}]->(m:Movie) WITH p, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 1 RETURN p.name AS personName, movieCount",
        "gql": "MATCH (p:Person)-[:REVIEWED{summary:'Silly, but fun'}]->(m:Movie) RETURN p, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 1 NEXT RETURN p.name AS personName, movieCount"
    },
    {
        "cypher": "MATCH (p:Procedure) RETURN p.Name ORDER BY p.Cost LIMIT 3",
        "gql": "MATCH (p:`Procedure`) RETURN p.Name ORDER BY p.Cost LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(:City {name: 'Rome'}) MATCH (o)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN c.name AS category LIMIT 3",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(:City {name: 'Rome'}) MATCH (o)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN c.name AS category LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Category) RETURN c.categoryName, c.description LIMIT 3",
        "gql": "MATCH (c:Category) RETURN c.categoryName, c.description LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.tagline IS NOT NULL RETURN m.tagline AS Tagline, count(m) AS Frequency ORDER BY Frequency DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.tagline IS NOT NULL RETURN m.tagline AS Tagline, count(m) AS Frequency ORDER BY Frequency DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person {summary: \"CEO at Accenture\"})<-[:HAS_CEO]-(o:Organization) RETURN o.name",
        "gql": "MATCH (p:Person {summary: \"CEO at Accenture\"})<-[:HAS_CEO]-(o:Organization) RETURN o.name"
    },
    {
        "cypher": "MATCH (a:Article{article_id:'1069'})-[*]->(d:DOI{name:'10.1007/PL00005532'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Article{article_id:'1069'})-[]->{1,}(d:DOI{name:'10.1007/PL00005532'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WHERE s.country = 'UK' RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 3",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) WHERE s.country = 'UK' RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t1:Tag {name: 'apollo'}) WHERE q.score = 0 MATCH (q)-[:TAGGED]->(t2) RETURN DISTINCT t2.name AS tag",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t1:Tag {name: 'apollo'}) WHERE q.score = 0 MATCH (q)-[:TAGGED]->(t2) RETURN DISTINCT t2.name AS tag"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack)-[:HOLDS]->(switch:Switch),       (rack)-[:HOLDS]->(machine:Machine)-[:TYPE]->(type:Type {name: 's-2/4/5'}) RETURN DISTINCT rack.name LIMIT 3",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack)-[:HOLDS]->(switch:Switch),       (rack)-[:HOLDS]->(machine:Machine)-[:TYPE]->(type:Type {name: 's-2/4/5'}) RETURN DISTINCT rack.name LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {year : '2001'}]->(m) WHERE n.abstract='  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. ' RETURN m.name",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2001'}]->(m) WHERE n.`abstract` = '  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. ' RETURN m.name"
    },
    {
        "cypher": "MATCH (n:Author), (:Author {affiliation: 'unspecified'}) WHERE NOT (n) --> (:Author) RETURN n.affiliation",
        "gql": "MATCH (n:Author), (:Author {affiliation: 'unspecified'}) WHERE NOT (n) --> (:Author) RETURN n.affiliation"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Publication) RETURN p.Publisher ORDER BY p.Price DESC LIMIT 1",
        "gql": "MATCH (p:Publication) RETURN p.Publisher ORDER BY p.Price DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '641-672' RETURN n.comments AS comments, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '641-672' RETURN n.comments AS comments, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answer_count > 2 RETURN q ORDER BY q.creation_date LIMIT 3",
        "gql": "MATCH (q:Question) WHERE q.answer_count > 2 RETURN q ORDER BY q.creation_date LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Publication) RETURN p.Publisher, COUNT(*)",
        "gql": "MATCH (p:Publication) RETURN p.Publisher, COUNT(*)"
    },
    {
        "cypher": "MATCH (p:Person)-[cf:CREW_FOR]->(m:Movie) WHERE cf.job = 'Director' WITH p, count(m) AS movieCount WHERE movieCount > 1 RETURN p.name, movieCount",
        "gql": "MATCH (p:Person)-[cf:CREW_FOR]->(m:Movie) WHERE cf.job = 'Director' RETURN p, count(m) AS movieCount NEXT RETURN p.name, movieCount"
    },
    {
        "cypher": "MATCH (a:Adult) WHERE a.budget < 50000 RETURN a.title LIMIT 3",
        "gql": "MATCH (a:Adult) WHERE a.budget < 50000 RETURN a.title LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question) WITH q ORDER BY q.view_count DESC LIMIT 1 MATCH (u:User)-[:ASKED]->(q) RETURN u.display_name",
        "gql": "MATCH (q:Question) RETURN q ORDER BY q.view_count DESC LIMIT 1 NEXT MATCH (u:User)-[:ASKED]->(q) RETURN u.display_name"
    },
    {
        "cypher": "MATCH (m:Movie {title: 'Toy Story'})- [r:CREW_FOR {job: 'Producer'}] - () RETURN r.department",
        "gql": "MATCH (m:Movie{title:'Toy Story'})-[r:CREW_FOR{job:'Producer'}]-() RETURN r.department"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(e:Egress) RETURN e.name AS EgressRouter",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(e:Egress) RETURN e.name AS EgressRouter"
    },
    {
        "cypher": "MATCH (f:Filing) WITH f ORDER BY f.amount ASC LIMIT 1 MATCH (e:Entity)-[:FILED]->(f) RETURN e",
        "gql": "MATCH (f:Filing) RETURN f ORDER BY f.amount ASC LIMIT 1 NEXT MATCH (e:Entity)-[:FILED]->(f) RETURN e"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title AS title, size(m.countries) AS countryCount ORDER BY countryCount DESC LIMIT 5",
        "gql": "MATCH (m:Movie) RETURN m.title AS title, size(m.countries) AS countryCount ORDER BY countryCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN p.name AS personName, m.title AS movieTitle",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN p.name AS personName, m.title AS movieTitle"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id <> '1006' RETURN DISTINCT n.comments AS comments",
        "gql": "MATCH (n:Article) WHERE n.article_id <> '1006' RETURN DISTINCT n.comments AS comments"
    },
    {
        "cypher": "MATCH (b:Business)-[:REVIEWS]-(r:Review) WITH b, avg(r.stars) AS averageRating WHERE averageRating >= 4 AND averageRating <= 4.5 RETURN b.name AS businessName, averageRating",
        "gql": "MATCH (b:Business)-[:REVIEWS]-(r:Review) RETURN b, avg(r.stars) AS averageRating NEXT RETURN b.name AS businessName, averageRating"
    },
    {
        "cypher": "MATCH (q:Question {title: 'Neo4j- APOC trigger fires without any reason'}) MATCH (u:User)-[:COMMENTED]->(:Comment)-[:COMMENTED_ON]->(q) RETURN count(DISTINCT u) AS NumberOfCommentingUsers",
        "gql": "MATCH (q:Question {title: 'Neo4j- APOC trigger fires without any reason'}) MATCH (u:User)-[:COMMENTED]->(:Comment)-[:COMMENTED_ON]->(q) RETURN count(DISTINCT u) AS NumberOfCommentingUsers"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(tag1:Tag {name: 'graphql'}) MATCH (q)-[:TAGGED]->(tag2:Tag {name: 'apollo'}) RETURN count(DISTINCT q)",
        "gql": "MATCH (q:Question)-[:TAGGED]->(tag1:Tag {name: 'graphql'}) MATCH (q)-[:TAGGED]->(tag2:Tag {name: 'apollo'}) RETURN count(DISTINCT q)"
    },
    {
        "cypher": "MATCH (a:Answer) WHERE a.score < 0 RETURN a.link, a.title, a.body_markdown, a.score, a.uuid",
        "gql": "MATCH (a:Answer) WHERE a.score < 0 RETURN a.link, a.title, a.body_markdown, a.score, a.uuid"
    },
    {
        "cypher": "MATCH (c:Company) RETURN min(c.Market_Value), max(c.Market_Value), avg(c.Market_Value)",
        "gql": "MATCH (c:Company) RETURN min(c.Market_Value), max(c.Market_Value), avg(c.Market_Value)"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_INVESTOR]->(i:Person) WITH o, COUNT(i) AS investorCount WHERE investorCount > 1 RETURN o.name AS organizationName LIMIT 3",
        "gql": "MATCH (o:Organization)-[:HAS_INVESTOR]->(i:Person) RETURN o, COUNT(i) AS investorCount NEXT RETURN o.name AS organizationName LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Categories{category_id:'cb7bf6a30b0381c15264305ad7677b30'})-[*]->(d:Author{first_name:'Marco'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Categories{category_id:'cb7bf6a30b0381c15264305ad7677b30'})-[]->{1,}(d:Author{first_name:'Marco'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name AS character, c.book1PageRank AS pageRank ORDER BY pageRank DESC LIMIT 5",
        "gql": "MATCH (c:Character) RETURN c.name AS character, c.book1PageRank AS pageRank ORDER BY pageRank DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName, r.date AS reviewDate",
        "gql": "MATCH (u:User{name:'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName, r.`date` AS reviewDate"
    },
    {
        "cypher": "MATCH (f:Flight) RETURN f.Vehicle_Flight_number, f.Date, f.Pilot ORDER BY f.Altitude ASC",
        "gql": "MATCH (f:Flight) RETURN f.Vehicle_Flight_number, f.`Date`, f.Pilot ORDER BY f.Altitude ASC"
    },
    {
        "cypher": "MATCH (p:Person {name: 'Christopher Nolan'})-[:CREW_FOR {job: 'Director'}]->(m:Movie) RETURN m.title",
        "gql": "MATCH (p:Person {name: 'Christopher Nolan'})-[:CREW_FOR {job: 'Director'}]->(m:Movie) RETURN m.title"
    },
    {
        "cypher": "MATCH (cc:CatalogContent) WHERE cc.price_in_dollars > 700 RETURN cc.catalog_entry_name, cc.capacity",
        "gql": "MATCH (cc:CatalogContent) WHERE cc.price_in_dollars > 700 RETURN cc.catalog_entry_name, cc.capacity"
    },
    {
        "cypher": "MATCH (d:Department {Division: \"AS\"}) RETURN count(*)",
        "gql": "MATCH (d:Department {Division: \"AS\"}) RETURN count(*)"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1PageRank IS NOT NULL RETURN c.name AS character, c.book1PageRank AS pageRank ORDER BY pageRank LIMIT 5",
        "gql": "MATCH (c:Character) WHERE c.book1PageRank IS NOT NULL RETURN c.name AS character, c.book1PageRank AS pageRank ORDER BY pageRank LIMIT 5"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.struck_off_date IS NOT NULL RETURN e.country_codes",
        "gql": "MATCH (e:Entity) WHERE e.struck_off_date IS NOT NULL RETURN e.country_codes"
    },
    {
        "cypher": "MATCH (c:City) RETURN c.Status, avg(c.Population)",
        "gql": "MATCH (c:City) RETURN c.Status, avg(c.Population)"
    },
    {
        "cypher": "MATCH (students:Students) WHERE students.first_name = 'timmothy' AND students.last_name = 'ward' RETURN students.cell_mobile_number",
        "gql": "MATCH (students:Students) WHERE students.first_name = 'timmothy' AND students.last_name = 'ward' RETURN students.cell_mobile_number"
    },
    {
        "cypher": "MATCH p=(a:Article{abstract:'  We extend a result of to Esnault-Levine-Viehweg concerning the Chow groups of hypersurfaces in projective space to those in weighted projective spaces. '})-[*]->(d:Report{report_id:'c3c968646b7780fada2a98b2a5a61746'}) RETURN count(p)",
        "gql": "MATCH (a:Article{`abstract`:'  We extend a result of to Esnault-Levine-Viehweg concerning the Chow groups of hypersurfaces in projective space to those in weighted projective spaces. '})-[]->{1,}(d:Report{report_id:'c3c968646b7780fada2a98b2a5a61746'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review) RETURN r",
        "gql": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review) RETURN r"
    },
    {
        "cypher": "MATCH (a:Topic{label:'Topology_5'})-[*]->(d:Journal{journal_id:'fce69ad0112a3426c57a0582a2b8620f'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Topic{label:'Topology_5'})-[]->{1,}(d:Journal{journal_id:'fce69ad0112a3426c57a0582a2b8620f'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.votes IS NOT NULL RETURN m ORDER BY m.votes DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.votes IS NOT NULL RETURN m ORDER BY m.votes DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE r.date.year = 2016 RETURN b.name AS BusinessName, r.stars AS Stars, r.text AS ReviewText",
        "gql": "MATCH (u:User{name:'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE r.`date` = 2016 RETURN b.name AS BusinessName, r.stars AS Stars, r.text AS ReviewText"
    },
    {
        "cypher": "MATCH (p:Product) RETURN p.Product_Name, p.Product_Type_Code",
        "gql": "MATCH (p:`Product`) RETURN p.Product_Name, p.Product_Type_Code"
    },
    {
        "cypher": "MATCH (a:Actor) WHERE a.age <> 20 RETURN a.Name",
        "gql": "MATCH (a:Actor) WHERE a.age <> 20 RETURN a.Name"
    },
    {
        "cypher": "MATCH (me:Me)-[:AMPLIFIES]->(u:User) RETURN u.name, u.screen_name ORDER BY u.followers DESC LIMIT 3",
        "gql": "MATCH (me:Me)-[:AMPLIFIES]->(u:User) RETURN u.name, u.screen_name ORDER BY u.followers DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category) WITH s, count(DISTINCT c) AS categoryCount ORDER BY categoryCount DESC LIMIT 3 RETURN s.companyName, categoryCount",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN s, count(c) AS categoryCount ORDER BY categoryCount DESC LIMIT 3 NEXT RETURN s.companyName, categoryCount"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) WHERE s.total_view_count IS NOT NULL RETURN s ORDER BY s.total_view_count DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) WHERE s.total_view_count IS NOT NULL RETURN s ORDER BY s.total_view_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person), (org)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: \"USA\"}) RETURN ceo.name AS CEOName, org.name AS OrganizationName, org.revenue AS Revenue ORDER BY org.revenue DESC",
        "gql": "MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person), (org)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: \"USA\"}) RETURN ceo.name AS CEOName, org.name AS OrganizationName, org.revenue AS Revenue ORDER BY org.revenue DESC"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.revenue > 50000000 RETURN DISTINCT country.name AS Country",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.revenue > 50000000 RETURN DISTINCT country.name AS Country"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Comedy'}) MATCH (m)-[:PRODUCED_IN_COUNTRY]->(c:Country) WITH c, count(m) AS movie_count ORDER BY movie_count DESC RETURN c.name AS country_name, movie_count LIMIT 1",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Comedy'}) MATCH (m)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN c, count(m) AS movie_count ORDER BY movie_count DESC NEXT RETURN c.name AS country_name, movie_count LIMIT 1"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Produce'}) MATCH (o:Order)-[r:ORDERS]->(p) RETURN p.productName, COUNT(r) AS orderCount ORDER BY orderCount DESC LIMIT 5",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Produce'}) MATCH (o:`Order`)-[r:ORDERS]->(p) RETURN p.productName, COUNT(r) AS orderCount ORDER BY orderCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Author) RETURN a.fname, a.lname ORDER BY a.lname",
        "gql": "MATCH (a:Author) RETURN a.fname, a.lname ORDER BY a.lname"
    },
    {
        "cypher": "MATCH (T1:Storm)-[:AFFECTS]->(T2:Region) WHERE T1.Number_Deaths IS NOT NULL RETURN T2.Region_name ORDER BY T1.Number_Deaths DESC LIMIT 1",
        "gql": "MATCH (T1:Storm)-[:AFFECTS]->(T2:Region) WHERE T1.Number_Deaths IS NOT NULL RETURN T2.Region_name ORDER BY T1.Number_Deaths DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Student) RETURN s.Fname ORDER BY s.Age DESC",
        "gql": "MATCH (s:Student) RETURN s.Fname ORDER BY s.Age DESC"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 3})-[:HOLDS]->(m:Machine)-[:RUNS]->(app:Application) RETURN DISTINCT app.name AS ApplicationType",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 3})-[:HOLDS]->(m:Machine)-[:RUNS]->(app:Application) RETURN DISTINCT app.name AS ApplicationType"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN s.name AS stream, s.total_view_count AS views ORDER BY views DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN s.name AS stream, s.total_view_count AS views ORDER BY views DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet) RETURN tweet.text, tweet.favorites ORDER BY tweet.favorites DESC LIMIT 5",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet) RETURN tweet.text, tweet.favorites ORDER BY tweet.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'}) MATCH (t)-[:CONTAINS]->(l:Link) RETURN t.text AS tweet_text, t.created_at AS created_at, l.url AS link_url ORDER BY t.created_at DESC LIMIT 3",
        "gql": "MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'}) MATCH (t)-[:CONTAINS]->(l:Link) RETURN t.text AS tweet_text, t.created_at AS created_at, l.url AS link_url ORDER BY t.created_at DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount < 100 WITH e, count(f) AS benefitCount ORDER BY benefitCount DESC RETURN e.name, benefitCount LIMIT 3",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount < 100 RETURN e, count(f) AS benefitCount ORDER BY benefitCount DESC NEXT RETURN e.name, benefitCount LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: \"Julie Spellman Sweet\"}), (o)-[:IN_CITY]->(c:City {name: \"Seattle\"}) RETURN o LIMIT 3",
        "gql": "MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: \"Julie Spellman Sweet\"}), (o)-[:IN_CITY]->(c:City {name: \"Seattle\"}) RETURN o LIMIT 3"
    },
    {
        "cypher": "MATCH (singer:singer) WHERE singer.age > 20 RETURN DISTINCT singer.country",
        "gql": "MATCH (singer:singer) WHERE singer.age > 20 RETURN DISTINCT singer.country"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.runtime > 120 RETURN g.name AS Genre, count(m) AS MovieCount ORDER BY MovieCount DESC",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.runtime > 120 RETURN g.name AS Genre, count(m) AS MovieCount ORDER BY MovieCount DESC"
    },
    {
        "cypher": "MATCH (o:Order) WITH o ORDER BY o.orderDate DESC LIMIT 3 RETURN o.orderID, o.orderDate, o.customerID, o.shipName, o.shipCity, o.shipCountry",
        "gql": "MATCH (o:`Order`) RETURN o ORDER BY o.orderDate DESC LIMIT 3 NEXT RETURN o.orderID, o.orderDate, o.customerID, o.shipName, o.shipCity, o.shipCountry"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization) WITH o, COUNT(s) AS numSubsidiaries ORDER BY numSubsidiaries DESC LIMIT 1 RETURN o.name AS organizationName, numSubsidiaries",
        "gql": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization) RETURN o, COUNT(s) AS numSubsidiaries ORDER BY numSubsidiaries DESC LIMIT 1 NEXT RETURN o.name AS organizationName, numSubsidiaries"
    },
    {
        "cypher": "MATCH (c:City)<-[:TAKES_PLACE_IN]-(fc:Farm_competition) WITH c, COUNT(fc) AS count WHERE count > 1 RETURN c.Official_Name",
        "gql": "MATCH (c:City)<-[:TAKES_PLACE_IN]-(fc:Farm_competition) RETURN c, COUNT(fc) AS `count` NEXT RETURN c.Official_Name"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = \"ru\" WITH avg(s.followers) AS average_followers RETURN average_followers",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = \"ru\" RETURN avg(s.followers) AS average_followers NEXT RETURN average_followers"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(:Genre {name: 'Comedy'}) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(:Genre {name: 'Comedy'}) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (d:Director) WHERE d.born < date('1950-01-01') RETURN d ORDER BY d.born LIMIT 3",
        "gql": "MATCH (d:Director) WHERE d.born < date('1950-01-01') RETURN d ORDER BY d.born LIMIT 3"
    },
    {
        "cypher": "MATCH (u1:User)-[r1:RATED]->(m:Movie)<-[r2:RATED]-(u2:User) WHERE u1 <> u2 AND r1.rating <> r2.rating RETURN u1, u2, m",
        "gql": "MATCH (u1:User)-[r1:RATED]->(m:Movie)<-[r2:RATED]-(u2:User) WHERE u1 <> u2 AND r1.rating <> r2.rating RETURN u1, u2, m"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WITH c, count(o) AS orgCount ORDER BY orgCount DESC RETURN c.name, orgCount LIMIT 1",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City) RETURN c, count(o) AS orgCount ORDER BY orgCount DESC NEXT RETURN c.name, orgCount LIMIT 1"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 100000 RETURN q ORDER BY q.createdAt ASC LIMIT 3",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 100000 RETURN q ORDER BY q.createdAt ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.status = 'Defaulted' RETURN e LIMIT 5",
        "gql": "MATCH (e:Entity) WHERE e.status = 'Defaulted' RETURN e LIMIT 5"
    },
    {
        "cypher": "MATCH (prodCompany:ProductionCompany {name: 'Pixar Animation Studios'}) MATCH (prodCompany)-[:PRODUCED_BY]->(movie:Movie) WITH avg(movie.budget) AS averageBudget RETURN averageBudget",
        "gql": "MATCH (prodCompany:ProductionCompany{name:'Pixar Animation Studios'}) MATCH (prodCompany)-[:PRODUCED_BY]->(movie:Movie) RETURN avg(movie.budget) AS averageBudget NEXT RETURN averageBudget"
    },
    {
        "cypher": "MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version) RETURN v.name",
        "gql": "MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version) RETURN v.name"
    },
    {
        "cypher": "MATCH (b:Building) WHERE b.Status = \"on-hold\" RETURN b.name ORDER BY b.Stories ASC",
        "gql": "MATCH (b:Building) WHERE b.Status = \"on-hold\" RETURN b.name ORDER BY b.Stories ASC"
    },
    {
        "cypher": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WHERE m.average_vote < 4 RETURN l.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WHERE m.average_vote < 4 RETURN l.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (l:List) WHERE l.Grade = 5 RETURN DISTINCT l.Classroom",
        "gql": "MATCH (l:`List`) WHERE l.Grade = 5 RETURN DISTINCT l.Classroom"
    },
    {
        "cypher": "MATCH (n:Categories) WHERE n.category_id = 'cb7bf6a30b0381c15264305ad7677b30' RETURN n",
        "gql": "MATCH (n:Categories) WHERE n.category_id = 'cb7bf6a30b0381c15264305ad7677b30' RETURN n"
    },
    {
        "cypher": "MATCH (s:Stream)-[:MODERATOR]->(u:User) WITH s, COUNT(DISTINCT u) AS moderator_count RETURN s.name AS stream_name, moderator_count ORDER BY moderator_count DESC LIMIT 10",
        "gql": "MATCH (s:Stream)-[:MODERATOR]->(u:User) RETURN s, COUNT(u) AS moderator_count NEXT RETURN s.name AS stream_name, moderator_count ORDER BY moderator_count DESC LIMIT 10"
    },
    {
        "cypher": "MATCH (a:Address) WHERE a.zip_postcode = \"197\" RETURN count(a)",
        "gql": "MATCH (a:Address) WHERE a.zip_postcode = \"197\" RETURN count(a)"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'}) WHERE q.createdAt >= '2018-01-01T00:00:00Z' AND q.createdAt <= '2018-12-31T23:59:59Z' RETURN q",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'}) WHERE q.createdAt >= '2018-01-01T00:00:00Z' AND q.createdAt <= '2018-12-31T23:59:59Z' RETURN q"
    },
    {
        "cypher": "MATCH (c:Character {name: 'Jaime-Lannister'}) RETURN c.fastrf_embedding",
        "gql": "MATCH (c:Character {name: 'Jaime-Lannister'}) RETURN c.fastrf_embedding"
    },
    {
        "cypher": "MATCH (p:Product)-[o:ORDERS]->(:Order) WITH p, AVG(toFloat(o.discount)) AS avgDiscount ORDER BY avgDiscount DESC LIMIT 3 RETURN p.productName, avgDiscount",
        "gql": "MATCH (p:`Product`)-[o:ORDERS]->(:`Order`) RETURN p, AVG(o.discount) AS avgDiscount ORDER BY avgDiscount DESC LIMIT 3 NEXT RETURN p.productName, avgDiscount"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WITH s, COUNT(DISTINCT g) AS distinctGames ORDER BY distinctGames DESC LIMIT 5 RETURN s.name AS streamName, distinctGames",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN s, COUNT(g) AS distinctGames ORDER BY distinctGames DESC LIMIT 5 NEXT RETURN s.name AS streamName, distinctGames"
    },
    {
        "cypher": "MATCH (r:Resident) RETURN COUNT(r) AS number_of_residents",
        "gql": "MATCH (r:Resident) RETURN COUNT(r) AS number_of_residents"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank = 'CIMB Bank Berhad' RETURN e LIMIT 3",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank = 'CIMB Bank Berhad' RETURN e LIMIT 3"
    },
    {
        "cypher": "MATCH (g:Genre {name: 'Adventure'}) MATCH (g)<-[:IN_GENRE]-(m:Movie) WITH avg(m.imdbRating) AS averageRating RETURN averageRating",
        "gql": "MATCH (g:Genre{name:'Adventure'}) MATCH (g)<-[:IN_GENRE]-(m:Movie) RETURN avg(m.imdbRating) AS averageRating NEXT RETURN averageRating"
    },
    {
        "cypher": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) WHERE p.born > 1960 RETURN m LIMIT 5",
        "gql": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) WHERE p.born > 1960 RETURN m LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.runtime IS NOT NULL RETURN m.title, m.runtime ORDER BY m.runtime LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.runtime IS NOT NULL RETURN m.title, m.runtime ORDER BY m.runtime LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Journal) MATCH (m:Author) RETURN n.journal_id, m.author_id LIMIT 8",
        "gql": "MATCH (n:Journal) MATCH (m:Author) RETURN n.journal_id, m.author_id LIMIT 8"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-js'}) WHERE u.reputation < 5000 RETURN u",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-js'}) WHERE u.reputation < 5000 RETURN u"
    },
    {
        "cypher": "MATCH (n:Categories) WHERE n.category_id = '775271e2a118257e7308fe4c21c9d0b4' OR n.category_id IS NOT NULL RETURN DISTINCT n.category_id AS category_id",
        "gql": "MATCH (n:Categories) WHERE n.category_id = '775271e2a118257e7308fe4c21c9d0b4' OR n.category_id IS NOT NULL RETURN DISTINCT n.category_id AS category_id"
    },
    {
        "cypher": "MATCH (p:Process {pid: 8966})-[:DEPENDS_ON]->(s:Service) RETURN s.name AS service_name, COUNT(*) AS dependency_count ORDER BY dependency_count DESC LIMIT 3",
        "gql": "MATCH (p:Process {pid: 8966})-[:DEPENDS_ON]->(s:Service) RETURN s.name AS service_name, COUNT(*) AS dependency_count ORDER BY dependency_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Officer {name: \"MOSSFON SUBSCRIBERS LTD.\"})-[:officer_of]->(e:Entity) RETURN e.internal_id",
        "gql": "MATCH (o:Officer {name: \"MOSSFON SUBSCRIBERS LTD.\"})-[:officer_of]->(e:Entity) RETURN e.internal_id"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag) WITH q, size(collect(t)) AS tagCount ORDER BY tagCount DESC LIMIT 1 RETURN q.title",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN q, size(t) AS tagCount ORDER BY tagCount DESC LIMIT 1 NEXT RETURN q.title"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN singer.Name,singer.Country,singer.Age ORDER BY singer.Age DESC",
        "gql": "MATCH (singer:singer) RETURN singer.Name,singer.Country,singer.Age ORDER BY singer.Age DESC"
    },
    {
        "cypher": "MATCH (a:Article {id: \"ART166907382137\"}) RETURN a.author",
        "gql": "MATCH (a:Article {id: \"ART166907382137\"}) RETURN a.author"
    },
    {
        "cypher": "MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) RETURN e, f.amount ORDER BY f.amount DESC LIMIT 1",
        "gql": "MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) RETURN e, f.amount ORDER BY f.amount DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)<-[:IN_CATEGORY]-(b2:Business) MATCH (review:Review)-[:REVIEWS]->(b2) WITH c, size(split(review.text, ' ')) AS numberOfWords WITH c, avg(numberOfWords) AS averageWordCount RETURN c.name AS category, averageWordCount",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)<-[:IN_CATEGORY]-(b2:Business) MATCH (review:Review)-[:REVIEWS]->(b2) RETURN c, size(review.text) AS numberOfWords NEXT RETURN c.name AS category, averageWordCount"
    },
    {
        "cypher": "MATCH (a:Answer) WHERE a.score > 2 AND NOT a.is_accepted RETURN a",
        "gql": "MATCH (a:Answer) WHERE a.score > 2 AND NOT a.is_accepted RETURN a"
    },
    {
        "cypher": "MATCH p=(a:Topic{description:'Encompasses techniques for reconstructing images from blurred or incomplete data using regularizers, sparsity, and phase retrieval algorithms, with applications in compressive sensing, neural networks, and optical imaging. Focuses on understanding small-time behavior, limiting transitions, and phase transitions in signal processing and optics, as well as the role of status-dependent behavior and spiking neurons in neural networks. Emphasizes the importance of regularization, penalization, and lasso techniques in image reconstruction and phase retrieval'})-[*]->(d:Keyword{name:'super-exponential growth'}) RETURN count(p)",
        "gql": "MATCH (a:Topic{description:'Encompasses techniques for reconstructing images from blurred or incomplete data using regularizers, sparsity, and phase retrieval algorithms, with applications in compressive sensing, neural networks, and optical imaging. Focuses on understanding small-time behavior, limiting transitions, and phase transitions in signal processing and optics, as well as the role of status-dependent behavior and spiking neurons in neural networks. Emphasizes the importance of regularization, penalization, and lasso techniques in image reconstruction and phase retrieval'})-[]->{1,}(d:Keyword{name:'super-exponential growth'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (f:Filing)-[]->(e:Entity) WHERE f.originator_iso = 'DEU' AND f.beneficiary_iso = 'AFG' RETURN avg(f.amount) AS average_amount",
        "gql": "MATCH (f:Filing)-[]->(e:Entity) WHERE f.originator_iso = 'DEU' AND f.beneficiary_iso = 'AFG' RETURN avg(f.amount) AS average_amount"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.votes > 2000 RETURN m.title, m.votes",
        "gql": "MATCH (m:Movie) WHERE m.votes > 2000 RETURN m.title, m.votes"
    },
    {
        "cypher": "MATCH (fc:Farm_competition) RETURN fc.Theme ORDER BY fc.Year ASC",
        "gql": "MATCH (fc:Farm_competition) RETURN fc.Theme ORDER BY fc.`Year` ASC"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'space'}) WHERE m.status = 'Released' RETURN m ORDER BY m.popularity DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'space'}) WHERE m.status = 'Released' RETURN m ORDER BY m.popularity DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WITH u, SUM(q.downVotes) AS totalDownVotes ORDER BY totalDownVotes DESC LIMIT 5 RETURN u.display_name AS user, totalDownVotes",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, SUM(q.downVotes) AS totalDownVotes ORDER BY totalDownVotes DESC LIMIT 5 NEXT RETURN u.display_name AS user, totalDownVotes"
    },
    {
        "cypher": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName",
        "gql": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName"
    },
    {
        "cypher": "MATCH (u:User {userId: 'u1'})-[wr:WROTE]->(r:Review) RETURN r",
        "gql": "MATCH (u:User {userId: 'u1'})-[wr:WROTE]->(r:Review) RETURN r"
    },
    {
        "cypher": "MATCH (ic:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization) WITH ic, avg(o.nbrEmployees) AS avgEmployees RETURN ic.name AS industryCategoryName, avgEmployees ORDER BY avgEmployees DESC LIMIT 1",
        "gql": "MATCH (ic:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization) RETURN ic, avg(o.nbrEmployees) AS avgEmployees NEXT RETURN ic.name AS industryCategoryName, avgEmployees ORDER BY avgEmployees DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE b.city = 'Missoula' AND c.name = 'Beer' RETURN b",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE b.city = 'Missoula' AND c.name = 'Beer' RETURN b"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) WITH d, count(DISTINCT g) AS genreCount WHERE genreCount > 3 RETURN d.name AS Director, genreCount ORDER BY genreCount DESC LIMIT 3",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN d, count(g) AS genreCount NEXT RETURN d.name AS Director, genreCount ORDER BY genreCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages='641-672' WITH DISTINCT n, m RETURN n.title AS title, count(m) AS count LIMIT 20",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '641-672' RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` LIMIT 20"
    },
    {
        "cypher": "MATCH (e:Employee {employee_name: \"Koby\"})-[:None]->(r:Role) RETURN r.role_description",
        "gql": "MATCH (e:Employee {employee_name: \"Koby\"})-[:None]->(r:Role) RETURN r.role_description"
    },
    {
        "cypher": "MATCH (s:Software {name: 'webapp'})-[:INSTANCE]->(a:Application) RETURN a.name LIMIT 3",
        "gql": "MATCH (s:Software {name: 'webapp'})-[:INSTANCE]->(a:Application) RETURN a.name LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[:PUBLISHED_IN{pages: '527-551'}]->(m:Journal) WHERE m.article_id < date('2020-12-31') RETURN avg(m.journal_id) AS avg_journal_id",
        "gql": "MATCH (n:Article) -[:PUBLISHED_IN{pages: '527-551'}]->(m:Journal) WHERE m.article_id < date('2020-12-31') RETURN avg(m.journal_id) AS avg_journal_id"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget > 100000000 UNWIND m.countries AS country WITH country, count(DISTINCT m) AS movieCount ORDER BY movieCount DESC RETURN country, movieCount LIMIT 1",
        "gql": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN country, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN country, movieCount LIMIT 1"
    },
    {
        "cypher": "MATCH (n:RefLocation) WHERE n.Location_Name = \"Canada\" RETURN n.Location_Code",
        "gql": "MATCH (n:RefLocation) WHERE n.Location_Name = \"Canada\" RETURN n.Location_Code"
    },
    {
        "cypher": "MATCH (r:Review {reviewId: 'r2'})-[:REVIEWS]->(b:Business) RETURN b.name",
        "gql": "MATCH (r:Review {reviewId: 'r2'})-[:REVIEWS]->(b:Business) RETURN b.name"
    },
    {
        "cypher": "MATCH (u:User)-[r:RATED]->(m:Movie) WITH m, avg(toInteger(u.userId)) AS avgUserId ORDER BY avgUserId ASC LIMIT 3 RETURN m.title AS MovieTitle, avgUserId AS AverageUserId",
        "gql": "MATCH (u:User)-[r:RATED]->(m:Movie) RETURN m, avg(u.userId) AS avgUserId ORDER BY avgUserId ASC LIMIT 3 NEXT RETURN m.title AS MovieTitle, avgUserId AS AverageUserId"
    },
    {
        "cypher": "MATCH (Member:Member) RETURN Member.Card_Number AS card_number, Member.Name AS name, Member.Hometown AS hometown ORDER BY Member.Level DESC",
        "gql": "MATCH (Member:Member) RETURN Member.Card_Number AS card_number, Member.Name AS name, Member.Hometown AS hometown ORDER BY Member.Level DESC"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router {zone: 1}) RETURN r.name",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router {zone: 1}) RETURN r.name"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = 'en' AND s.total_view_count > 1000000 RETURN s.name AS stream_name, s.url AS stream_url, s.total_view_count AS total_views",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = 'en' AND s.total_view_count > 1000000 RETURN s.name AS stream_name, s.url AS stream_url, s.total_view_count AS total_views"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.status = 'Released' RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.status = 'Released' RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WITH avg(m.imdbRating) AS averageRating RETURN averageRating",
        "gql": "MATCH (m:Movie) RETURN avg(m.imdbRating) AS averageRating NEXT RETURN averageRating"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.article_id='604531' RETURN m.name",
        "gql": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.article_id='604531' RETURN m.name"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 1000000 RETURN count(distinct l) as num_languages",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 1000000 RETURN count(distinct l) as num_languages"
    },
    {
        "cypher": "MATCH (o:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment < 0 WITH o, COUNT(a) AS articleCount ORDER BY articleCount DESC LIMIT 3 RETURN o.name AS organizationName, articleCount",
        "gql": "MATCH (o:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment < 0 RETURN o, COUNT(a) AS articleCount ORDER BY articleCount DESC LIMIT 3 NEXT RETURN o.name AS organizationName, articleCount"
    },
    {
        "cypher": "MATCH (votes:VOTES) WHERE votes.state = 'NY' OR votes.state = 'CA' RETURN count(*)",
        "gql": "MATCH (votes:VOTES) WHERE votes.state = 'NY' OR votes.state = 'CA' RETURN count(*)"
    },
    {
        "cypher": "MATCH (p:Person)-[r:CREW_FOR]->(m:Movie) WHERE r.job = 'Director' AND m.average_vote > 7.5 RETURN p.name, count(m) AS movies_directed ORDER BY movies_directed DESC LIMIT 3",
        "gql": "MATCH (p:Person)-[r:CREW_FOR]->(m:Movie) WHERE r.job = 'Director' AND m.average_vote > 7.5 RETURN p.name, count(m) AS movies_directed ORDER BY movies_directed DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Topic), (:Topic {description: 'The study of geometric shapes and their properties, focusing on the structure and behavior of spaces rather than their physical characteristics.'}) WHERE NOT (n) --> (:Topic) RETURN n.description",
        "gql": "MATCH (n:Topic), (:Topic {description: 'The study of geometric shapes and their properties, focusing on the structure and behavior of spaces rather than their physical characteristics.'}) WHERE NOT (n) --> (:Topic) RETURN n.description"
    },
    {
        "cypher": "MATCH (m:Machine)-[:RUNS]->(a:Application) WITH m, count(a) AS numApps RETURN avg(numApps)",
        "gql": "MATCH (m:Machine)-[:RUNS]->(a:Application) RETURN m, count(a) AS numApps NEXT RETURN avg(numApps)"
    },
    {
        "cypher": "MATCH (s:Stream) WHERE s.followers >= 1000 AND s.followers <= 5000 RETURN s",
        "gql": "MATCH (s:Stream) WHERE s.followers >= 1000 AND s.followers <= 5000 RETURN s"
    },
    {
        "cypher": "MATCH (parentOrg:Organization)-[:HAS_SUBSIDIARY]->(subOrg:Organization) WHERE subOrg.nbrEmployees IS NOT NULL RETURN parentOrg.name AS ParentOrganization, subOrg.name AS Subsidiary, subOrg.nbrEmployees AS NumberOfEmployees ORDER BY subOrg.nbrEmployees DESC LIMIT 3",
        "gql": "MATCH (parentOrg:Organization)-[:HAS_SUBSIDIARY]->(subOrg:Organization) WHERE subOrg.nbrEmployees IS NOT NULL RETURN parentOrg.name AS ParentOrganization, subOrg.name AS Subsidiary, subOrg.nbrEmployees AS NumberOfEmployees ORDER BY subOrg.nbrEmployees DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Nurse) RETURN DISTINCT n.Name ORDER BY n.Name",
        "gql": "MATCH (n:Nurse) RETURN DISTINCT n.Name ORDER BY n.Name"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE e.country = 'CHN' RETURN f.amount AS Amount ORDER BY f.amount DESC LIMIT 3",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE e.country = 'CHN' RETURN f.amount AS Amount ORDER BY f.amount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)<-[:CHATTER]-(u:User)-[:MODERATOR]->(s) RETURN DISTINCT s",
        "gql": "MATCH (s:Stream)<-[:CHATTER]-(u:User)-[:MODERATOR]->(s) RETURN DISTINCT s"
    },
    {
        "cypher": "MATCH (c:Course) WHERE c.Days = \"MTW\" RETURN c.CName",
        "gql": "MATCH (c:Course) WHERE c.Days = \"MTW\" RETURN c.CName"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Headquarters <> 'USA' RETURN c.Main_Industry, c.Company",
        "gql": "MATCH (c:Company) WHERE c.Headquarters <> 'USA' RETURN c.Main_Industry, c.Company"
    },
    {
        "cypher": "MATCH (o:Officer)-[:intermediary_of]->(e:Entity) RETURN o, e",
        "gql": "MATCH (o:Officer)-[:intermediary_of]->(e:Entity) RETURN o, e"
    },
    {
        "cypher": "MATCH (org:Organization)-[:HAS_SUPPLIER]->(supplier:Organization),       (org)-[:IN_CITY]->(city:City)<-[:IN_CITY]-(supplier),       (city)-[:IN_COUNTRY]->(country:Country) WITH country, count(DISTINCT org) AS orgCount ORDER BY orgCount DESC LIMIT 3 RETURN country.name AS countryName, orgCount",
        "gql": "MATCH (org:Organization)-[:HAS_SUPPLIER]->(supplier:Organization) RETURN country, count(org) AS orgCount ORDER BY orgCount DESC LIMIT 3 NEXT RETURN country.name AS countryName, orgCount"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u.id, u.display_name, count(q) AS questions_asked ORDER BY questions_asked DESC LIMIT 5",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u.id, u.display_name, count(q) AS questions_asked ORDER BY questions_asked DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (t:Teacher) WHERE t.Classroom = 110 RETURN t.FirstName",
        "gql": "MATCH (t:Teacher) WHERE t.Classroom = 110 RETURN t.FirstName"
    },
    {
        "cypher": "MATCH (n:Musical) WHERE n.Nominee = \"Bob Fosse\" RETURN n.Name",
        "gql": "MATCH (n:Musical) WHERE n.Nominee = \"Bob Fosse\" RETURN n.Name"
    },
    {
        "cypher": "MATCH (n:Categories) WHERE n.category_id = '0131645b590b64c1a0cf13a4fceeb000' OR n.category_id IS NOT NULL RETURN DISTINCT n.category_id AS category_id",
        "gql": "MATCH (n:Categories) WHERE n.category_id = '0131645b590b64c1a0cf13a4fceeb000' OR n.category_id IS NOT NULL RETURN DISTINCT n.category_id AS category_id"
    },
    {
        "cypher": "MATCH (p:Procedure) RETURN max(p.Cost), min(p.Cost), avg(p.Cost)",
        "gql": "MATCH (p:`Procedure`) RETURN max(p.Cost), min(p.Cost), avg(p.Cost)"
    },
    {
        "cypher": "MATCH (c:Character)-[r:INTERACTS2]->(:Character) WHERE r.weight < 20 RETURN c",
        "gql": "MATCH (c:Character)-[r:INTERACTS2]->(:Character) WHERE r.weight < 20 RETURN c"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue > 100000000 AND m.popularity < 10 RETURN m.title AS title, m.revenue AS revenue, m.popularity AS popularity",
        "gql": "MATCH (m:Movie) WHERE m.revenue > 100000000 AND m.popularity < 10 RETURN m.title AS title, m.revenue AS revenue, m.popularity AS popularity"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.nbrEmployees > 1000 WITH o MATCH (a:Article)-[:MENTIONS]->(o) WITH a LIMIT 3 RETURN a.title",
        "gql": "MATCH (o:Organization) WHERE o.nbrEmployees > 1000 MATCH (a:Article)-[:MENTIONS]->(o) RETURN o NEXT RETURN a.title"
    },
    {
        "cypher": "MATCH (p:Patient)-[:HAS_APPOINTMENT]->(a:Appointment) MATCH (p)-[:HAS_CHRONIC_DISEASE]->(d:Disease) WHERE a.reason = 'New Patient' RETURN DISTINCT p",
        "gql": "MATCH (p:Patient)-[:HAS_APPOINTMENT]->(a:Appointment) MATCH (p)-[:HAS_CHRONIC_DISEASE]->(d:Disease) WHERE a.reason = 'New Patient' RETURN DISTINCT p"
    },
    {
        "cypher": "MATCH (r:Region) RETURN r.Region_name ORDER BY r.Region_name",
        "gql": "MATCH (r:Region) RETURN r.Region_name ORDER BY r.Region_name"
    },
    {
        "cypher": "MATCH (n:Categories) RETURN n.specifications  SKIP 2 LIMIT 2",
        "gql": "MATCH (n:Categories) RETURN n.specifications  SKIP 2 LIMIT 2"
    },
    {
        "cypher": "MATCH (ra:RefShippingAgent) WHERE ra.shipping_agent_name = \"USPS\" MATCH (d:Document) WHERE d.shipping_agent_code = ra.shipping_agent_code RETURN count(d)",
        "gql": "MATCH (ra:RefShippingAgent) WHERE ra.shipping_agent_name = \"USPS\" MATCH (d:Document) WHERE d.shipping_agent_code = ra.shipping_agent_code RETURN count(d)"
    },
    {
        "cypher": "MATCH (i:Intermediary {status: 'SUSPENDED'})-[:intermediary_of]->(e:Entity {countries: 'Hong Kong'}) RETURN e.name",
        "gql": "MATCH (i:Intermediary {status: 'SUSPENDED'})-[:intermediary_of]->(e:Entity {countries: 'Hong Kong'}) RETURN e.name"
    },
    {
        "cypher": "MATCH p=(a:DOI{doi_id:'f2f5ea4787de1e16c51c306e07bb740c'})-[*]->(d:Journal{journal_id:'d3b321ed42589ea798c241aa7de23d2d'}) RETURN count(p)",
        "gql": "MATCH (a:DOI{doi_id:'f2f5ea4787de1e16c51c306e07bb740c'})-[]->{1,}(d:Journal{journal_id:'d3b321ed42589ea798c241aa7de23d2d'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1071 OR n.article_id < 1056 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1071 OR n.article_id < 1056 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (campus:Campus) WHERE campus.County = \"Los Angeles\" RETURN campus.Campus",
        "gql": "MATCH (campus:Campus) WHERE campus.County = \"Los Angeles\" RETURN campus.Campus"
    },
    {
        "cypher": "MATCH (b:Browser)-[:USES]->(w:WebClientAccelerator) WHERE b.market_share > 15 RETURN DISTINCT w.name",
        "gql": "MATCH (b:Browser)-[:USES]->(w:WebClientAccelerator) WHERE b.market_share > 15 RETURN DISTINCT w.name"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:CONTAINS]->(l:Link) RETURN t.text AS tweet_text, t.favorites AS favorites, l.url AS link_url ORDER BY t.favorites DESC LIMIT 5",
        "gql": "MATCH (t:Tweet)-[:CONTAINS]->(l:Link) RETURN t.text AS tweet_text, t.favorites AS favorites, l.url AS link_url ORDER BY t.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Product) WHERE p.unitsOnOrder > 30 RETURN p",
        "gql": "MATCH (p:`Product`) WHERE p.unitsOnOrder > 30 RETURN p"
    },
    {
        "cypher": "MATCH (i:Intermediary {name: 'MICHAEL PAPAGEORGE, MR.'}) RETURN i.sourceID",
        "gql": "MATCH (i:Intermediary {name: 'MICHAEL PAPAGEORGE, MR.'}) RETURN i.sourceID"
    },
    {
        "cypher": "MATCH (t:Technician) WHERE t.Team <> \"NYY\" RETURN t.Name",
        "gql": "MATCH (t:Technician) WHERE t.Team <> \"NYY\" RETURN t.Name"
    },
    {
        "cypher": "MATCH (s:Service {pid: 1234}) WITH s.name AS service_name MATCH (other:Service {name: service_name}) RETURN count(other)",
        "gql": "MATCH (s:Service{pid:1234}) RETURN s.name AS service_name NEXT MATCH (other:Service{name:service_name}) RETURN count(other)"
    },
    {
        "cypher": "MATCH (p:Patient)-[:HAS_ALLERGY]->(a:Allergy{name: 'Peanuts'}), (p)-[:HAD_SURGERY]->(s:Surgery)-[:OF_TYPE]->(st:SurgeryType {name: 'Tonsillectomy'}) RETURN DISTINCT p",
        "gql": "MATCH (p:Patient)-[:HAS_ALLERGY]->(a:Allergy{name: 'Peanuts'}), (p)-[:HAD_SURGERY]->(s:Surgery)-[:OF_TYPE]->(st:SurgeryType {name: 'Tonsillectomy'}) RETURN DISTINCT p"
    },
    {
        "cypher": "MATCH (t:Teacher) WHERE t.Classroom = 109 RETURN t.LastName",
        "gql": "MATCH (t:Teacher) WHERE t.Classroom = 109 RETURN t.LastName"
    },
    {
        "cypher": "MATCH (a:UpdateDate{update_date:'2017-07-11'})-[*]->(d:Article{article_id:'1052'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:UpdateDate{update_date:'2017-07-11'})-[]->{1,}(d:Article{article_id:'1052'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (o:Order) WITH o.shipAddress AS address, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 3 RETURN address, orderCount",
        "gql": "MATCH (o:`Order`) RETURN o.shipAddress AS address, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 3 NEXT RETURN address, orderCount"
    },
    {
        "cypher": "MATCH (r:Region) RETURN r.Region_name ORDER BY r.Region_name",
        "gql": "MATCH (r:Region) RETURN r.Region_name ORDER BY r.Region_name"
    },
    {
        "cypher": "MATCH (org:Organization)-[:HAS_SUBSIDIARY]->(:Organization) MATCH (org)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS CEOName, org.name AS OrganizationName",
        "gql": "MATCH (org:Organization)-[:HAS_SUBSIDIARY]->(:Organization) MATCH (org)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS CEOName, org.name AS OrganizationName"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.incorporation_date IS NOT NULL RETURN e.name, e.incorporation_date ORDER BY e.incorporation_date DESC LIMIT 5",
        "gql": "MATCH (e:Entity) WHERE e.incorporation_date IS NOT NULL RETURN e.name, e.incorporation_date ORDER BY e.incorporation_date DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (b:Book) RETURN count(*)",
        "gql": "MATCH (b:Book) RETURN count(*)"
    },
    {
        "cypher": "MATCH (a:Article{article_id:'1069'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{article_id:'1069'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (p:Port) WITH p ORDER BY p.port DESC LIMIT 1 MATCH (i:Interface)-[:EXPOSES]->(p) RETURN i.ip",
        "gql": "MATCH (p:Port) RETURN p ORDER BY p.port DESC LIMIT 1 NEXT MATCH (i:Interface)-[:EXPOSES]->(p) RETURN i.ip"
    },
    {
        "cypher": "MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie) WHERE m.year < 1980 WITH a, count(r) AS numRoles ORDER BY numRoles DESC LIMIT 5 RETURN a.name AS actor, numRoles",
        "gql": "MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie) WHERE m.`year` < 1980 RETURN a, count(r) AS numRoles ORDER BY numRoles DESC LIMIT 5 NEXT RETURN a.name AS actor, numRoles"
    },
    {
        "cypher": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician), (T1)-[:ASSIGNED_TO]->(T2:Machine) WHERE T2.value_points > 70 RETURN T3.Name",
        "gql": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician), (T1)-[:ASSIGNED_TO]->(T2:Machine) WHERE T2.value_points > 70 RETURN T3.Name"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WITH e, count(f) AS numberOfFilings RETURN e.name AS entityName, numberOfFilings ORDER BY numberOfFilings DESC",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) RETURN e, count(f) AS numberOfFilings NEXT RETURN e.name AS entityName, numberOfFilings ORDER BY numberOfFilings DESC"
    },
    {
        "cypher": "MATCH (Candidate:Candidate) RETURN max(Candidate.Support_rate), min(Candidate.Consider_rate), min(Candidate.Oppose_rate)",
        "gql": "MATCH (Candidate:Candidate) RETURN max(Candidate.Support_rate), min(Candidate.Consider_rate), min(Candidate.Oppose_rate)"
    },
    {
        "cypher": "MATCH (a:Actor {name: \"Tom Hanks\"})-[:ACTED_IN]->(m:Movie {year: 1994}) RETURN m.title",
        "gql": "MATCH (a:Actor{name:\"Tom Hanks\"})-[:ACTED_IN]->(m:Movie{`year`:1994}) RETURN m.title"
    },
    {
        "cypher": "MATCH (i:Intermediary) WHERE i.countries = \"South Africa\" AND i.status = \"ACTIVE\" RETURN i.name",
        "gql": "MATCH (i:Intermediary) WHERE i.countries = \"South Africa\" AND i.status = \"ACTIVE\" RETURN i.name"
    },
    {
        "cypher": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) WITH p, r.roles AS roles UNWIND roles AS role WITH p, COUNT(DISTINCT role) AS uniqueRolesCount RETURN p.name AS actor, uniqueRolesCount ORDER BY uniqueRolesCount DESC LIMIT 3",
        "gql": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN p, r.roles AS roles NEXT RETURN p.name AS actor, uniqueRolesCount ORDER BY uniqueRolesCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:DOI) WHERE n.doi_id <> 'fe8768ee88f2d27ed51861639e63a4ff' RETURN DISTINCT n.doi_id AS doi_id",
        "gql": "MATCH (n:DOI) WHERE n.doi_id <> 'fe8768ee88f2d27ed51861639e63a4ff' RETURN DISTINCT n.doi_id AS doi_id"
    },
    {
        "cypher": "MATCH (b:BookClub) RETURN b.Category, count(*)",
        "gql": "MATCH (b:BookClub) RETURN b.Category, count(*)"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) WHERE t.name = 'graphql-subscriptions' RETURN u.display_name, u.id, u.link",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) WHERE t.name = 'graphql-subscriptions' RETURN u.display_name, u.id, u.link"
    },
    {
        "cypher": "MATCH (c:CatalogContent) RETURN c.catalog_entry_name ORDER BY c.height DESC LIMIT 1",
        "gql": "MATCH (c:CatalogContent) RETURN c.catalog_entry_name ORDER BY c.height DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.popularity > 20 RETURN m ORDER BY m.popularity DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.popularity > 20 RETURN m ORDER BY m.popularity DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[r:RATED]->(m:Movie) WITH u, avg(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 3 RETURN u.name AS userName, avgRating",
        "gql": "MATCH (u:User)-[r:RATED]->(m:Movie) RETURN u, avg(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 3 NEXT RETURN u.name AS userName, avgRating"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:ACTED_IN]-(p:Person) RETURN m.title AS movie, size(r.roles) AS roleCount ORDER BY roleCount DESC LIMIT 5",
        "gql": "MATCH (m:Movie)<-[r:ACTED_IN]-(p:Person) RETURN m.title AS movie, size(r.roles) AS roleCount ORDER BY roleCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'Singapore' AND f.amount > 200000 RETURN f LIMIT 3",
        "gql": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'Singapore' AND f.amount > 200000 RETURN f LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)-[:VIP]->(u:User) WITH s, count(DISTINCT u) AS vipCount WHERE vipCount > 3 RETURN s",
        "gql": "MATCH (s:Stream)-[:VIP]->(u:User) RETURN s, count(u) AS vipCount NEXT RETURN s"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweetedTweet:Tweet)<-[:POSTS]-(retweetedUser:User) RETURN retweetedUser.screen_name AS retweeted_user, count(*) AS retweet_count ORDER BY retweet_count DESC LIMIT 5",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweetedTweet:Tweet)<-[:POSTS]-(retweetedUser:User) RETURN retweetedUser.screen_name AS retweeted_user, count(*) AS retweet_count ORDER BY retweet_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'}) RETURN e.name AS BeneficiaryBank LIMIT 3",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'}) RETURN e.name AS BeneficiaryBank LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName",
        "gql": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages='131-170' WITH DISTINCT n, m RETURN n.abstract AS abstract, count(m) AS count LIMIT 20",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '131-170' RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS `count` LIMIT 20"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Drama'}) WHERE m.runtime > 120 RETURN m.title, m.runtime",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Drama'}) WHERE m.runtime > 120 RETURN m.title, m.runtime"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.description  IS NOT NULL AND n.cluster > 5 RETURN n.description AS description, n.cluster AS cluster ORDER BY cluster DESC",
        "gql": "MATCH (n:Topic) WHERE n.description  IS NOT NULL AND n.cluster > 5 RETURN n.description AS description, n.cluster AS cluster ORDER BY cluster DESC"
    },
    {
        "cypher": "MATCH (f:Filing) MATCH (f)-[:ORIGINATOR]->(originator:Entity)-[:COUNTRY]->(originatorCountry:Country) MATCH (f)<-[:FILED]-(filer:Entity)-[:COUNTRY]->(filerCountry:Country) WHERE originatorCountry.code = filerCountry.code RETURN sum(f.amount) AS totalAmount",
        "gql": "MATCH (f:Filing) MATCH (f)-[:ORIGINATOR]->(originator:Entity)-[:COUNTRY]->(originatorCountry:Country) MATCH (f)<-[:FILED]-(filer:Entity)-[:COUNTRY]->(filerCountry:Country) WHERE originatorCountry.code = filerCountry.code RETURN sum(f.amount) AS totalAmount"
    },
    {
        "cypher": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) MATCH (parent)-[:HAS_CATEGORY]->(parentIndustry:IndustryCategory) MATCH (subsidiary)-[:HAS_CATEGORY]->(subsidiaryIndustry:IndustryCategory) WHERE parentIndustry = subsidiaryIndustry MATCH (parent)-[:IN_CITY]->(parentCity:City)-[:IN_COUNTRY]->(parentCountry:Country) MATCH (subsidiary)-[:IN_CITY]->(subsidiaryCity:City)-[:IN_COUNTRY]->(subsidiaryCountry:Country) WHERE parentCountry <> subsidiaryCountry RETURN DISTINCT subsidiary.name AS subsidiaryName",
        "gql": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) MATCH (parent)-[:HAS_CATEGORY]->(parentIndustry:IndustryCategory) MATCH (subsidiary)-[:HAS_CATEGORY]->(subsidiaryIndustry:IndustryCategory) WHERE parentIndustry = subsidiaryIndustry MATCH (parent)-[:IN_CITY]->(parentCity:City)-[:IN_COUNTRY]->(parentCountry:Country) MATCH (subsidiary)-[:IN_CITY]->(subsidiaryCity:City)-[:IN_COUNTRY]->(subsidiaryCountry:Country) WHERE parentCountry <> subsidiaryCountry RETURN DISTINCT subsidiary.name AS subsidiaryName"
    },
    {
        "cypher": "MATCH (e1:Entity)-[:registered_address]->(a:Address)<-[:registered_address]-(e2:Entity) WHERE e1.node_id <> e2.node_id RETURN e1, a, e2",
        "gql": "MATCH (e1:Entity)-[:registered_address]->(a:Address)<-[:registered_address]-(e2:Entity) WHERE e1.node_id <> e2.node_id RETURN e1, a, e2"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answered = true AND q.favorites >= 1 RETURN q ORDER BY q.createdAt ASC LIMIT 3",
        "gql": "MATCH (q:Question) WHERE q.answered = true AND q.favorites >= 1 RETURN q ORDER BY q.createdAt ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (investor:Organization)-[:HAS_INVESTOR]->(investee:Organization) WITH investor, COUNT(investee) AS investeeCount WHERE investeeCount > 3 RETURN investor.name AS InvestorName, investeeCount ORDER BY investeeCount DESC LIMIT 3",
        "gql": "MATCH (investor:Organization)-[:HAS_INVESTOR]->(investee:Organization) RETURN investor, COUNT(investee) AS investeeCount NEXT RETURN investor.name AS InvestorName, investeeCount ORDER BY investeeCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WITH e.name AS originator_bank, SUM(f.amount) AS total_amount ORDER BY total_amount DESC LIMIT 3 RETURN originator_bank, total_amount",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) RETURN e.name AS originator_bank, SUM(f.amount) AS total_amount ORDER BY total_amount DESC LIMIT 3 NEXT RETURN originator_bank, total_amount"
    },
    {
        "cypher": "MATCH (m:Movie) WITH m, size(m.languages) AS num_languages ORDER BY num_languages DESC RETURN m.title, num_languages LIMIT 1",
        "gql": "MATCH (m:Movie) RETURN m, size(m.languages) AS num_languages ORDER BY num_languages DESC NEXT RETURN m.title, num_languages LIMIT 1"
    },
    {
        "cypher": "MATCH (c:Campus) WHERE c.County = \"Los Angeles\" RETURN count(c)",
        "gql": "MATCH (c:Campus) WHERE c.County = \"Los Angeles\" RETURN count(c)"
    },
    {
        "cypher": "MATCH (n:User {screen_name: 'neo4j'})-[:FOLLOWS]->(followed:User) WITH followed MATCH (tweet:Tweet)-[:MENTIONS]->(followed) RETURN max(tweet.created_at) AS most_recent_tweet_date",
        "gql": "MATCH (n:User{screen_name:'neo4j'})-[:FOLLOWS]->(followed:User) RETURN followed NEXT MATCH (tweet:Tweet)-[:MENTIONS]->(followed) RETURN max(tweet.created_at) AS most_recent_tweet_date"
    },
    {
        "cypher": "MATCH (a:Author{last_name:'Burnol'})-[*]->(d:Journal{journal_id:'ebe5bed51965553359ee9f13db0293e1'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Author{last_name:'Burnol'})-[]->{1,}(d:Journal{journal_id:'ebe5bed51965553359ee9f13db0293e1'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (a:Article{title:'Failure of Brown representability in derived categories'})-[*]->(d:Keyword{name:'exponentially growing'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Failure of Brown representability in derived categories'})-[]->{1,}(d:Keyword{name:'exponentially growing'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (accenture:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN subsidiary.name LIMIT 3",
        "gql": "MATCH (accenture:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN subsidiary.name LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.community = 579 RETURN max(c.book1BetweennessCentrality)",
        "gql": "MATCH (c:Character) WHERE c.community = 579 RETURN max(c.book1BetweennessCentrality)"
    },
    {
        "cypher": "MATCH (p:Person) WHERE p.Weight > 85 RETURN count(*), p.Sex",
        "gql": "MATCH (p:Person) WHERE p.Weight > 85 RETURN count(*), p.Sex"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS2]->(c2:Character) RETURN c1, c2, r.weight AS weight ORDER BY r.weight DESC LIMIT 1",
        "gql": "MATCH (c1:Character)-[r:INTERACTS2]->(c2:Character) RETURN c1, c2, r.weight AS weight ORDER BY r.weight DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Article {siteName: \"MrWeb\"})-[:MENTIONS]->(o:Organization) RETURN o.name AS OrganizationName LIMIT 3",
        "gql": "MATCH (a:Article {siteName: \"MrWeb\"})-[:MENTIONS]->(o:Organization) RETURN o.name AS OrganizationName LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article {abstract:'  Using matrix inversion and determinant evaluation techniques we prove several summation and transformation formulas for terminating, balanced, very-well-poised, elliptic hypergeometric series. '})-[:PUBLISHED_IN {year: '2002'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{`abstract`:'  Using matrix inversion and determinant evaluation techniques we prove several summation and transformation formulas for terminating, balanced, very-well-poised, elliptic hypergeometric series. '})-[:PUBLISHED_IN{`year`:'2002'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.upVotes = q.downVotes RETURN q.title",
        "gql": "MATCH (q:Question) WHERE q.upVotes = q.downVotes RETURN q.title"
    },
    {
        "cypher": "MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE a.countries = 'Hong Kong' RETURN e.name AS entity_name, a.address AS entity_address LIMIT 5",
        "gql": "MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE a.countries = 'Hong Kong' RETURN e.name AS entity_name, a.address AS entity_address LIMIT 5"
    },
    {
        "cypher": "MATCH (e:Editor) RETURN e.Name, e.Age",
        "gql": "MATCH (e:Editor) RETURN e.Name, e.Age"
    },
    {
        "cypher": "MATCH (target:Character {name: \"Stevron-Frey\"}) MATCH (target)-[:INTERACTS*1..5]-(other) WITH other, other.book1PageRank AS pageRank RETURN other.name, pageRank ORDER BY pageRank ASC LIMIT 10",
        "gql": "MATCH (target:Character{name:\"Stevron-Frey\"}) MATCH (target)-[:INTERACTS]-{1,5}(other) RETURN other, other.book1PageRank AS pageRank NEXT RETURN other.name, pageRank ORDER BY pageRank ASC LIMIT 10"
    },
    {
        "cypher": "MATCH (o:Officer {name: 'KIM SOO IN'})-[:officer_of]->(e:Entity) RETURN e.name AS entity_name",
        "gql": "MATCH (o:Officer {name: 'KIM SOO IN'})-[:officer_of]->(e:Entity) RETURN e.name AS entity_name"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WITH s, count(p) AS productCount WHERE productCount = 1 RETURN s.companyName, productCount",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, count(p) AS productCount NEXT RETURN s.companyName, productCount"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.followers > 5000 RETURN g.name AS game, count(*) AS stream_count ORDER BY stream_count DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.followers > 5000 RETURN g.name AS game, count(*) AS stream_count ORDER BY stream_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.upVotes = 0 AND q.downVotes = 0 RETURN u.display_name, u.id, u.link",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.upVotes = 0 AND q.downVotes = 0 RETURN u.display_name, u.id, u.link"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WITH s, COUNT(p) AS productCount ORDER BY productCount DESC LIMIT 5 RETURN s.companyName AS supplierName, productCount",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, COUNT(p) AS productCount ORDER BY productCount DESC LIMIT 5 NEXT RETURN s.companyName AS supplierName, productCount"
    },
    {
        "cypher": "MATCH (p1:Person)-[:FOLLOWS]->(p2:Person) WHERE p1.born = p2.born RETURN p1, p2",
        "gql": "MATCH (p1:Person)-[:FOLLOWS]->(p2:Person) WHERE p1.born = p2.born RETURN p1, p2"
    },
    {
        "cypher": "MATCH (d:Department) WHERE d.Division = \"AS\" OR (d.Division = \"EN\" AND d.Building = \"NEB\") RETURN DISTINCT d.DName",
        "gql": "MATCH (d:Department) WHERE d.Division = \"AS\" OR (d.Division = \"EN\" AND d.Building = \"NEB\") RETURN DISTINCT d.DName"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review) WITH u, avg(r.stars) AS average_rating WHERE average_rating > 4.5 MATCH (u)-[:WROTE]->(r2:Review)-[:REVIEWS]->(b:Business) RETURN DISTINCT b.name",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review) RETURN u, avg(r.stars) AS average_rating NEXT MATCH (u)-[:WROTE]->(r2:Review)-[:REVIEWS]->(b:Business) RETURN DISTINCT b.name"
    },
    {
        "cypher": "MATCH (s:Stream)<-[:CHATTER]-(u:User)-[:CHATTER]->(other:Stream)<-[:VIP]-(u) WITH s MATCH (s)-[:HAS_LANGUAGE]->(l:Language) RETURN DISTINCT l.name AS language",
        "gql": "MATCH (s:Stream)<-[:CHATTER]-(u:User)-[:CHATTER]->(other:Stream)<-[:VIP]-(u) RETURN s NEXT MATCH (s)-[:HAS_LANGUAGE]->(l:Language) RETURN DISTINCT l.name AS language"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(p:ProductionCompany) WITH p.name AS productionCompanyName, count(m) AS numMovies ORDER BY numMovies DESC RETURN productionCompanyName, numMovies LIMIT 1",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(p:ProductionCompany) RETURN p.name AS productionCompanyName, count(m) AS numMovies ORDER BY numMovies DESC NEXT RETURN productionCompanyName, numMovies LIMIT 1"
    },
    {
        "cypher": "MATCH (u:User)-[:PROVIDED]->(:Answer) WITH DISTINCT u MATCH (u)-[:COMMENTED]->(c:Comment) RETURN avg(c.score)",
        "gql": "MATCH (u:User)-[:PROVIDED]->(:Answer) RETURN DISTINCT u NEXT MATCH (u)-[:COMMENTED]->(c:Comment) RETURN avg(c.score)"
    },
    {
        "cypher": "MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:ORIGINATOR]-(f:Filing) WITH c.name AS country, COUNT(DISTINCT e.id) AS originator_count ORDER BY originator_count DESC LIMIT 3 RETURN country, originator_count",
        "gql": "MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:ORIGINATOR]-(f:Filing) RETURN c.name AS country, COUNT(e.id) AS originator_count ORDER BY originator_count DESC LIMIT 3 NEXT RETURN country, originator_count"
    },
    {
        "cypher": "MATCH (T1:Journal)-[:EDited_BY]->(T2:Editor) WHERE T1.Sales > 3000 RETURN T2.Name",
        "gql": "MATCH (T1:Journal)-[:EDited_BY]->(T2:Editor) WHERE T1.Sales > 3000 RETURN T2.Name"
    },
    {
        "cypher": "MATCH (a:Authorhip)-[:WRITES]->(p:Paper), (a:Authorhip)-[:WRITTEN_BY]->(au:Author), (a:Authorhip)-[:AFFILIATED_WITH]->(i:Inst) WHERE i.country = \"Japan\" AND a.authOrder = 1 AND au.lname = \"Ohori\" RETURN p.title",
        "gql": "MATCH (a:Authorhip)-[:WRITES]->(p:Paper), (a:Authorhip)-[:WRITTEN_BY]->(au:Author), (a:Authorhip)-[:AFFILIATED_WITH]->(i:Inst) WHERE i.country = \"Japan\" AND a.authOrder = 1 AND au.lname = \"Ohori\" RETURN p.title"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue > 500000000 RETURN m",
        "gql": "MATCH (m:Movie) WHERE m.revenue > 500000000 RETURN m"
    },
    {
        "cypher": "MATCH (n:Keyword), (:Article {article_id: '1015'}) WHERE NOT (n) --> (:Article) RETURN n.name",
        "gql": "MATCH (n:Keyword), (:Article {article_id: '1015'}) WHERE NOT (n) --> (:Article) RETURN n.name"
    },
    {
        "cypher": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Spanish'}) RETURN m.original_title AS OriginalTitle",
        "gql": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Spanish'}) RETURN m.original_title AS OriginalTitle"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie {title: 'Speed Racer'}) RETURN p.name AS reviewer, r.rating AS rating",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie {title: 'Speed Racer'}) RETURN p.name AS reviewer, r.rating AS rating"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.last_name = 'Warnaar' OR n.affiliation IS NOT NULL RETURN DISTINCT n.affiliation AS affiliation",
        "gql": "MATCH (n:Author) WHERE n.last_name = 'Warnaar' OR n.affiliation IS NOT NULL RETURN DISTINCT n.affiliation AS affiliation"
    },
    {
        "cypher": "MATCH (c:conference) RETURN count(c) AS countConference",
        "gql": "MATCH (c:conference) RETURN count(c) AS countConference"
    },
    {
        "cypher": "MATCH (n:List) WHERE n.Classroom = 108 RETURN n.FirstName",
        "gql": "MATCH (n:`List`) WHERE n.Classroom = 108 RETURN n.FirstName"
    },
    {
        "cypher": "MATCH (m:Movie {title: \"Gone with the Wind\"}) RETURN m",
        "gql": "MATCH (m:Movie {title: \"Gone with the Wind\"}) RETURN m"
    },
    {
        "cypher": "MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie) RETURN m.title AS movie, m.released AS year ORDER BY m.released LIMIT 3",
        "gql": "MATCH (p:Person{name:'Keanu Reeves'})-[:ACTED_IN]->(m:Movie) RETURN m.title AS movie, m.released AS `year` ORDER BY m.released LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Order { shipCountry: 'France' }) WITH avg(toFloat(o.freight)) AS averageFreight RETURN averageFreight",
        "gql": "MATCH (o:`Order`{shipCountry:'France'}) RETURN avg(o.freight) AS averageFreight NEXT RETURN averageFreight"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Singapore'}) RETURN f ORDER BY f.amount DESC LIMIT 5",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Singapore'}) RETURN f ORDER BY f.amount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Stream) WHERE s.total_view_count < s.followers RETURN count(s)",
        "gql": "MATCH (s:Stream) WHERE s.total_view_count < s.followers RETURN count(s)"
    },
    {
        "cypher": "MATCH (e:Editor) WHERE e.Age = 24 OR e.Age = 25 RETURN e.Name",
        "gql": "MATCH (e:Editor) WHERE e.Age = 24 OR e.Age = 25 RETURN e.Name"
    },
    {
        "cypher": "MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN m.title, l.name LIMIT 10",
        "gql": "MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN m.title, l.name LIMIT 10"
    },
    {
        "cypher": "MATCH (c:RefCalendar) RETURN count(c) as count",
        "gql": "MATCH (c:RefCalendar) RETURN count(c) AS `count`"
    },
    {
        "cypher": "MATCH (s:Storm) WHERE s.Number_Deaths > 0 RETURN count(s)",
        "gql": "MATCH (s:Storm) WHERE s.Number_Deaths > 0 RETURN count(s)"
    },
    {
        "cypher": "MATCH (s:Stream)-[:CHATTER]->(u:User) WHERE u.followers < 1000 RETURN s",
        "gql": "MATCH (s:Stream)-[:CHATTER]->(u:User) WHERE u.followers < 1000 RETURN s"
    },
    {
        "cypher": "MATCH (b:Browser) RETURN b.id, b.name, b.market_share",
        "gql": "MATCH (b:Browser) RETURN b.id, b.name, b.market_share"
    },
    {
        "cypher": "MATCH (c:City)<-[:TAKES_PLACE_IN]-(fc:Farm_competition) WITH c, count(fc) AS counter ORDER BY counter DESC LIMIT 1 RETURN c.Status",
        "gql": "MATCH (c:City)<-[:TAKES_PLACE_IN]-(fc:Farm_competition) RETURN c, count(fc) AS counter ORDER BY counter DESC LIMIT 1 NEXT RETURN c.Status"
    },
    {
        "cypher": "MATCH (n:Actor) RETURN count(*)",
        "gql": "MATCH (n:Actor) RETURN count(*)"
    },
    {
        "cypher": "MATCH p=(a:Author{last_name:'Warnaar'})-[*]->(d:Report{report_no:'SFB 478 Geometrische Stukturen in der Mathematik, Muenster; Preprint   No. 73'}) RETURN count(p)",
        "gql": "MATCH (a:Author{last_name:'Warnaar'})-[]->{1,}(d:Report{report_no:'SFB 478 Geometrische Stukturen in der Mathematik, Muenster; Preprint   No. 73'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(review:Review) WITH b, count(review) AS reviewCount RETURN b.name AS businessName, reviewCount ORDER BY reviewCount DESC",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(review:Review) RETURN b, count(review) AS reviewCount NEXT RETURN b.name AS businessName, reviewCount ORDER BY reviewCount DESC"
    },
    {
        "cypher": "MATCH (c:Campus) WHERE c.Year < 1800 RETURN c.Campus",
        "gql": "MATCH (c:Campus) WHERE c.`Year` < 1800 RETURN c.Campus"
    },
    {
        "cypher": "MATCH (a:Adult) WHERE a.overview IS NOT NULL RETURN a.title, a.overview ORDER BY size(a.overview) DESC LIMIT 3",
        "gql": "MATCH (a:Adult) WHERE a.overview IS NOT NULL RETURN a.title, a.overview ORDER BY size(a.overview) DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User) WHERE u.betweenness IS NOT NULL RETURN u.profile_image_url ORDER BY u.betweenness DESC LIMIT 3",
        "gql": "MATCH (u:User) WHERE u.betweenness IS NOT NULL RETURN u.profile_image_url ORDER BY u.betweenness DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WITH m ORDER BY m.revenue DESC LIMIT 3 RETURN m.title, m.revenue",
        "gql": "MATCH (m:Movie) RETURN m ORDER BY m.revenue DESC LIMIT 3 NEXT RETURN m.title, m.revenue"
    },
    {
        "cypher": "MATCH (p:Product {productName: 'Chai'})-[:SUPPLIES]-(s:Supplier) MATCH (s)-[:SUPPLIES]-(otherProducts:Product) RETURN DISTINCT otherProducts.productName",
        "gql": "MATCH (p:`Product`{productName:'Chai'})-[:SUPPLIES]-(s:Supplier) MATCH (s)-[:SUPPLIES]-(otherProducts:`Product`) RETURN DISTINCT otherProducts.productName"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(:City {name: 'Seattle'}) MATCH (o)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN DISTINCT c.name",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(:City {name: 'Seattle'}) MATCH (o)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN DISTINCT c.name"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) WITH s MATCH (s)<-[:MODERATOR]-(u:User) RETURN avg(u.followers)",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language{name:'en'}) RETURN s NEXT MATCH (s)<-[:MODERATOR]-(u:User) RETURN avg(u.followers)"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '222'}]->(m) WHERE n.article_id='3082' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '222'}]->(m) WHERE n.article_id='3082' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: \"Neo4j\"}),       (t)-[:TAGS]->(:Hashtag) WITH avg(t.favorites) AS average_favorites RETURN average_favorites",
        "gql": "MATCH (t:Tweet)-[:MENTIONS]->(u:User{name:\"Neo4j\"}) RETURN avg(t.favorites) AS average_favorites NEXT RETURN average_favorites"
    },
    {
        "cypher": "MATCH (cartoon:Cartoon) WHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti' RETURN cartoon.Title",
        "gql": "MATCH (cartoon:Cartoon) WHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti' RETURN cartoon.Title"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) WITH c, count(DISTINCT e) AS originator_count ORDER BY originator_count DESC LIMIT 3 RETURN c.name AS country_name, originator_count",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c, count(e) AS originator_count ORDER BY originator_count DESC LIMIT 3 NEXT RETURN c.name AS country_name, originator_count"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released LIMIT 5",
        "gql": "MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released LIMIT 5"
    },
    {
        "cypher": "MATCH (n:UpdateDate) WHERE date(n.update_date).year = 2020 RETURN n.update_date",
        "gql": "MATCH (n:UpdateDate) WHERE n.update_date = 2020 RETURN n.update_date"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'}) MATCH (a:Answer)-[:ANSWERED]->(q) RETURN a.link, a.title, a.body_markdown, a.uuid ORDER BY a.uuid DESC LIMIT 3",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'}) MATCH (a:Answer)-[:ANSWERED]->(q) RETURN a.link, a.title, a.body_markdown, a.uuid ORDER BY a.uuid DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WITH s, COUNT(p) AS productCount ORDER BY productCount DESC LIMIT 3 RETURN s.companyName AS supplierName, productCount",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, COUNT(p) AS productCount ORDER BY productCount DESC LIMIT 3 NEXT RETURN s.companyName AS supplierName, productCount"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS3]->(c2:Character) WHERE r.weight = 95 RETURN c1.name AS Character1, c2.name AS Character2",
        "gql": "MATCH (c1:Character)-[r:INTERACTS3]->(c2:Character) WHERE r.weight = 95 RETURN c1.name AS Character1, c2.name AS Character2"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category) WITH c, COUNT(DISTINCT cat.categoryID) AS diversity ORDER BY diversity DESC LIMIT 3 RETURN c.companyName, diversity",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`)-[:ORDERS]->(p:`Product`)-[:PART_OF]->(cat:Category) RETURN c, COUNT(cat.categoryID) AS diversity ORDER BY diversity DESC LIMIT 3 NEXT RETURN c.companyName, diversity"
    },
    {
        "cypher": "MATCH (a:Author{affiliation:'Ohio State University'})-[*]->(d:Topic{label:'Topology_5'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Author{affiliation:'Ohio State University'})-[]->{1,}(d:Topic{label:'Topology_5'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Condiments'}) RETURN p.productName, p.quantityPerUnit ORDER BY p.quantityPerUnit DESC LIMIT 3",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Condiments'}) RETURN p.productName, p.quantityPerUnit ORDER BY p.quantityPerUnit DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '227' RETURN n.article_id AS article_id, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '227' RETURN n.article_id AS article_id, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) RETURN m.title, count(k) AS keyword_count ORDER BY keyword_count DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) RETURN m.title, count(k) AS keyword_count ORDER BY keyword_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'}) RETURN t",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'}) RETURN t"
    },
    {
        "cypher": "MATCH (u:User {label: 'curvylliptic.bsky.social'})-[:INTERACTED]->(interactedUser:User) RETURN interactedUser",
        "gql": "MATCH (u:User {label: 'curvylliptic.bsky.social'})-[:INTERACTED]->(interactedUser:User) RETURN interactedUser"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.popularity > 15 RETURN m.title, m.popularity",
        "gql": "MATCH (m:Movie) WHERE m.popularity > 15 RETURN m.title, m.popularity"
    },
    {
        "cypher": "MATCH (n:Article) -[:PUBLISHED_IN{meta: '222'}]->(m:Journal) WHERE m.title < date('2020-12-31') RETURN avg(m.name) AS avg_name",
        "gql": "MATCH (n:Article) -[:PUBLISHED_IN{meta: '222'}]->(m:Journal) WHERE m.title < date('2020-12-31') RETURN avg(m.name) AS avg_name"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag) WITH q, COUNT(t) AS tagCount ORDER BY tagCount DESC LIMIT 1 MATCH (u:User)-[:ASKED]->(q) RETURN u.display_name AS userName, q.title AS questionTitle, tagCount",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN q, COUNT(t) AS tagCount ORDER BY tagCount DESC LIMIT 1 NEXT MATCH (u:User)-[:ASKED]->(q) RETURN u.display_name AS userName, q.title AS questionTitle, tagCount"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Action'}) WITH m ORDER BY m.revenue DESC LIMIT 1 RETURN m.title",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Action'}) RETURN m ORDER BY m.revenue DESC LIMIT 1 NEXT RETURN m.title"
    },
    {
        "cypher": "MATCH (d:Director) WHERE d.died > date('2000-01-01') RETURN d.name, d.died ORDER BY d.died LIMIT 3",
        "gql": "MATCH (d:Director) WHERE d.died > date('2000-01-01') RETURN d.name, d.died ORDER BY d.died LIMIT 3"
    },
    {
        "cypher": "MATCH (d:Department) WHERE d.Room = \"268\" RETURN d.DPhone",
        "gql": "MATCH (d:Department) WHERE d.Room = \"268\" RETURN d.DPhone"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WITH c, count(p) AS productCount ORDER BY productCount DESC LIMIT 5 RETURN c.categoryName, productCount",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c, count(p) AS productCount ORDER BY productCount DESC LIMIT 5 NEXT RETURN c.categoryName, productCount"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) WHERE m.budget > 200000000 RETURN k.name AS keyword, COUNT(*) AS frequency ORDER BY frequency DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) WHERE m.budget > 200000000 RETURN k.name AS keyword, COUNT(*) AS frequency ORDER BY frequency DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'}) MATCH (p:Person)-[c:CAST_FOR]->(m) WHERE c.character IS NOT NULL RETURN DISTINCT p.name AS actor_name",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'}) MATCH (p:Person)-[c:CAST_FOR]->(m) WHERE c.character IS NOT NULL RETURN DISTINCT p.name AS actor_name"
    },
    {
        "cypher": "MATCH (n:Procedure) RETURN n.Name, n.Cost ORDER BY n.Cost DESC",
        "gql": "MATCH (n:`Procedure`) RETURN n.Name, n.Cost ORDER BY n.Cost DESC"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.community = 584 RETURN avg(c.louvain)",
        "gql": "MATCH (c:Character) WHERE c.community = 584 RETURN avg(c.louvain)"
    },
    {
        "cypher": "MATCH (n:Article), (:Author {last_name: 'Burnol'}) WHERE NOT (n) --> (:Author) RETURN n.title",
        "gql": "MATCH (n:Article), (:Author {last_name: 'Burnol'}) WHERE NOT (n) --> (:Author) RETURN n.title"
    },
    {
        "cypher": "MATCH (T1:Gymnast) WHERE T1.Total_Points > 57.5 MATCH (T2:Person {People_ID: T1.Gymnast_ID}) RETURN DISTINCT T2.Hometown",
        "gql": "MATCH (T1:Gymnast) WHERE T1.Total_Points > 57.5 MATCH (T2:Person {People_ID: T1.Gymnast_ID}) RETURN DISTINCT T2.Hometown"
    },
    {
        "cypher": "MATCH (a:UpdateDate{update_date:'2007-05-23'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:UpdateDate{update_date:'2007-05-23'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (n:Categories), (:Report {report_id: '3fa3ec8100d88908b00d139dacdedb6a'}) WHERE NOT (n) --> (:Report) RETURN n.specifications",
        "gql": "MATCH (n:Categories), (:Report {report_id: '3fa3ec8100d88908b00d139dacdedb6a'}) WHERE NOT (n) --> (:Report) RETURN n.specifications"
    },
    {
        "cypher": "MATCH (u1:User)-[:POSTS]->(t1:Tweet)-[:REPLY_TO]->(t2:Tweet)<-[:POSTS]-(u2:User) WHERE u1 <> u2 RETURN u1.screen_name AS User1, u2.screen_name AS User2, COUNT(*) AS Replies ORDER BY Replies DESC LIMIT 1",
        "gql": "MATCH (u1:User)-[:POSTS]->(t1:Tweet)-[:REPLY_TO]->(t2:Tweet)<-[:POSTS]-(u2:User) WHERE u1 <> u2 RETURN u1.screen_name AS User1, u2.screen_name AS User2, COUNT(*) AS Replies ORDER BY Replies DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (p:Person)-[:WROTE]->(:Movie) RETURN p.name, p.born ORDER BY p.born DESC LIMIT 5",
        "gql": "MATCH (p:Person)-[:WROTE]->(:Movie) RETURN p.name, p.born ORDER BY p.born DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Character) UNWIND c.fastrf_embedding AS embedding WITH c, embedding WHERE embedding > 1.0 RETURN DISTINCT c.name",
        "gql": "MATCH (c:Character) RETURN c, embedding NEXT RETURN DISTINCT c.name"
    },
    {
        "cypher": "MATCH (a:Author) WHERE a.lname = \"Ueno\" RETURN a.fname",
        "gql": "MATCH (a:Author) WHERE a.lname = \"Ueno\" RETURN a.fname"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'}) WHERE q.score > -1 RETURN q.text",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'}) WHERE q.score > -1 RETURN q.text"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue IS NOT NULL AND m.budget IS NOT NULL RETURN m.title, m.revenue, m.budget, (m.revenue - m.budget) AS profit ORDER BY profit DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.revenue IS NOT NULL AND m.budget IS NOT NULL RETURN m.title, m.revenue, m.budget, (m.revenue - m.budget) AS profit ORDER BY profit DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (r:Review) RETURN min(r.date) AS oldestReviewDate",
        "gql": "MATCH (r:Review) RETURN min(r.`date`) AS oldestReviewDate"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country {name: 'United States of America'}) WHERE o.nbrEmployees > 10000 RETURN o.name AS organization, o.nbrEmployees AS numberOfEmployees",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country {name: 'United States of America'}) WHERE o.nbrEmployees > 10000 RETURN o.name AS organization, o.nbrEmployees AS numberOfEmployees"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.comments <> '18 pages, latex2e with amsfonts. Final version, accepted for   publication' RETURN DISTINCT n.abstract AS abstract",
        "gql": "MATCH (n:Article) WHERE n.comments <> '18 pages, latex2e with amsfonts. Final version, accepted for   publication' RETURN DISTINCT n.`abstract` AS `abstract`"
    },
    {
        "cypher": "MATCH (t1:Course)-[:TAUGHT_BY]->(t2:Faculty) WHERE t1.CName = \"COMPUTER LITERACY\" RETURN t2.Fname, t2.Lname",
        "gql": "MATCH (t1:Course)-[:TAUGHT_BY]->(t2:Faculty) WHERE t1.CName = \"COMPUTER LITERACY\" RETURN t2.Fname, t2.Lname"
    },
    {
        "cypher": "MATCH (a:Article{comments:'Only one change to previous version: ref. [62] misnumbering was fixed   on request to the cited author'})-[:PUBLISHED_IN]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{comments:'Only one change to previous version: ref. [62] misnumbering was fixed   on request to the cited author'})-[:PUBLISHED_IN]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (c:Character)-[:INTERACTS45]->(target:Character {name: 'Walder-Rivers'}) RETURN c.name LIMIT 3",
        "gql": "MATCH (c:Character)-[:INTERACTS45]->(target:Character {name: 'Walder-Rivers'}) RETURN c.name LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.struck_off_date = '15-FEB-2013' RETURN e.name AS entity_name, e.struck_off_date AS struck_off_date",
        "gql": "MATCH (e:Entity) WHERE e.struck_off_date = '15-FEB-2013' RETURN e.name AS entity_name, e.struck_off_date AS struck_off_date"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster <> '5' RETURN DISTINCT n.label AS label",
        "gql": "MATCH (n:Topic) WHERE n.cluster <> '5' RETURN DISTINCT n.label AS label"
    },
    {
        "cypher": "MATCH (e:Entity)<-[:officer_of]-(o:Officer) WHERE o.country_codes = 'WSM' MATCH (e)-[:registered_address]->(a:Address) WHERE a.country_codes = 'WSM' RETURN DISTINCT e",
        "gql": "MATCH (e:Entity)<-[:officer_of]-(o:Officer) WHERE o.country_codes = 'WSM' MATCH (e)-[:registered_address]->(a:Address) WHERE a.country_codes = 'WSM' RETURN DISTINCT e"
    },
    {
        "cypher": "MATCH (a:Article {id: \"ART166907382137\"}) RETURN a.date",
        "gql": "MATCH (a:Article{id:\"ART166907382137\"}) RETURN a.`date`"
    },
    {
        "cypher": "MATCH (s:Station) RETURN s.Name, s.Main_Services ORDER BY s.Total_Passengers DESC LIMIT 3",
        "gql": "MATCH (s:Station) RETURN s.Name, s.Main_Services ORDER BY s.Total_Passengers DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Zootown Brew'}) RETURN u.name AS userName, r.stars AS starRating",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Zootown Brew'}) RETURN u.name AS userName, r.stars AS starRating"
    },
    {
        "cypher": "MATCH (s:Sensor)-[d:DETECTS]->(p:Pollutant {name: 'SO2'}) RETURN d.date AS date, s.name AS sensor ORDER BY d.value DESC LIMIT 1",
        "gql": "MATCH (s:Sensor)-[d:DETECTS]->(p:Pollutant{name:'SO2'}) RETURN d.`date` AS `date`, s.name AS sensor ORDER BY d.`value` DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Author{author_id:'a7193c11b0713ccfbb34c90cf18d3e5f'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Author{author_id:'a7193c11b0713ccfbb34c90cf18d3e5f'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (s:Software)-[:VERSION]->(v:Version {name: \"7.1\"}) WITH DISTINCT s RETURN count(s)",
        "gql": "MATCH (s:Software)-[:VERSION]->(v:Version{name:\"7.1\"}) RETURN DISTINCT s NEXT RETURN count(s)"
    },
    {
        "cypher": "MATCH (a:Article{abstract:'  Local asymptotic minimax risk bounds in a locally asymptotically mixture of normal family of distributions have been investigated under asymmetric loss functions and the asymptotic distribution of the optimal estimator that attains the bound has been obtained. '})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{`abstract`:'  Local asymptotic minimax risk bounds in a locally asymptotically mixture of normal family of distributions have been investigated under asymmetric loss functions and the asymptotic distribution of the optimal estimator that attains the bound has been obtained. '})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (a:Article {article_id:'1048'})-[:PUBLISHED_IN {year: '2004'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{article_id:'1048'})-[:PUBLISHED_IN{`year`:'2004'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Sci-Fi'}) RETURN d",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Sci-Fi'}) RETURN d"
    },
    {
        "cypher": "MATCH (f:Faculty) WHERE f.Building = \"Barton\" RETURN f.Lname ORDER BY f.Lname",
        "gql": "MATCH (f:Faculty) WHERE f.Building = \"Barton\" RETURN f.Lname ORDER BY f.Lname"
    },
    {
        "cypher": "MATCH (actor:Person)-[:ACTED_IN]->(:Movie) OPTIONAL MATCH (follower:Person)-[:FOLLOWS]->(actor) WITH actor, COUNT(follower) AS followerCount RETURN actor.name AS actorName, followerCount ORDER BY followerCount DESC LIMIT 3",
        "gql": "MATCH (actor:Person)-[:ACTED_IN]->(:Movie) MATCH (follower:Person)-[:FOLLOWS]->(actor) RETURN actor, COUNT(follower) AS followerCount NEXT RETURN actor.name AS actorName, followerCount ORDER BY followerCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH p=(a:Journal{journal_id:'904b65f98bb6823aaf3f72721984560a'})-[*]->(d:Author{last_name:'Chakrabarti'}) RETURN count(p)",
        "gql": "MATCH (a:Journal{journal_id:'904b65f98bb6823aaf3f72721984560a'})-[]->{1,}(d:Author{last_name:'Chakrabarti'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:RATED]-(u:User) WITH m, count(u) AS userCount WHERE userCount > 500000 RETURN m ORDER BY userCount DESC LIMIT 5",
        "gql": "MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, count(u) AS userCount NEXT RETURN m ORDER BY userCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Categories), (:Journal {name: 'J. Number Theory'}) WHERE NOT (n) --> (:Journal) RETURN n.category_id",
        "gql": "MATCH (n:Categories), (:Journal {name: 'J. Number Theory'}) WHERE NOT (n) --> (:Journal) RETURN n.category_id"
    },
    {
        "cypher": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WHERE m.revenue > 100000000 RETURN l.name, COUNT(*) AS movie_count ORDER BY movie_count DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WHERE m.revenue > 100000000 RETURN l.name, COUNT(*) AS movie_count ORDER BY movie_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.nbrEmployees > 100 RETURN o",
        "gql": "MATCH (o:Organization) WHERE o.nbrEmployees > 100 RETURN o"
    },
    {
        "cypher": "MATCH (e:Egress {name: 'DC1-RE'})-[:ROUTES]->(i:Interface) RETURN i LIMIT 3",
        "gql": "MATCH (e:Egress {name: 'DC1-RE'})-[:ROUTES]->(i:Interface) RETURN i LIMIT 3"
    },
    {
        "cypher": "MATCH (T1:flights)-[]-(T2:airports)-[]-(T3:airports) WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen' RETURN count(*)",
        "gql": "MATCH (T1:flights)-[]-(T2:airports)-[]-(T3:airports) WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen' RETURN count(*)"
    },
    {
        "cypher": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Area ASC LIMIT 1",
        "gql": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Area ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN s.name AS stream, count(l) AS num_languages ORDER BY num_languages DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN s.name AS stream, count(l) AS num_languages ORDER BY num_languages DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 1000000 RETURN f",
        "gql": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 1000000 RETURN f"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.runtime < 90 WITH d, count(m) AS moviesDirected ORDER BY moviesDirected DESC LIMIT 5 RETURN d.name, moviesDirected",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.runtime < 90 RETURN d, count(m) AS moviesDirected ORDER BY moviesDirected DESC LIMIT 5 NEXT RETURN d.name, moviesDirected"
    },
    {
        "cypher": "MATCH (m:Movie {title: \"Underneath\"})-[:IN_GENRE]->(g:Genre) RETURN g.name",
        "gql": "MATCH (m:Movie {title: \"Underneath\"})-[:IN_GENRE]->(g:Genre) RETURN g.name"
    },
    {
        "cypher": "MATCH (fc:Farm_competition) WHERE fc.Theme <> 'Aliens' RETURN fc.Hosts",
        "gql": "MATCH (fc:Farm_competition) WHERE fc.Theme <> 'Aliens' RETURN fc.Hosts"
    },
    {
        "cypher": "MATCH (e:Employee) WHERE e.Employee_Name = \"Ebba\" RETURN e.Employee_ID",
        "gql": "MATCH (e:Employee) WHERE e.Employee_Name = \"Ebba\" RETURN e.Employee_ID"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.originator_bank_country = 'Singapore' AND f.beneficiary_bank_country = 'United Kingdom' RETURN count(f) AS number_of_filings",
        "gql": "MATCH (f:Filing) WHERE f.originator_bank_country = 'Singapore' AND f.beneficiary_bank_country = 'United Kingdom' RETURN count(f) AS number_of_filings"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WITH d, size(collect(distinct m.countries)) AS numCountries ORDER BY numCountries DESC LIMIT 3 RETURN d.name AS director, numCountries AS numberOfCountries",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d, size(m.countries) AS numCountries ORDER BY numCountries DESC LIMIT 3 NEXT RETURN d.name AS director, numCountries AS numberOfCountries"
    },
    {
        "cypher": "MATCH (e:Event) RETURN count(e)",
        "gql": "MATCH (e:Event) RETURN count(e)"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank_country = 'Angola' RETURN e.name AS beneficiary",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank_country = 'Angola' RETURN e.name AS beneficiary"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE size(m.countries) > 5 RETURN m LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE size(m.countries) > 5 RETURN m LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, q.createdAt AS QuestionDate ORDER BY q.createdAt DESC LIMIT 5",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, q.createdAt AS QuestionDate ORDER BY q.createdAt DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue > 500000000 AND m.imdbRating > 8.0 RETURN m.title AS MovieTitle, m.revenue AS Revenue, m.imdbRating AS IMDbRating",
        "gql": "MATCH (m:Movie) WHERE m.revenue > 500000000 AND m.imdbRating > 8.0 RETURN m.title AS MovieTitle, m.revenue AS Revenue, m.imdbRating AS IMDbRating"
    },
    {
        "cypher": "MATCH (n:Journal) WHERE n.journal_id <> 'd3b321ed42589ea798c241aa7de23d2d' RETURN DISTINCT n.name AS name",
        "gql": "MATCH (n:Journal) WHERE n.journal_id <> 'd3b321ed42589ea798c241aa7de23d2d' RETURN DISTINCT n.name AS name"
    },
    {
        "cypher": "MATCH (b:Business {name: 'Neo4j'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name LIMIT 3",
        "gql": "MATCH (b:Business {name: 'Neo4j'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.isPublic = true AND o.nbrEmployees > 500 RETURN o.name AS organization, o.nbrEmployees AS employeeCount ORDER BY o.nbrEmployees DESC LIMIT 3",
        "gql": "MATCH (o:Organization) WHERE o.isPublic = true AND o.nbrEmployees > 500 RETURN o.name AS organization, o.nbrEmployees AS employeeCount ORDER BY o.nbrEmployees DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (j:Journal)-[:EDited_BY]->(e:Editor) RETURN e.Name, j.Theme",
        "gql": "MATCH (j:Journal)-[:EDited_BY]->(e:Editor) RETURN e.Name, j.Theme"
    },
    {
        "cypher": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician), (T1)-[:ASSIGNED_TO]->(T2:Machine) RETURN T3.Name, T2.Machine_series",
        "gql": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician), (T1)-[:ASSIGNED_TO]->(T2:Machine) RETURN T3.Name, T2.Machine_series"
    },
    {
        "cypher": "MATCH (c:Country {name: 'China'})<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing) RETURN SUM(f.amount) AS total_amount",
        "gql": "MATCH (c:Country {name: 'China'})<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing) RETURN SUM(f.amount) AS total_amount"
    },
    {
        "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) WITH u, count(s) AS moderated_streams ORDER BY moderated_streams DESC LIMIT 5 RETURN u.name, moderated_streams",
        "gql": "MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language{name:'en'}) RETURN u, count(s) AS moderated_streams ORDER BY moderated_streams DESC LIMIT 5 NEXT RETURN u.name, moderated_streams"
    },
    {
        "cypher": "MATCH (a:Authorhip)-[:WRITES]->(p:Paper), (a:Authorhip)-[:WRITTEN_BY]->(au:Author), (a:Authorhip)-[:AFFILIATED_WITH]->(i:Inst) WHERE i.name = \"Google\" RETURN DISTINCT p.title",
        "gql": "MATCH (a:Authorhip)-[:WRITES]->(p:Paper), (a:Authorhip)-[:WRITTEN_BY]->(au:Author), (a:Authorhip)-[:AFFILIATED_WITH]->(i:Inst) WHERE i.name = \"Google\" RETURN DISTINCT p.title"
    },
    {
        "cypher": "MATCH (org:Organization)<-[:MENTIONS]-(article:Article) WHERE org.revenue > 1E9 RETURN article.title",
        "gql": "MATCH (org:Organization)<-[:MENTIONS]-(article:Article) WHERE org.revenue > 1E9 RETURN article.title"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag) WITH t, count(q) AS questionCount WHERE questionCount > 5 RETURN t.name AS tagName, questionCount",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN t, count(q) AS questionCount NEXT RETURN t.name AS tagName, questionCount"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.beneficiary_iso = 'GBR' RETURN f ORDER BY f.begin LIMIT 3",
        "gql": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.beneficiary_iso = 'GBR' RETURN f ORDER BY f.begin LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stadium) WHERE s.Country <> \"Russia\" RETURN count(*)",
        "gql": "MATCH (s:Stadium) WHERE s.Country <> \"Russia\" RETURN count(*)"
    },
    {
        "cypher": "MATCH (courses:Courses) WHERE courses.course_name = 'math' RETURN courses.course_description",
        "gql": "MATCH (courses:Courses) WHERE courses.course_name = 'math' RETURN courses.course_description"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Headquarters <> 'USA' RETURN c.name",
        "gql": "MATCH (c:Company) WHERE c.Headquarters <> 'USA' RETURN c.name"
    },
    {
        "cypher": "MATCH (jaime:Character { name: 'Jaime-Lannister' })-[:INTERACTS45]->(other) RETURN other.name",
        "gql": "MATCH (jaime:Character { name: 'Jaime-Lannister' })-[:INTERACTS45]->(other) RETURN other.name"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Sci-Fi'}) WHERE m.revenue IS NOT NULL RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Sci-Fi'}) WHERE m.revenue IS NOT NULL RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (e:Entity)-[r:officer_of]->(o:Officer) WHERE r.start_date <= '1999' RETURN e, r, o",
        "gql": "MATCH (e:Entity)-[r:officer_of]->(o:Officer) WHERE r.start_date <= '1999' RETURN e, r, o"
    },
    {
        "cypher": "MATCH (a:Adult) WHERE a.budget > 0 AND a.revenue > 0 RETURN a.title, a.revenue, a.budget, (a.revenue / a.budget) AS efficiency ORDER BY efficiency DESC LIMIT 3",
        "gql": "MATCH (a:Adult) WHERE a.budget > 0 AND a.revenue > 0 RETURN a.title, a.revenue, a.budget, (a.revenue / a.budget) AS efficiency ORDER BY efficiency DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie {title: 'The Matrix'}) RETURN p.name",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie {title: 'The Matrix'}) RETURN p.name"
    },
    {
        "cypher": "MATCH (a:Categories{specifications:'math.CA'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Categories{specifications:'math.CA'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (c:Character {name: 'Aegon-V-Targaryen'}) RETURN c.community",
        "gql": "MATCH (c:Character {name: 'Aegon-V-Targaryen'}) RETURN c.community"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 6 OR n.cluster < 10 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 6 OR n.cluster < 10 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p) RETURN p.name, m.title, a.roles, r.summary, r.rating",
        "gql": "MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p) RETURN p.name, m.title, a.roles, r.summary, r.rating"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.author_id = 'fd6fcf9374c7e5fd0377800da5e8f846' OR n.last_name IS NOT NULL RETURN DISTINCT n.last_name AS last_name",
        "gql": "MATCH (n:Author) WHERE n.author_id = 'fd6fcf9374c7e5fd0377800da5e8f846' OR n.last_name IS NOT NULL RETURN DISTINCT n.last_name AS last_name"
    },
    {
        "cypher": "MATCH (c:Campus)<-[:TEACHES]-(f:Faculty) WHERE f.Year = 2003 RETURN c.Campus ORDER BY f.Faculty DESC LIMIT 1",
        "gql": "MATCH (c:Campus)<-[:TEACHES]-(f:Faculty) WHERE f.`Year` = 2003 RETURN c.Campus ORDER BY f.Faculty DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (d:Document) WHERE d.document_id = 1 MATCH (ds:RefDocumentStatu) WHERE ds.document_status_code = d.document_status_code RETURN ds.document_status_description LIMIT 1",
        "gql": "MATCH (d:Document) WHERE d.document_id = 1 MATCH (ds:RefDocumentStatu) WHERE ds.document_status_code = d.document_status_code RETURN ds.document_status_description LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue > m.budget RETURN m.title AS MovieTitle, m.revenue AS Revenue, m.budget AS Budget",
        "gql": "MATCH (m:Movie) WHERE m.revenue > m.budget RETURN m.title AS MovieTitle, m.revenue AS Revenue, m.budget AS Budget"
    },
    {
        "cypher": "MATCH (r:Role) RETURN r.Role_Code AS role_code, r.Role_Name AS role_name, r.Role_Description AS role_description",
        "gql": "MATCH (r:Role) RETURN r.Role_Code AS role_code, r.Role_Name AS role_name, r.Role_Description AS role_description"
    },
    {
        "cypher": "MATCH (c:Country)<-[:IN_COUNTRY]-(city:City)<-[:IN_CITY]-(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: 'Electronic Products Manufacturers'}) RETURN c.name AS country, count(o) AS num_orgs ORDER BY num_orgs DESC LIMIT 3",
        "gql": "MATCH (c:Country)<-[:IN_COUNTRY]-(city:City)<-[:IN_CITY]-(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: 'Electronic Products Manufacturers'}) RETURN c.name AS country, count(o) AS num_orgs ORDER BY num_orgs DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.imdbRating > 7.0 RETURN m.title, m.budget, m.imdbRating ORDER BY m.budget ASC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.imdbRating > 7.0 RETURN m.title, m.budget, m.imdbRating ORDER BY m.budget ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WITH pc, count(DISTINCT l) AS languages_count WHERE languages_count > 3 RETURN pc.name, languages_count ORDER BY languages_count DESC LIMIT 3",
        "gql": "MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN pc, count(l) AS languages_count NEXT RETURN pc.name, languages_count ORDER BY languages_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE o.nbrEmployees > 50 RETURN a LIMIT 3",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE o.nbrEmployees > 50 RETURN a LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Actor) RETURN a.Character ORDER BY a.age DESC",
        "gql": "MATCH (a:Actor) RETURN a.Character ORDER BY a.age DESC"
    },
    {
        "cypher": "MATCH (egress:Egress {name: \"DC1-RE\"})-[:ROUTES]->(interface:Interface) RETURN interface",
        "gql": "MATCH (egress:Egress {name: \"DC1-RE\"})-[:ROUTES]->(interface:Interface) RETURN interface"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.score < 0 RETURN q.title, q.score, q.link ORDER BY q.score ASC LIMIT 3",
        "gql": "MATCH (q:Question) WHERE q.score < 0 RETURN q.title, q.score, q.link ORDER BY q.score ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title AS title, m.released AS release_year, m.votes AS votes ORDER BY m.votes ASC LIMIT 5",
        "gql": "MATCH (m:Movie) RETURN m.title AS title, m.released AS release_year, m.votes AS votes ORDER BY m.votes ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.revenue > 1000000 WITH c, count(o) AS orgCount ORDER BY orgCount DESC RETURN c.name AS cityName, orgCount LIMIT 1",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.revenue > 1000000 RETURN c, count(o) AS orgCount ORDER BY orgCount DESC NEXT RETURN c.name AS cityName, orgCount LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Topic{description:'Focusing on techniques and concepts related to transformations, solutions, and properties of linear equations and matrices, including Jordan normal form, eigenvalues, eigenvectors, diagonalization, and eigenformulations.'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Topic{description:'Focusing on techniques and concepts related to transformations, solutions, and properties of linear equations and matrices, including Jordan normal form, eigenvalues, eigenvectors, diagonalization, and eigenformulations.'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (f:Faculty) WHERE f.Building = \"Barton\" RETURN f.Lname ORDER BY f.Lname",
        "gql": "MATCH (f:Faculty) WHERE f.Building = \"Barton\" RETURN f.Lname ORDER BY f.Lname"
    },
    {
        "cypher": "MATCH (p:Product) WHERE p.unitsOnOrder > 20 RETURN p",
        "gql": "MATCH (p:`Product`) WHERE p.unitsOnOrder > 20 RETURN p"
    },
    {
        "cypher": "MATCH p=(a:Topic{cluster:'10'})-[*]->(d:Author{last_name:'Burnol'}) RETURN count(p)",
        "gql": "MATCH (a:Topic{cluster:'10'})-[]->{1,}(d:Author{last_name:'Burnol'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.createdAt IS NOT NULL RETURN g.name AS Game, s.createdAt AS StreamCreationDate ORDER BY s.createdAt ASC LIMIT 1",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.createdAt IS NOT NULL RETURN g.name AS Game, s.createdAt AS StreamCreationDate ORDER BY s.createdAt ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (e:Entity {name: 'TIANSHENG INDUSTRY AND TRADING CO., LTD.'})-[:officer_of]->(o:Officer) RETURN o",
        "gql": "MATCH (e:Entity {name: 'TIANSHENG INDUSTRY AND TRADING CO., LTD.'})-[:officer_of]->(o:Officer) RETURN o"
    },
    {
        "cypher": "MATCH (o:Order)-[r:ORDERS]->(p:Product) WITH o, sum(r.quantity) AS totalQuantityPerOrder RETURN avg(totalQuantityPerOrder) AS averageQuantityPerOrder",
        "gql": "MATCH (o:`Order`)-[r:ORDERS]->(p:`Product`) RETURN o, sum(r.quantity) AS totalQuantityPerOrder NEXT RETURN avg(totalQuantityPerOrder) AS averageQuantityPerOrder"
    },
    {
        "cypher": "MATCH (a:UpdateDate{update_date:'2008-01-29'})-[*]->(d:Journal{name:'Journal of Mathematical Logic'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:UpdateDate{update_date:'2008-01-29'})-[]->{1,}(d:Journal{name:'Journal of Mathematical Logic'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars >= 3.5 RETURN DISTINCT b.name, b.address, b.city, b.state",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars >= 3.5 RETURN DISTINCT b.name, b.address, b.city, b.state"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget = 30000000 RETURN m.title LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.budget = 30000000 RETURN m.title LIMIT 3"
    },
    {
        "cypher": "MATCH (a:AttributeDefinition) WHERE a.attribute_name = \"Green\" RETURN a.attribute_data_type",
        "gql": "MATCH (a:AttributeDefinition) WHERE a.attribute_name = \"Green\" RETURN a.attribute_data_type"
    },
    {
        "cypher": "MATCH (p:ProductionCompany {name: 'Lucasfilm'})<-[:PRODUCED_BY]-(m:Movie) RETURN m.title ORDER BY m.popularity DESC LIMIT 3",
        "gql": "MATCH (p:ProductionCompany {name: 'Lucasfilm'})<-[:PRODUCED_BY]-(m:Movie) RETURN m.title ORDER BY m.popularity DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (f:Farm) WHERE f.Total_Horses > 5000 RETURN avg(f.Working_Horses)",
        "gql": "MATCH (f:Farm) WHERE f.Total_Horses > 5000 RETURN avg(f.Working_Horses)"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:RATED]-(u:User) WITH m, COUNT(u) AS ratingCount WHERE ratingCount = 5 RETURN m.title AS MovieTitle, ratingCount LIMIT 3",
        "gql": "MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, COUNT(u) AS ratingCount NEXT RETURN m.title AS MovieTitle, ratingCount LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.runtime > 180 RETURN m.title AS MovieTitle, m.runtime AS Runtime",
        "gql": "MATCH (m:Movie) WHERE m.runtime > 180 RETURN m.title AS MovieTitle, m.runtime AS Runtime"
    },
    {
        "cypher": "MATCH (q:Question)-[:ANSWERED]-(a:Answer) WHERE a.is_accepted = true RETURN q.title AS question_title, q.view_count AS view_count, q.link AS question_link ORDER BY q.view_count DESC LIMIT 3",
        "gql": "MATCH (q:Question)-[:ANSWERED]-(a:Answer) WHERE a.is_accepted = true RETURN q.title AS question_title, q.view_count AS view_count, q.link AS question_link ORDER BY q.view_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (dl:DocumentLocation) RETURN dl.Location_Code, dl.Date_in_Location_From, dl.Date_in_Locaton_To",
        "gql": "MATCH (dl:DocumentLocation) RETURN dl.Location_Code, dl.Date_in_Location_From, dl.Date_in_Locaton_To"
    },
    {
        "cypher": "MATCH (a:Article) RETURN a.title, a.sentiment ORDER BY a.sentiment DESC LIMIT 5",
        "gql": "MATCH (a:Article) RETURN a.title, a.sentiment ORDER BY a.sentiment DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.originator_bank = 'Barclays Bank Plc' WITH e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 3 RETURN e.name, filingsCount",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.originator_bank = 'Barclays Bank Plc' RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 3 NEXT RETURN e.name, filingsCount"
    },
    {
        "cypher": "MATCH (Person:Person) WHERE Person.Height > 200 OR Person.Height < 190 RETURN Person.Name",
        "gql": "MATCH (Person:Person) WHERE Person.Height > 200 OR Person.Height < 190 RETURN Person.Name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m.title ORDER BY m.imdbRating DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m.title ORDER BY m.imdbRating DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.size <> 1.5 WITH u1.size AS interactingUserSize RETURN sum(interactingUserSize) AS totalSize",
        "gql": "MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.`size` <> 1.5 RETURN u1.`size` AS interactingUserSize NEXT RETURN sum(interactingUserSize) AS totalSize"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '247' RETURN n.comments AS comments, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '247' RETURN n.comments AS comments, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (p:Package) RETURN p ORDER BY p.price DESC LIMIT 3",
        "gql": "MATCH (p:Package) RETURN p ORDER BY p.price DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (target:Character {name: \"Aemon-Targaryen-(Maester-Aemon)\"}) MATCH (target)-[:INTERACTS45]->(other:Character) WITH other ORDER BY other.book45PageRank ASC LIMIT 10 RETURN other.name AS character_name, other.book45PageRank AS page_rank",
        "gql": "MATCH (target:Character{name:\"Aemon-Targaryen-(Maester-Aemon)\"}) MATCH (target)-[:INTERACTS45]->(other:Character) RETURN other ORDER BY other.book45PageRank ASC LIMIT 10 NEXT RETURN other.name AS character_name, other.book45PageRank AS page_rank"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country {name: 'Italy'}) MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN p.name AS boardMember LIMIT 3",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country {name: 'Italy'}) MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN p.name AS boardMember LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person), (o)-[:HAS_BOARD_MEMBER]->(bm:Person) WHERE ceo.name = bm.name RETURN o LIMIT 3",
        "gql": "MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person), (o)-[:HAS_BOARD_MEMBER]->(bm:Person) WHERE ceo.name = bm.name RETURN o LIMIT 3"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) WHERE r.weight > 200 RETURN c1.name, c2.name, r.weight",
        "gql": "MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) WHERE r.weight > 200 RETURN c1.name, c2.name, r.weight"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization {isPublic: true}) RETURN a.title AS article, o.name AS organization ORDER BY a.date DESC LIMIT 3",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization{isPublic:true}) RETURN a.title AS article, o.name AS organization ORDER BY a.`date` DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business {city: \"Missoula\"})-[:IN_CATEGORY]->(c:Category) WITH c, count(b) AS businessCount ORDER BY businessCount DESC RETURN c.name AS category, businessCount LIMIT 1",
        "gql": "MATCH (b:Business{city:\"Missoula\"})-[:IN_CATEGORY]->(c:Category) RETURN c, count(b) AS businessCount ORDER BY businessCount DESC NEXT RETURN c.name AS category, businessCount LIMIT 1"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) RETURN c.name, count(b) AS num_businesses ORDER BY num_businesses DESC LIMIT 3",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) RETURN c.name, count(b) AS num_businesses ORDER BY num_businesses DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.nbrEmployees > 100 AND o.isDissolved = false RETURN o.name, o.nbrEmployees ORDER BY o.nbrEmployees DESC LIMIT 5",
        "gql": "MATCH (o:Organization) WHERE o.nbrEmployees > 100 AND o.isDissolved = false RETURN o.name, o.nbrEmployees ORDER BY o.nbrEmployees DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id <> '1056' RETURN DISTINCT n.title AS title",
        "gql": "MATCH (n:Article) WHERE n.article_id <> '1056' RETURN DISTINCT n.title AS title"
    },
    {
        "cypher": "MATCH (d:Director) WHERE d.bornIn = \"USA\" RETURN d.name, d.born, d.died, d.url, d.imdbId, d.tmdbId",
        "gql": "MATCH (d:Director) WHERE d.bornIn = \"USA\" RETURN d.name, d.born, d.died, d.url, d.imdbId, d.tmdbId"
    },
    {
        "cypher": "MATCH (:Order)-[o:ORDERS]->(p:Product)-[:PART_OF]->(c:Category) WITH c.categoryName as categoryName, sum(o.quantity) as totalQuantity RETURN categoryName, max(totalQuantity) AS maxTotalQuantity",
        "gql": "MATCH (:`Order`)-[o:ORDERS]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS categoryName, sum(o.quantity) AS totalQuantity NEXT RETURN categoryName, max(totalQuantity) AS maxTotalQuantity"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.revenue > 500000000 RETURN a.name LIMIT 3",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.revenue > 500000000 RETURN a.name LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Storm)-[:AFFECTS]->(r:Region) RETURN s.Name, count(*)",
        "gql": "MATCH (s:Storm)-[:AFFECTS]->(r:Region) RETURN s.Name, count(*)"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN singer.Citizenship ORDER BY singer.Citizenship DESC LIMIT 1",
        "gql": "MATCH (singer:singer) RETURN singer.Citizenship ORDER BY singer.Citizenship DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany {name: 'Pixar Animation Studios'}) RETURN m.title",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany {name: 'Pixar Animation Studios'}) RETURN m.title"
    },
    {
        "cypher": "MATCH (a:Actor) RETURN a.Duration ORDER BY a.Age DESC LIMIT 1",
        "gql": "MATCH (a:Actor) RETURN a.`Duration` ORDER BY a.Age DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.name ORDER BY c.Market_Value_billion DESC",
        "gql": "MATCH (c:Company) RETURN c.name ORDER BY c.Market_Value_billion DESC"
    },
    {
        "cypher": "MATCH (o:Organization {name: \"Neo4j\"})-[:HAS_CEO]->(p:Person) RETURN p.name AS CEOName",
        "gql": "MATCH (o:Organization {name: \"Neo4j\"})-[:HAS_CEO]->(p:Person) RETURN p.name AS CEOName"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN singer.Name,singer.Country,singer.Age ORDER BY singer.Age DESC",
        "gql": "MATCH (singer:singer) RETURN singer.Name,singer.Country,singer.Age ORDER BY singer.Age DESC"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: \"Seafood\"}) WITH c, count(p) AS products_ordered ORDER BY products_ordered DESC LIMIT 3 RETURN c.companyName, products_ordered",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`)-[:ORDERS]->(p:`Product`)-[:PART_OF]->(cat:Category{categoryName:\"Seafood\"}) RETURN c, count(p) AS products_ordered ORDER BY products_ordered DESC LIMIT 3 NEXT RETURN c.companyName, products_ordered"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.description  IS NOT NULL AND n.cluster > 2 RETURN n.description AS description, n.cluster AS cluster ORDER BY cluster DESC",
        "gql": "MATCH (n:Topic) WHERE n.description  IS NOT NULL AND n.cluster > 2 RETURN n.description AS description, n.cluster AS cluster ORDER BY cluster DESC"
    },
    {
        "cypher": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.key_id='0e45607b74a52b79f39c242abf265272' RETURN m.label",
        "gql": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.key_id='0e45607b74a52b79f39c242abf265272' RETURN m.label"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WITH g, count(m) AS movieCount WHERE movieCount > 50 RETURN g.name AS Genre, movieCount ORDER BY movieCount DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g, count(m) AS movieCount NEXT RETURN g.name AS Genre, movieCount ORDER BY movieCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)<-[:FOLLOWS]-(follower:User) WHERE u.name = \"David\" RETURN follower.name AS name",
        "gql": "MATCH (u:User)<-[:FOLLOWS]-(follower:User) WHERE u.name = \"David\" RETURN follower.name AS name"
    },
    {
        "cypher": "MATCH (f:Filing)-[:CONCERNS|:ORIGINATOR|:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {code: 'CHN'}) RETURN f",
        "gql": "MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country{code:'CHN'}) RETURN f"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.released < 1980 RETURN m ORDER BY m.released DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.released < 1980 RETURN m ORDER BY m.released DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation < 50000 RETURN q ORDER BY q.favorites DESC LIMIT 5",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation < 50000 RETURN q ORDER BY q.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person)-[a:ACTED_IN]->(m:Movie) WITH p, sum(size(a.roles)) AS totalRoles ORDER BY totalRoles DESC LIMIT 3 RETURN p.name AS PersonName, totalRoles",
        "gql": "MATCH (p:Person)-[a:ACTED_IN]->(m:Movie) RETURN p, sum(a.roles) AS totalRoles ORDER BY totalRoles DESC LIMIT 3 NEXT RETURN p.name AS PersonName, totalRoles"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 10000000 RETURN l.name AS language LIMIT 3",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 10000000 RETURN l.name AS language LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character {name: \"Walder-Rivers\"}) RETURN c.community",
        "gql": "MATCH (c:Character {name: \"Walder-Rivers\"}) RETURN c.community"
    },
    {
        "cypher": "MATCH (u:User {name: \"Neo4j\"})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link) RETURN t",
        "gql": "MATCH (u:User {name: \"Neo4j\"})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link) RETURN t"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title = 'Failure of Brown representability in derived categories' OR n.title IS NOT NULL RETURN DISTINCT n.title AS title",
        "gql": "MATCH (n:Article) WHERE n.title = 'Failure of Brown representability in derived categories' OR n.title IS NOT NULL RETURN DISTINCT n.title AS title"
    },
    {
        "cypher": "MATCH (p:Person)-[:REVIEWED]->(m:Movie) WHERE p.born > 1970 RETURN m ORDER BY m.released ASC LIMIT 3",
        "gql": "MATCH (p:Person)-[:REVIEWED]->(m:Movie) WHERE p.born > 1970 RETURN m ORDER BY m.released ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.upVotes = 0 RETURN u LIMIT 3",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.upVotes = 0 RETURN u LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.comments <> '44 pages' RETURN DISTINCT n.abstract AS abstract",
        "gql": "MATCH (n:Article) WHERE n.comments <> '44 pages' RETURN DISTINCT n.`abstract` AS `abstract`"
    },
    {
        "cypher": "MATCH (v:Video)-[:IN_GENRE]->(g:Genre) WHERE v.runtime < 30 RETURN g.name AS genre, COUNT(v) AS video_count ORDER BY video_count DESC LIMIT 3",
        "gql": "MATCH (v:Video)-[:IN_GENRE]->(g:Genre) WHERE v.runtime < 30 RETURN g.name AS genre, COUNT(v) AS video_count ORDER BY video_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.beneficiary_bank_id = \"azizi-bank-kabul-afghanistan-afg\" RETURN DISTINCT f.originator_bank_id",
        "gql": "MATCH (f:Filing) WHERE f.beneficiary_bank_id = \"azizi-bank-kabul-afghanistan-afg\" RETURN DISTINCT f.originator_bank_id"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(:Team) RETURN s.name AS stream_name, s.total_view_count AS view_count ORDER BY s.total_view_count DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:HAS_TEAM]->(:Team) RETURN s.name AS stream_name, s.total_view_count AS view_count ORDER BY s.total_view_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.amount > 1000000 RETURN e.name LIMIT 3",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.amount > 1000000 RETURN e.name LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars >= 4 WITH b, count(r) AS positiveReviews MATCH (b)<-[:REVIEWS]-(r2:Review) WHERE r2.stars <= 3 WITH b, positiveReviews, count(r2) AS negativeReviews WHERE positiveReviews > 0 AND negativeReviews > 0 RETURN b.name AS businessName, positiveReviews, negativeReviews ORDER BY positiveReviews DESC, negativeReviews DESC",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars >= 4 MATCH (b)<-[:REVIEWS]-(r2:Review) WHERE r2.stars <= 3 RETURN b, count(r) AS positiveReviews NEXT RETURN b.name AS businessName, positiveReviews, negativeReviews ORDER BY positiveReviews DESC, negativeReviews DESC"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.languages, size(m.languages) AS num_languages ORDER BY num_languages DESC LIMIT 5",
        "gql": "MATCH (m:Movie) RETURN m.title, m.languages, size(m.languages) AS num_languages ORDER BY num_languages DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(t:Team) WITH t, avg(s.followers) AS averageFollowers ORDER BY averageFollowers DESC LIMIT 5 RETURN t.name AS teamName, averageFollowers",
        "gql": "MATCH (s:Stream)-[:HAS_TEAM]->(t:Team) RETURN t, avg(s.followers) AS averageFollowers ORDER BY averageFollowers DESC LIMIT 5 NEXT RETURN t.name AS teamName, averageFollowers"
    },
    {
        "cypher": "MATCH p=(a:Author{affiliation:'unspecified'})-[*]->(d:Categories{category_id:'eea477d68b70c3a05be12567240033ef'}) RETURN count(p)",
        "gql": "MATCH (a:Author{affiliation:'unspecified'})-[]->{1,}(d:Categories{category_id:'eea477d68b70c3a05be12567240033ef'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (me:Me)-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet) RETURN original ORDER BY original.created_at ASC LIMIT 3",
        "gql": "MATCH (me:Me)-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet) RETURN original ORDER BY original.created_at ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Collection) WHERE c.name = \"Toy Story Collection\" MATCH (c)<-[:IN_COLLECTION]-(m:Movie) WITH avg(m.revenue) AS averageRevenue RETURN averageRevenue",
        "gql": "MATCH (c:Collection) WHERE c.name = \"Toy Story Collection\" MATCH (c)<-[:IN_COLLECTION]-(m:Movie) RETURN avg(m.revenue) AS averageRevenue NEXT RETURN averageRevenue"
    },
    {
        "cypher": "MATCH (T1:Degree_Programs)-[]-(T2:Student_Enrolment) WITH T1, count(T1.degree_summary_name) AS cnt RETURN T1.degree_summary_name ORDER BY cnt DESC LIMIT 1",
        "gql": "MATCH (T1:Degree_Programs)-[]-(T2:Student_Enrolment) RETURN T1, count(T1.degree_summary_name) AS cnt NEXT RETURN T1.degree_summary_name ORDER BY cnt DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person) WITH o, COUNT(p) AS boardMemberCount WHERE boardMemberCount >= 2 RETURN o.name",
        "gql": "MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN o, COUNT(p) AS boardMemberCount NEXT RETURN o.name"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: \"New York City\"}) RETURN o.name AS OrganizationName, o.revenue AS Revenue ORDER BY o.revenue DESC LIMIT 5",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: \"New York City\"}) RETURN o.name AS OrganizationName, o.revenue AS Revenue ORDER BY o.revenue DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.isDissolved = true RETURN o.name LIMIT 3",
        "gql": "MATCH (o:Organization) WHERE o.isDissolved = true RETURN o.name LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {color: '#FF4500'})<-[:INTERACTED]-(interactedUser:User) RETURN count(DISTINCT interactedUser)",
        "gql": "MATCH (u:User {color: '#FF4500'})<-[:INTERACTED]-(interactedUser:User) RETURN count(DISTINCT interactedUser)"
    },
    {
        "cypher": "MATCH (o:Officer)-[:registered_address]->(a:Address) WHERE a.countries = \"Bahamas\" RETURN o.name, a.address LIMIT 3",
        "gql": "MATCH (o:Officer)-[:registered_address]->(a:Address) WHERE a.countries = \"Bahamas\" RETURN o.name, a.address LIMIT 3"
    },
    {
        "cypher": "MATCH (T1:Owners)-[]-(T2:Dogs) RETURN T1.first_name,T2.name",
        "gql": "MATCH (T1:Owners)-[]-(T2:Dogs) RETURN T1.first_name,T2.name"
    },
    {
        "cypher": "MATCH (n:Topic), (:Author {last_name: 'Polishchuk'}) WHERE NOT (n) --> (:Author) RETURN n.label",
        "gql": "MATCH (n:Topic), (:Author {last_name: 'Polishchuk'}) WHERE NOT (n) --> (:Author) RETURN n.label"
    },
    {
        "cypher": "MATCH (n:Categories) WHERE n.category_id IS NOT NULL RETURN n.category_id LIMIT 10",
        "gql": "MATCH (n:Categories) WHERE n.category_id IS NOT NULL RETURN n.category_id LIMIT 10"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS]->(c2:Character) WHERE c1.louvain = 0 AND c2.louvain = 0 RETURN max(r.weight)",
        "gql": "MATCH (c1:Character)-[r:INTERACTS]->(c2:Character) WHERE c1.louvain = 0 AND c2.louvain = 0 RETURN max(r.weight)"
    },
    {
        "cypher": "MATCH (p:Product) WHERE p.quantityPerUnit = '10 boxes x 20 bags' RETURN p.productName AS productName",
        "gql": "MATCH (p:`Product`) WHERE p.quantityPerUnit = '10 boxes x 20 bags' RETURN p.productName AS productName"
    },
    {
        "cypher": "MATCH (supplier:Organization)-[:HAS_SUPPLIER]->(org1:Organization),       (competitor:Organization)-[:HAS_COMPETITOR]->(org2:Organization) WHERE supplier = competitor RETURN DISTINCT supplier.name AS organizationName",
        "gql": "MATCH (supplier:Organization)-[:HAS_SUPPLIER]->(org1:Organization),       (competitor:Organization)-[:HAS_COMPETITOR]->(org2:Organization) WHERE supplier = competitor RETURN DISTINCT supplier.name AS organizationName"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack)-[:HOLDS]->(machine:Machine) MATCH (machine)-[:TYPE]->(type:Type {type: 'xs'}) MATCH (machine)-[:RUNS]->(app:Application) RETURN app.name",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack)-[:HOLDS]->(machine:Machine) MATCH (machine)-[:TYPE]->(type:Type {type: 'xs'}) MATCH (machine)-[:RUNS]->(app:Application) RETURN app.name"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'}) RETURN m.title AS MovieTitle",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'}) RETURN m.title AS MovieTitle"
    },
    {
        "cypher": "MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization) WITH p, count(o) AS numOrgs WHERE numOrgs > 1 RETURN p LIMIT 5",
        "gql": "MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization) RETURN p, count(o) AS numOrgs NEXT RETURN p LIMIT 5"
    },
    {
        "cypher": "MATCH p=(a:Journal{name:'Math. Ann'})-[*]->(d:Report{report_id:'3fa3ec8100d88908b00d139dacdedb6a'}) RETURN count(p)",
        "gql": "MATCH (a:Journal{name:'Math. Ann'})-[]->{1,}(d:Report{report_id:'3fa3ec8100d88908b00d139dacdedb6a'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (teacher:teacher) WHERE teacher.Age = '32' OR teacher.Age = '33' RETURN teacher.Name",
        "gql": "MATCH (teacher:teacher) WHERE teacher.Age = '32' OR teacher.Age = '33' RETURN teacher.Name"
    },
    {
        "cypher": "MATCH (a:Article)-[:FROM_DEPARTMENT]->(d:Department {departmentNo: 1774}) RETURN d.departmentName",
        "gql": "MATCH (a:Article)-[:FROM_DEPARTMENT]->(d:Department {departmentNo: 1774}) RETURN d.departmentName"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.languages IS NOT NULL RETURN m.title, size(m.languages) AS languageCount ORDER BY languageCount DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.languages IS NOT NULL RETURN m.title, size(m.languages) AS languageCount ORDER BY languageCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) WHERE d.born > date(\"1980-01-01\") RETURN DISTINCT g.name ORDER BY g.name LIMIT 3",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) WHERE d.born > date(\"1980-01-01\") RETURN DISTINCT g.name ORDER BY g.name LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Dota 2'}) RETURN s.name AS stream, s.followers AS followers ORDER BY followers DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Dota 2'}) RETURN s.name AS stream, s.followers AS followers ORDER BY followers DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Product {productName: 'Chang'})<-[:SUPPLIES]-(s:Supplier) RETURN s.contactName",
        "gql": "MATCH (p:`Product`{productName:'Chang'})<-[:SUPPLIES]-(s:Supplier) RETURN s.contactName"
    },
    {
        "cypher": "MATCH (u:User {color: '#FF4500'})<-[:INTERACTED]-(other:User) WITH other LIMIT 5 WITH avg(other.y) AS average_y RETURN average_y",
        "gql": "MATCH (u:User{color:'#FF4500'})<-[:INTERACTED]-(other:User) RETURN other LIMIT 5 NEXT RETURN average_y"
    },
    {
        "cypher": "MATCH (b:Business {name: \"Ducky's Car Wash\"})-[:IN_CATEGORY]->(c:Category) MATCH (b)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN c.name AS Category, r AS Review, u.name AS User",
        "gql": "MATCH (b:Business {name: \"Ducky's Car Wash\"})-[:IN_CATEGORY]->(c:Category) MATCH (b)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN c.name AS Category, r AS Review, u.name AS User"
    },
    {
        "cypher": "MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) WITH l.name AS language, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 5 RETURN language, movie_count",
        "gql": "MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN l.name AS language, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 5 NEXT RETURN language, movie_count"
    },
    {
        "cypher": "MATCH (n:Report) WHERE n.report_no IS NOT NULL RETURN count(n)",
        "gql": "MATCH (n:Report) WHERE n.report_no IS NOT NULL RETURN count(n)"
    },
    {
        "cypher": "MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(a:Application) RETURN a.name",
        "gql": "MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(a:Application) RETURN a.name"
    },
    {
        "cypher": "MATCH (u:User)-[r:CREATED]->(p:Post) RETURN p.content AS content ORDER BY r.timestamp DESC LIMIT 1",
        "gql": "MATCH (u:User)-[r:CREATED]->(p:Post) RETURN p.content AS content ORDER BY r.`timestamp` DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany) WHERE v.revenue = 0 RETURN pc LIMIT 3",
        "gql": "MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany) WHERE v.revenue = 0 RETURN pc LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Product) WHERE p.discontinued = true RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 5",
        "gql": "MATCH (p:`Product`) WHERE p.discontinued = true RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.community = 795 RETURN c.name",
        "gql": "MATCH (c:Character) WHERE c.community = 795 RETURN c.name"
    },
    {
        "cypher": "MATCH (s:Stream)-[:VIP]->(u:User) WITH s, COUNT(DISTINCT u) AS vip_count ORDER BY vip_count DESC LIMIT 3 RETURN s.name AS stream_name, vip_count",
        "gql": "MATCH (s:Stream)-[:VIP]->(u:User) RETURN s, COUNT(u) AS vip_count ORDER BY vip_count DESC LIMIT 3 NEXT RETURN s.name AS stream_name, vip_count"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: \"Toy Story Collection\"}) RETURN m ORDER BY m.release_date LIMIT 3",
        "gql": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: \"Toy Story Collection\"}) RETURN m ORDER BY m.release_date LIMIT 3"
    },
    {
        "cypher": "MATCH (software:Software {name: 'RHEL'})-[:VERSION]->(version:Version) WITH count(DISTINCT version) AS totalVersions RETURN totalVersions",
        "gql": "MATCH (software:Software{name:'RHEL'})-[:VERSION]->(version:Version) RETURN count(version) AS totalVersions NEXT RETURN totalVersions"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' WITH e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 5 RETURN e, filingsCount",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 5 NEXT RETURN e, filingsCount"
    },
    {
        "cypher": "MATCH (ceo:Person)<-[:HAS_CEO]-(org:Organization) WHERE org.isPublic = true WITH ceo MATCH (ceo)-[:HAS_CHILD]->(child:Person) RETURN child.name AS ChildName, ceo.name AS CEOName LIMIT 3",
        "gql": "MATCH (ceo:Person)<-[:HAS_CEO]-(org:Organization) WHERE org.isPublic = true RETURN ceo NEXT MATCH (ceo)-[:HAS_CHILD]->(child:Person) RETURN child.name AS ChildName, ceo.name AS CEOName LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article {author: \"David Correa\"})-[:MENTIONS]->(o:Organization) RETURN DISTINCT o.name",
        "gql": "MATCH (a:Article {author: \"David Correa\"})-[:MENTIONS]->(o:Organization) RETURN DISTINCT o.name"
    },
    {
        "cypher": "MATCH (o:Order) WITH min(o.orderDate) AS earliestOrderDate MATCH (o:Order {orderDate: earliestOrderDate})-[p:PURCHASED]-(c:Customer) RETURN c.customerID, c.companyName",
        "gql": "MATCH (o:`Order`) RETURN min(o.orderDate) AS earliestOrderDate NEXT MATCH (o:`Order`{orderDate:earliestOrderDate})-[p:PURCHASED]-(c:Customer) RETURN c.customerID, c.companyName"
    },
    {
        "cypher": "MATCH (r:Rack {rack: 1}) -[:HOLDS]->(s:Switch) -[:ROUTES]->(i:Interface) RETURN DISTINCT i.ip",
        "gql": "MATCH (r:Rack {rack: 1}) -[:HOLDS]->(s:Switch) -[:ROUTES]->(i:Interface) RETURN DISTINCT i.ip"
    },
    {
        "cypher": "MATCH p=(a:Author{author_id:'f6bcab8e721fbec0f293fee49d73c9c4'})-[*]->(d:Keyword{name:'exponentially growing'}) RETURN count(p)",
        "gql": "MATCH (a:Author{author_id:'f6bcab8e721fbec0f293fee49d73c9c4'})-[]->{1,}(d:Keyword{name:'exponentially growing'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'VALORANT'}) MATCH (s)-[:MODERATOR]->(m:User) RETURN m.name AS moderator ORDER BY m.name LIMIT 5",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'VALORANT'}) MATCH (s)-[:MODERATOR]->(m:User) RETURN m.name AS moderator ORDER BY m.name LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Keyword), (:Categories {category_id: 'f2012d79fe17f02edc7542435cc04510'}) WHERE NOT (n) --> (:Categories) RETURN n.name",
        "gql": "MATCH (n:Keyword), (:Categories {category_id: 'f2012d79fe17f02edc7542435cc04510'}) WHERE NOT (n) --> (:Categories) RETURN n.name"
    },
    {
        "cypher": "MATCH (b:BookClub) RETURN count(b)",
        "gql": "MATCH (b:BookClub) RETURN count(b)"
    },
    {
        "cypher": "MATCH (a:Answer {score: 6}) RETURN a.link",
        "gql": "MATCH (a:Answer {score: 6}) RETURN a.link"
    },
    {
        "cypher": "MATCH (n:DocumentLocation) RETURN DISTINCT n.Location_Code",
        "gql": "MATCH (n:DocumentLocation) RETURN DISTINCT n.Location_Code"
    },
    {
        "cypher": "MATCH (a1:Article {articleId: 856300001})-[r:CUSTOMERS_ALSO_LIKE]-(a2:Article {articleId: 812683015}) RETURN r",
        "gql": "MATCH (a1:Article {articleId: 856300001})-[r:CUSTOMERS_ALSO_LIKE]-(a2:Article {articleId: 812683015}) RETURN r"
    },
    {
        "cypher": "MATCH (b:BookClub) WITH b.Publisher as publisher, count(b) as cnt ORDER BY cnt DESC LIMIT 1 RETURN publisher",
        "gql": "MATCH (b:BookClub) RETURN b.Publisher AS publisher, count(b) AS cnt ORDER BY cnt DESC LIMIT 1 NEXT RETURN publisher"
    },
    {
        "cypher": "MATCH (a:Article {article_id:'2204'})-[:PUBLISHED_IN {meta: '217'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article {article_id:'2204'})-[:PUBLISHED_IN {meta: '217'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'}) RETURN MAX(p.unitsOnOrder) AS MaxUnitsOnOrder",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Confections'}) RETURN MAX(p.unitsOnOrder) AS MaxUnitsOnOrder"
    },
    {
        "cypher": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.name='layer-by-layer growth' RETURN m.description",
        "gql": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.name='layer-by-layer growth' RETURN m.description"
    },
    {
        "cypher": "MATCH (entity:Entity)-[:registered_address]->(address:Address) WHERE address.countries = \"Hong Kong\" RETURN count(DISTINCT entity) AS numberOfEntities",
        "gql": "MATCH (entity:Entity)-[:registered_address]->(address:Address) WHERE address.countries = \"Hong Kong\" RETURN count(DISTINCT entity) AS numberOfEntities"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order) WITH c, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 3 RETURN c.companyName AS customerName, orderCount",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`) RETURN c, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 3 NEXT RETURN c.companyName AS customerName, orderCount"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score < 0 WITH u, count(q) AS numNegativeScoreQuestions ORDER BY numNegativeScoreQuestions DESC LIMIT 5 RETURN u.display_name, numNegativeScoreQuestions",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score < 0 RETURN u, count(q) AS numNegativeScoreQuestions ORDER BY numNegativeScoreQuestions DESC LIMIT 5 NEXT RETURN u.display_name, numNegativeScoreQuestions"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.name, c.Assets_billion ORDER BY c.name ASC",
        "gql": "MATCH (c:Company) RETURN c.name, c.Assets_billion ORDER BY c.name ASC"
    },
    {
        "cypher": "MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'}) RETURN DISTINCT u.display_name",
        "gql": "MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'}) RETURN DISTINCT u.display_name"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.originator_bank = \"Deutsche Bank AG\" WITH max(f.number) AS max_number RETURN max_number",
        "gql": "MATCH (f:Filing) WHERE f.originator_bank = \"Deutsche Bank AG\" RETURN max(f.`number`) AS max_number NEXT RETURN max_number"
    },
    {
        "cypher": "MATCH (t:Tag)<-[:TAGGED]-(q:Question) WITH t, count(q) AS questionCount ORDER BY questionCount DESC RETURN t.name AS tagName, questionCount LIMIT 3",
        "gql": "MATCH (t:Tag)<-[:TAGGED]-(q:Question) RETURN t, count(q) AS questionCount ORDER BY questionCount DESC NEXT RETURN t.name AS tagName, questionCount LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:ACTED_IN]-(:Person) WITH m, size(r.roles) AS role_count ORDER BY role_count DESC LIMIT 3 RETURN m.title AS movie_title, role_count",
        "gql": "MATCH (m:Movie)<-[r:ACTED_IN]-(:Person) RETURN m, size(r.roles) AS role_count ORDER BY role_count DESC LIMIT 3 NEXT RETURN m.title AS movie_title, role_count"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WITH p, count(m) AS movies_count WHERE movies_count > 1 WITH count(p) AS actors_with_multiple_movies MATCH (actor:Person)-[:ACTED_IN]->(:Movie) WITH actors_with_multiple_movies, count(DISTINCT actor) AS total_actors RETURN (actors_with_multiple_movies * 1.0) / total_actors * 100 AS percentage",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) MATCH (actor:Person)-[:ACTED_IN]->(:Movie) RETURN p, count(m) AS movies_count NEXT RETURN total_actors AS percentage"
    },
    {
        "cypher": "MATCH (a:Answer) RETURN avg(a.score)",
        "gql": "MATCH (a:Answer) RETURN avg(a.score)"
    },
    {
        "cypher": "MATCH (n:Report) RETURN n.report_id  SKIP 2 LIMIT 2",
        "gql": "MATCH (n:Report) RETURN n.report_id  SKIP 2 LIMIT 2"
    },
    {
        "cypher": "MATCH (n:Report {report_no:'JNMP 4/2002 (Letter)'}) RETURN n",
        "gql": "MATCH (n:Report {report_no:'JNMP 4/2002 (Letter)'}) RETURN n"
    },
    {
        "cypher": "MATCH (n:Keyword) WHERE n.key_id = '4969a8e0646cdb8842726781e7637625' RETURN n",
        "gql": "MATCH (n:Keyword) WHERE n.key_id = '4969a8e0646cdb8842726781e7637625' RETURN n"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title  IS NOT NULL AND n.article_id > 1063 RETURN n.title AS title, n.article_id AS article_id ORDER BY article_id DESC",
        "gql": "MATCH (n:Article) WHERE n.title  IS NOT NULL AND n.article_id > 1063 RETURN n.title AS title, n.article_id AS article_id ORDER BY article_id DESC"
    },
    {
        "cypher": "MATCH (c:CatalogStructure) WHERE c.catalog_level_number >= 5 AND c.catalog_level_number <= 10 RETURN c.catalog_level_name, c.catalog_level_number",
        "gql": "MATCH (c:CatalogStructure) WHERE c.catalog_level_number >= 5 AND c.catalog_level_number <= 10 RETURN c.catalog_level_name, c.catalog_level_number"
    },
    {
        "cypher": "MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) WITH q, COUNT(c) AS comment_count ORDER BY comment_count DESC LIMIT 3 MATCH (q)-[:TAGGED]->(t:Tag) RETURN t.name AS tag, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 3",
        "gql": "MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) RETURN q, COUNT(c) AS comment_count ORDER BY comment_count DESC LIMIT 3 NEXT MATCH (q)-[:TAGGED]->(t:Tag) RETURN t.name AS tag, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Airport) WHERE a.Country <> 'Iceland' RETURN a.name",
        "gql": "MATCH (a:Airport) WHERE a.Country <> 'Iceland' RETURN a.name"
    },
    {
        "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name <> 'en' RETURN u LIMIT 5",
        "gql": "MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name <> 'en' RETURN u LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(:Question) RETURN u ORDER BY u.reputation ASC LIMIT 1",
        "gql": "MATCH (u:User)-[:ASKED]->(:Question) RETURN u ORDER BY u.reputation ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: 'Julie Spellman Sweet'}) RETURN o.name AS organization",
        "gql": "MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: 'Julie Spellman Sweet'}) RETURN o.name AS organization"
    },
    {
        "cypher": "MATCH (n:UpdateDate), (:Article {article_id: '1009'}) WHERE NOT (n) --> (:Article) RETURN n.update_date",
        "gql": "MATCH (n:UpdateDate), (:Article {article_id: '1009'}) WHERE NOT (n) --> (:Article) RETURN n.update_date"
    },
    {
        "cypher": "MATCH (singer:singer) WHERE singer.Age > 20 RETURN DISTINCT singer.Country",
        "gql": "MATCH (singer:singer) WHERE singer.Age > 20 RETURN DISTINCT singer.Country"
    },
    {
        "cypher": "MATCH (tv_channel:TV_Channel) RETURN tv_channel.Language,count(*)",
        "gql": "MATCH (tv_channel:TV_Channel) RETURN tv_channel.Language,count(*)"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:ACTED_IN]-(p:Person) WITH m, count(p) AS actorCount ORDER BY actorCount DESC LIMIT 3 MATCH (m)<-[r:ACTED_IN]-(p) RETURN m.title AS movieTitle, p.name AS actorName, r.roles AS roles",
        "gql": "MATCH (m:Movie)<-[:ACTED_IN]-(p:Person) RETURN m, count(p) AS actorCount ORDER BY actorCount DESC LIMIT 3 NEXT MATCH (m)<-[r:ACTED_IN]-(p) RETURN m.title AS movieTitle, p.name AS actorName, r.roles AS roles"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation = 420137 RETURN q",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation = 420137 RETURN q"
    },
    {
        "cypher": "MATCH (p:Person) WHERE p.Sex = \"M\" RETURN avg(p.Height), avg(p.Weight)",
        "gql": "MATCH (p:Person) WHERE p.Sex = \"M\" RETURN avg(p.Height), avg(p.Weight)"
    },
    {
        "cypher": "MATCH (b:Business)-[:REVIEWS]-(r:Review) WHERE b.city <> 'Missoula' WITH count(r) AS totalReviews RETURN totalReviews",
        "gql": "MATCH (b:Business)-[:REVIEWS]-(r:Review) WHERE b.city <> 'Missoula' RETURN count(r) AS totalReviews NEXT RETURN totalReviews"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization {name: \"Accenture\"}) RETURN o.name AS OrganizationName",
        "gql": "MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization {name: \"Accenture\"}) RETURN o.name AS OrganizationName"
    },
    {
        "cypher": "MATCH (p:Person) RETURN p.Name ORDER BY p.Age DESC LIMIT 5",
        "gql": "MATCH (p:Person) RETURN p.Name ORDER BY p.Age DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Report) WHERE n.report_id = '5049b80a2935f95cc95cf14dbfb8c610' OR n.report_id IS NOT NULL RETURN DISTINCT n.report_id AS report_id",
        "gql": "MATCH (n:Report) WHERE n.report_id = '5049b80a2935f95cc95cf14dbfb8c610' OR n.report_id IS NOT NULL RETURN DISTINCT n.report_id AS report_id"
    },
    {
        "cypher": "MATCH (r:Role) RETURN DISTINCT r.title",
        "gql": "MATCH (r:Role) RETURN DISTINCT r.title"
    },
    {
        "cypher": "MATCH (o:Order {shipRegion: 'NULL'}) RETURN o.orderID",
        "gql": "MATCH (o:`Order`{shipRegion:'NULL'}) RETURN o.orderID"
    },
    {
        "cypher": "MATCH (dd:DocumentDraft {document_id: 7}) RETURN dd.draft_details",
        "gql": "MATCH (dd:DocumentDraft {document_id: 7}) RETURN dd.draft_details"
    },
    {
        "cypher": "MATCH (t:Tag {name: \"graphenedb\"})<-[:TAGGED]-(q:Question) RETURN avg(q.answer_count) AS average_answer_count",
        "gql": "MATCH (t:Tag {name: \"graphenedb\"})<-[:TAGGED]-(q:Question) RETURN avg(q.answer_count) AS average_answer_count"
    },
    {
        "cypher": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie), (p)-[:CAST_FOR]->(a:Adult) WITH p, count(DISTINCT m) AS moviesCount, count(DISTINCT a) AS adultCount WHERE moviesCount > 0 AND adultCount > 0 RETURN p.name LIMIT 5",
        "gql": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie) RETURN p, count(m) AS moviesCount, count(a) AS adultCount NEXT RETURN p.name LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name, c.book1BetweennessCentrality ORDER BY c.book1BetweennessCentrality DESC LIMIT 3",
        "gql": "MATCH (c:Character) RETURN c.name, c.book1BetweennessCentrality ORDER BY c.book1BetweennessCentrality DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (d:domain {name: 'Robotics'})<-[:paper_in_domain]-(p:paper) MATCH (p)<-[:paper_cite_paper]-(citing) RETURN p.name AS PaperTitle, COUNT(citing) AS CitationCount ORDER BY CitationCount DESC LIMIT 1",
        "gql": "MATCH (d:domain {name: 'Robotics'})<-[:paper_in_domain]-(p:paper) MATCH (p)<-[:paper_cite_paper]-(citing) RETURN p.name AS PaperTitle, COUNT(citing) AS CitationCount ORDER BY CitationCount DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order) RETURN c.companyName, count(o) AS NumberOfOrders ORDER BY NumberOfOrders DESC LIMIT 3",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`) RETURN c.companyName, count(o) AS NumberOfOrders ORDER BY NumberOfOrders DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (r1:Region {Region_name: 'Afghanistan'}), (r2:Region {Region_name: 'Albania'}) MATCH (s:Storm)-[a:AFFECTS]->(r1) WHERE a.Number_city_affected > 0 MATCH (s)-[a2:AFFECTS]->(r2) WHERE a2.Number_city_affected > 0 RETURN s.Name",
        "gql": "MATCH (r1:Region {Region_name: 'Afghanistan'}), (r2:Region {Region_name: 'Albania'}) MATCH (s:Storm)-[a:AFFECTS]->(r1) WHERE a.Number_city_affected > 0 MATCH (s)-[a2:AFFECTS]->(r2) WHERE a2.Number_city_affected > 0 RETURN s.Name"
    },
    {
        "cypher": "MATCH (n:Categories) WHERE n.category_id = 'cb7bf6a30b0381c15264305ad7677b30' OR n.specifications IS NOT NULL RETURN DISTINCT n.specifications AS specifications",
        "gql": "MATCH (n:Categories) WHERE n.category_id = 'cb7bf6a30b0381c15264305ad7677b30' OR n.specifications IS NOT NULL RETURN DISTINCT n.specifications AS specifications"
    },
    {
        "cypher": "MATCH (gc:Gradeconversion) RETURN MAX(gc.gradepoint), MIN(gc.gradepoint)",
        "gql": "MATCH (gc:Gradeconversion) RETURN MAX(gc.gradepoint), MIN(gc.gradepoint)"
    },
    {
        "cypher": "MATCH (a:Article {article_id:'1048'})-[:PUBLISHED_IN {pages: '527-551'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article {article_id:'1048'})-[:PUBLISHED_IN {pages: '527-551'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (p:Person)-[:REVIEWED]->(m:Movie) WITH p, count(m) AS reviewCount ORDER BY reviewCount DESC LIMIT 1 RETURN p.name AS reviewerName, reviewCount",
        "gql": "MATCH (p:Person)-[:REVIEWED]->(m:Movie) RETURN p, count(m) AS reviewCount ORDER BY reviewCount DESC LIMIT 1 NEXT RETURN p.name AS reviewerName, reviewCount"
    },
    {
        "cypher": "MATCH (e:Entity) WITH e ORDER BY e.incorporation_date ASC RETURN e.original_name LIMIT 1",
        "gql": "MATCH (e:Entity) RETURN e ORDER BY e.incorporation_date ASC NEXT RETURN e.original_name LIMIT 1"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.link IS NOT NULL RETURN q ORDER BY q.link DESC LIMIT 5",
        "gql": "MATCH (q:Question) WHERE q.link IS NOT NULL RETURN q ORDER BY q.link DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (b:Business {address: '1151 W Broadway St'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name",
        "gql": "MATCH (b:Business {address: '1151 W Broadway St'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {year : '2001'}]->(m) WHERE n.article_id='1139' RETURN m.journal_id",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2001'}]->(m) WHERE n.article_id = '1139' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_INVESTOR]->(i) WITH o, COUNT(i) AS investorCount ORDER BY investorCount DESC RETURN o.name AS organizationName, investorCount LIMIT 10",
        "gql": "MATCH (o:Organization)-[:HAS_INVESTOR]->(i) RETURN o, COUNT(i) AS investorCount ORDER BY investorCount DESC NEXT RETURN o.name AS organizationName, investorCount LIMIT 10"
    },
    {
        "cypher": "MATCH (n:UpdateDate) MATCH (m:Topic) RETURN n.update_date, m.label LIMIT 8",
        "gql": "MATCH (n:UpdateDate) MATCH (m:Topic) RETURN n.update_date, m.label LIMIT 8"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_INVESTOR]->(p:Person) WHERE o.revenue > 500000000 RETURN p.name AS InvestorName, o.name AS OrganizationName LIMIT 3",
        "gql": "MATCH (o:Organization)-[:HAS_INVESTOR]->(p:Person) WHERE o.revenue > 500000000 RETURN p.name AS InvestorName, o.name AS OrganizationName LIMIT 3"
    },
    {
        "cypher": "MATCH (employee:employee) RETURN count(*),employee.City",
        "gql": "MATCH (employee:employee) RETURN count(*),employee.City"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '293-299'}]->(m) WHERE n.comments='6 pages' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '293-299'}]->(m) WHERE n.comments='6 pages' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born > 1960 RETURN m.title",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born > 1960 RETURN m.title"
    },
    {
        "cypher": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie {title: 'Speed Racer'}) RETURN p.name, r.roles",
        "gql": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie {title: 'Speed Racer'}) RETURN p.name, r.roles"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WITH u, AVG(q.favorites) AS avgFavorites ORDER BY avgFavorites DESC LIMIT 3 RETURN u.display_name AS UserName, avgFavorites",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, AVG(q.favorites) AS avgFavorites ORDER BY avgFavorites DESC LIMIT 3 NEXT RETURN u.display_name AS UserName, avgFavorites"
    },
    {
        "cypher": "MATCH (actor:Actor)-[:ACTED_IN]->(movie:Movie) WITH actor, count(movie) AS movieCount ORDER BY movieCount DESC RETURN actor.name, movieCount LIMIT 1",
        "gql": "MATCH (actor:Actor)-[:ACTED_IN]->(movie:Movie) RETURN actor, count(movie) AS movieCount ORDER BY movieCount DESC NEXT RETURN actor.name, movieCount LIMIT 1"
    },
    {
        "cypher": "MATCH (r:Restaurant) RETURN r.ResName, r.Rating ORDER BY r.Rating DESC LIMIT 1",
        "gql": "MATCH (r:Restaurant) RETURN r.ResName, r.Rating ORDER BY r.Rating DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Adult)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN l.name AS Language, count(a) AS NumberOfAdultFilms ORDER BY NumberOfAdultFilms DESC LIMIT 3",
        "gql": "MATCH (a:Adult)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN l.name AS Language, count(a) AS NumberOfAdultFilms ORDER BY NumberOfAdultFilms DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q ORDER BY q.downVotes DESC LIMIT 5",
        "gql": "MATCH (q:Question) RETURN q ORDER BY q.downVotes DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Article{article_id:'4129'})-[:PUBLISHED_IN]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{article_id:'4129'})-[:PUBLISHED_IN]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Industry <> \"Banking\" RETURN max(c.Sales_billion), min(c.Sales_billion)",
        "gql": "MATCH (c:Company) WHERE c.Industry <> \"Banking\" RETURN max(c.Sales_billion), min(c.Sales_billion)"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) WITH m, COUNT(a) AS actorCount ORDER BY actorCount DESC LIMIT 3 RETURN m.title AS MovieTitle, actorCount",
        "gql": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN m, COUNT(a) AS actorCount ORDER BY actorCount DESC LIMIT 3 NEXT RETURN m.title AS MovieTitle, actorCount"
    },
    {
        "cypher": "MATCH (p:Product) WITH p ORDER BY p.unitPrice DESC LIMIT 1 MATCH (s:Supplier)-[:SUPPLIES]->(p) RETURN s.companyName",
        "gql": "MATCH (p:`Product`) RETURN p ORDER BY p.unitPrice DESC LIMIT 1 NEXT MATCH (s:Supplier)-[:SUPPLIES]->(p) RETURN s.companyName"
    },
    {
        "cypher": "MATCH (o:Officer) WHERE o.sourceID = 'Panama Papers' AND o.note IS NOT NULL RETURN o.name",
        "gql": "MATCH (o:Officer) WHERE o.sourceID = 'Panama Papers' AND o.note IS NOT NULL RETURN o.name"
    },
    {
        "cypher": "MATCH (o:Order)-[rel:ORDERS]->(p:Product) WITH o, sum(toFloat(rel.unitPrice) * rel.quantity * toFloat(rel.discount)) AS totalDiscount RETURN o.orderID, totalDiscount",
        "gql": "MATCH (o:`Order`)-[rel:ORDERS]->(p:`Product`) RETURN o, sum(rel.unitPrice) AS totalDiscount NEXT RETURN o.orderID, totalDiscount"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes LIMIT 3"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)<-[:RETWEETS]-(retweet:Tweet) WITH tweet, COUNT(retweet) AS retweet_count ORDER BY retweet_count DESC LIMIT 5 MATCH (tweet)-[:CONTAINS]->(link:Link) RETURN link.url",
        "gql": "MATCH (me:Me{screen_name:'neo4j'})-[:POSTS]->(tweet:Tweet)<-[:RETWEETS]-(retweet:Tweet) RETURN tweet, COUNT(retweet) AS retweet_count ORDER BY retweet_count DESC LIMIT 5 NEXT MATCH (tweet)-[:CONTAINS]->(link:Link) RETURN link.url"
    },
    {
        "cypher": "MATCH (d:DocumentLocation) RETURN d.Location_Code, d.Date_in_Location_From, d.Date_in_Locaton_To",
        "gql": "MATCH (d:DocumentLocation) RETURN d.Location_Code, d.Date_in_Location_From, d.Date_in_Locaton_To"
    },
    {
        "cypher": "MATCH (n:Article) MATCH (m:Author) RETURN n.title, m.author_id LIMIT 8",
        "gql": "MATCH (n:Article) MATCH (m:Author) RETURN n.title, m.author_id LIMIT 8"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City) WITH c, avg(a.sentiment) AS avgSentiment ORDER BY avgSentiment DESC LIMIT 1 RETURN c.name",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City) RETURN c, avg(a.sentiment) AS avgSentiment ORDER BY avgSentiment DESC LIMIT 1 NEXT RETURN c.name"
    },
    {
        "cypher": "MATCH (:User)-[r:CREATED]->(p:Post)  WHERE date(r.timestamp).month = 3 RETURN COUNT(p) AS count",
        "gql": "MATCH (:User)-[r:CREATED]->(p:Post) WHERE r.`timestamp` = 3 RETURN COUNT(p) AS `count`"
    },
    {
        "cypher": "MATCH p=(a:Article{article_id:'1056'})-[*]->(d:Journal{journal_id:'f6582df4742923aacfc6e67638bd4bf6'}) RETURN count(p)",
        "gql": "MATCH (a:Article{article_id:'1056'})-[]->{1,}(d:Journal{journal_id:'f6582df4742923aacfc6e67638bd4bf6'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (r:Review) WITH size(split(r.text, \" \")) AS wordsPerReview RETURN avg(wordsPerReview) AS averageWordCount",
        "gql": "MATCH (r:Review) RETURN size(r.text) AS wordsPerReview NEXT RETURN avg(wordsPerReview) AS averageWordCount"
    },
    {
        "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router) WITH dc, count(DISTINCT r.name) AS routerCount RETURN dc.name AS DataCenter, routerCount ORDER BY routerCount DESC LIMIT 1",
        "gql": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router) RETURN dc, count(r.name) AS routerCount NEXT RETURN dc.name AS DataCenter, routerCount ORDER BY routerCount DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (t:Type) WITH avg(t.disk) AS average_disk_size RETURN average_disk_size",
        "gql": "MATCH (t:Type) RETURN avg(t.disk) AS average_disk_size NEXT RETURN average_disk_size"
    },
    {
        "cypher": "MATCH (f:Faculty) WHERE f.Rank = \"Professor\" AND f.Building = \"NEB\" RETURN f.Room",
        "gql": "MATCH (f:Faculty) WHERE f.Rank = \"Professor\" AND f.Building = \"NEB\" RETURN f.Room"
    },
    {
        "cypher": "MATCH (b:BookClub) RETURN count(b)",
        "gql": "MATCH (b:BookClub) RETURN count(b)"
    },
    {
        "cypher": "MATCH (s:Stream) OPTIONAL MATCH (s)-[:MODERATOR]->(m:User) WITH s, count(m) AS moderatorCount RETURN s.name AS streamName, moderatorCount ORDER BY moderatorCount DESC LIMIT 10",
        "gql": "MATCH (s:Stream) MATCH (s)-[:MODERATOR]->(m:User) RETURN s, count(m) AS moderatorCount NEXT RETURN s.name AS streamName, moderatorCount ORDER BY moderatorCount DESC LIMIT 10"
    },
    {
        "cypher": "MATCH (dogs:Dogs) RETURN max(dogs.age)",
        "gql": "MATCH (dogs:Dogs) RETURN max(dogs.age)"
    },
    {
        "cypher": "MATCH (app:Application {name: 'logstash'})-[:DEPENDS_ON]->(dependency) RETURN dependency.name AS DependencyName",
        "gql": "MATCH (app:Application {name: 'logstash'})-[:DEPENDS_ON]->(dependency) RETURN dependency.name AS DependencyName"
    },
    {
        "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(egress:Egress) RETURN egress.name",
        "gql": "MATCH (dc:DataCenter)-[:CONTAINS]->(egress:Egress) RETURN egress.name"
    },
    {
        "cypher": "MATCH (b:Browser) WHERE b.market_share >= 5 RETURN COUNT(b)",
        "gql": "MATCH (b:Browser) WHERE b.market_share >= 5 RETURN COUNT(b)"
    },
    {
        "cypher": "MATCH (cc:CatalogContent) RETURN cc.catalog_entry_name ORDER BY cc.price_in_dollars DESC LIMIT 1",
        "gql": "MATCH (cc:CatalogContent) RETURN cc.catalog_entry_name ORDER BY cc.price_in_dollars DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Network {ip: '10.2'})-[:ROUTES]->(i:Interface) RETURN i.ip AS InterfaceIP",
        "gql": "MATCH (n:Network {ip: '10.2'})-[:ROUTES]->(i:Interface) RETURN i.ip AS InterfaceIP"
    },
    {
        "cypher": "MATCH (e:Entity)-[:same_as]->(:Entity) MATCH (e)-[:registered_address]->(:Address) RETURN DISTINCT e.name",
        "gql": "MATCH (e:Entity)-[:same_as]->(:Entity) MATCH (e)-[:registered_address]->(:Address) RETURN DISTINCT e.name"
    },
    {
        "cypher": "MATCH (b:Browser) RETURN b.name ORDER BY b.market_share DESC",
        "gql": "MATCH (b:Browser) RETURN b.name ORDER BY b.market_share DESC"
    },
    {
        "cypher": "MATCH (org:Organization)-[:IN_CITY]->(city:City) WITH city, avg(org.nbrEmployees) AS average_employees WHERE average_employees > 1000000 RETURN avg(average_employees) AS avg_employees_in_large_cities",
        "gql": "MATCH (org:Organization)-[:IN_CITY]->(city:City) RETURN city, avg(org.nbrEmployees) AS average_employees NEXT RETURN avg(average_employees) AS avg_employees_in_large_cities"
    },
    {
        "cypher": "MATCH (c:Character)-[i:INTERACTS3]->(other:Character) RETURN c.name AS character, sum(i.weight) AS total_interactions ORDER BY total_interactions DESC LIMIT 5",
        "gql": "MATCH (c:Character)-[i:INTERACTS3]->(other:Character) RETURN c.name AS character, sum(i.weight) AS total_interactions ORDER BY total_interactions DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Julie Spellman Sweet\"})-[:HAS_CHILD]->(child:Person) RETURN child LIMIT 3",
        "gql": "MATCH (p:Person {name: \"Julie Spellman Sweet\"})-[:HAS_CHILD]->(child:Person) RETURN child LIMIT 3"
    },
    {
        "cypher": "MATCH (n:UpdateDate {update_date:'2010-06-18'}) RETURN n",
        "gql": "MATCH (n:UpdateDate {update_date:'2010-06-18'}) RETURN n"
    },
    {
        "cypher": "MATCH (ceo:Person {name: \"Julie Spellman Sweet\"})<-[:HAS_CEO]-(org:Organization)<-[:MENTIONS]-(article:Article) WHERE article.sentiment > 0.75 RETURN article.title, article.date, article.sentiment ORDER BY article.date DESC LIMIT 3",
        "gql": "MATCH (ceo:Person{name:\"Julie Spellman Sweet\"})<-[:HAS_CEO]-(org:Organization)<-[:MENTIONS]-(article:Article) WHERE article.sentiment > 0.75 RETURN article.title, article.`date`, article.sentiment ORDER BY article.`date` DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article {prodName: 'Tina dress'}) RETURN a.graphicalAppearanceNo, a.graphicalAppearanceName",
        "gql": "MATCH (a:Article {prodName: 'Tina dress'}) RETURN a.graphicalAppearanceNo, a.graphicalAppearanceName"
    },
    {
        "cypher": "MATCH (r:Router)-[:ROUTES]->(i:Interface {ip: '10.3.8.253'}) RETURN r.name AS RouterName",
        "gql": "MATCH (r:Router)-[:ROUTES]->(i:Interface {ip: '10.3.8.253'}) RETURN r.name AS RouterName"
    },
    {
        "cypher": "MATCH (pets:Pets) RETURN avg(pets.pet_age),max(pets.pet_age),pets.PetType",
        "gql": "MATCH (pets:Pets) RETURN avg(pets.pet_age),max(pets.pet_age),pets.PetType"
    },
    {
        "cypher": "MATCH (a:DOI{doi_id:'f2f5ea4787de1e16c51c306e07bb740c'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:DOI{doi_id:'f2f5ea4787de1e16c51c306e07bb740c'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS1 {weight: 291}]->(c2:Character) RETURN c1.name, c2.name LIMIT 3",
        "gql": "MATCH (c1:Character)-[r:INTERACTS1 {weight: 291}]->(c2:Character) RETURN c1.name, c2.name LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)<-[:CHATTER]-(u:User) WITH s, COUNT(u) AS chatterCount ORDER BY chatterCount DESC LIMIT 5 RETURN s.name AS streamName, chatterCount",
        "gql": "MATCH (s:Stream)<-[:CHATTER]-(u:User) RETURN s, COUNT(u) AS chatterCount ORDER BY chatterCount DESC LIMIT 5 NEXT RETURN s.name AS streamName, chatterCount"
    },
    {
        "cypher": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert) WHERE T3.Year = 2014 RETURN T2.Name",
        "gql": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert) WHERE T3.`Year` = 2014 RETURN T2.Name"
    },
    {
        "cypher": "MATCH (v:Video) WHERE v.budget < 5000 RETURN v.title, v.budget LIMIT 3",
        "gql": "MATCH (v:Video) WHERE v.budget < 5000 RETURN v.title, v.budget LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:DIRECTED]-(d:Director) WHERE m.imdbRating > 8.0 RETURN DISTINCT d.name AS director",
        "gql": "MATCH (m:Movie)<-[:DIRECTED]-(d:Director) WHERE m.imdbRating > 8.0 RETURN DISTINCT d.name AS director"
    },
    {
        "cypher": "MATCH (a:Author) RETURN a.fname ORDER BY a.fname",
        "gql": "MATCH (a:Author) RETURN a.fname ORDER BY a.fname"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '248' RETURN n.article_id AS article_id, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '248' RETURN n.article_id AS article_id, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.name ORDER BY c.Market_Value_billion DESC",
        "gql": "MATCH (c:Company) RETURN c.name ORDER BY c.Market_Value_billion DESC"
    },
    {
        "cypher": "MATCH (n:Report {report_id:'dd0a54fea06e7b7a384741aac9313d65'}) RETURN n",
        "gql": "MATCH (n:Report {report_id:'dd0a54fea06e7b7a384741aac9313d65'}) RETURN n"
    },
    {
        "cypher": "MATCH (n:Report) MATCH (m:DOI) RETURN n.report_no, m.name LIMIT 8",
        "gql": "MATCH (n:Report) MATCH (m:DOI) RETURN n.report_no, m.name LIMIT 8"
    },
    {
        "cypher": "MATCH (o:Order) WITH o.employeeID AS employeeID, COUNT(o) AS orderCount RETURN employeeID, orderCount ORDER BY orderCount DESC LIMIT 3",
        "gql": "MATCH (o:`Order`) RETURN o.employeeID AS employeeID, COUNT(o) AS orderCount NEXT RETURN employeeID, orderCount ORDER BY orderCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (T2:teacher)-[T1:course_arrange]-() RETURN T2.Name,count(*)",
        "gql": "MATCH (T2:teacher)-[T1:course_arrange]-() RETURN T2.Name,count(*)"
    },
    {
        "cypher": "MATCH (a:Adult) WHERE a.average_vote IS NOT NULL RETURN a.title, a.average_vote ORDER BY a.average_vote DESC LIMIT 3",
        "gql": "MATCH (a:Adult) WHERE a.average_vote IS NOT NULL RETURN a.title, a.average_vote ORDER BY a.average_vote DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {year : '2004'}]->(m) WHERE n.comments='19 pages, AMSLatex, references added' RETURN m.name",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2004'}]->(m) WHERE n.comments = '19 pages, AMSLatex, references added' RETURN m.name"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-subscriptions'}) RETURN q.title AS title, q.text AS text, q.link AS link, q.createdAt AS createdAt, q.id AS id, q.upVotes AS upVotes, q.downVotes AS downVotes, q.score AS score, q.favorites AS favorites, q.answered AS answered",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-subscriptions'}) RETURN q.title AS title, q.text AS text, q.link AS link, q.createdAt AS createdAt, q.id AS id, q.upVotes AS upVotes, q.downVotes AS downVotes, q.score AS score, q.favorites AS favorites, q.answered AS answered"
    },
    {
        "cypher": "MATCH (T1:Campus {Campus:\"San Francisco State University\"})-[r:TEACHES]-(T2:Degree {Year:2001}) RETURN T2.Degrees",
        "gql": "MATCH (T1:Campus{Campus:\"San Francisco State University\"})-[r:TEACHES]-(T2:Degree{`Year`:2001}) RETURN T2.`Degrees`"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.louvain = 0 AND c.pagerank > 8 RETURN c.name, c.pagerank",
        "gql": "MATCH (c:Character) WHERE c.louvain = 0 AND c.pagerank > 8 RETURN c.name, c.pagerank"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:ACTED_IN]-(p:Person) WITH m, count(DISTINCT p) AS actorCount ORDER BY actorCount DESC LIMIT 3 RETURN m.title AS movieTitle, actorCount",
        "gql": "MATCH (m:Movie)<-[:ACTED_IN]-(p:Person) RETURN m, count(p) AS actorCount ORDER BY actorCount DESC LIMIT 3 NEXT RETURN m.title AS movieTitle, actorCount"
    },
    {
        "cypher": "MATCH (u:User)-[:INTERACTED]->(:User) WHERE u.area IS NOT NULL RETURN u ORDER BY u.area DESC LIMIT 5",
        "gql": "MATCH (u:User)-[:INTERACTED]->(:User) WHERE u.area IS NOT NULL RETURN u ORDER BY u.area DESC LIMIT 5"
    },
    {
        "cypher": "MATCH p=(a:Article{title:'An adelic causality problem related to abelian L-functions'})-[*]->(d:Categories{specifications:'math.IT'}) RETURN count(p)",
        "gql": "MATCH (a:Article{title:'An adelic causality problem related to abelian L-functions'})-[]->{1,}(d:Categories{specifications:'math.IT'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1071 OR n.article_id < 1052 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1071 OR n.article_id < 1052 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.summary = 'Pretty funny at times' RETURN p.name ORDER BY r.rating DESC LIMIT 3",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.summary = 'Pretty funny at times' RETURN p.name ORDER BY r.rating DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User) RETURN u.name, u.betweenness ORDER BY u.betweenness DESC LIMIT 3",
        "gql": "MATCH (u:User) RETURN u.name, u.betweenness ORDER BY u.betweenness DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization) WHERE o.nbrEmployees > 1000 RETURN p",
        "gql": "MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization) WHERE o.nbrEmployees > 1000 RETURN p"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name, c.centrality ORDER BY c.centrality DESC LIMIT 3",
        "gql": "MATCH (c:Character) RETURN c.name, c.centrality ORDER BY c.centrality DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1009 OR n.article_id < 1048 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1009 OR n.article_id < 1048 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WITH c, count(o) as orgCount ORDER BY orgCount DESC LIMIT 5 RETURN c.name as cityName, orgCount",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City) RETURN c, count(o) AS orgCount ORDER BY orgCount DESC LIMIT 5 NEXT RETURN c.name AS cityName, orgCount"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Julie Spellman Sweet\"}) MATCH (p)<-[:HAS_CEO]-(o:Organization) RETURN o.id",
        "gql": "MATCH (p:Person {name: \"Julie Spellman Sweet\"}) MATCH (p)<-[:HAS_CEO]-(o:Organization) RETURN o.id"
    },
    {
        "cypher": "MATCH (n:List) WHERE n.Classroom = 111 RETURN n.LastName",
        "gql": "MATCH (n:`List`) WHERE n.Classroom = 111 RETURN n.LastName"
    },
    {
        "cypher": "MATCH (u:User)-[:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre) WITH u, count(DISTINCT g) AS numGenres ORDER BY numGenres DESC LIMIT 3 RETURN u.name AS user, numGenres",
        "gql": "MATCH (u:User)-[:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN u, count(g) AS numGenres ORDER BY numGenres DESC LIMIT 3 NEXT RETURN u.name AS user, numGenres"
    },
    {
        "cypher": "MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:Me {screen_name: 'neo4j'}) RETURN u.screen_name, t.created_at ORDER BY t.created_at ASC LIMIT 3",
        "gql": "MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:Me {screen_name: 'neo4j'}) RETURN u.screen_name, t.created_at ORDER BY t.created_at ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Keyword{name:'layer-by-layer growth'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Keyword{name:'layer-by-layer growth'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' WITH e, count(f) AS filingsCount RETURN e, filingsCount ORDER BY filingsCount DESC",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' RETURN e, count(f) AS filingsCount NEXT RETURN e, filingsCount ORDER BY filingsCount DESC"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.overview, size(split(m.overview, \" \")) AS word_count ORDER BY word_count DESC LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.overview, size(m.overview) AS word_count ORDER BY word_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User) WHERE u.followers > 10000 AND u.statuses < 15000 RETURN u.screen_name AS screen_name, u.followers AS followers, u.statuses AS statuses",
        "gql": "MATCH (u:User) WHERE u.followers > 10000 AND u.statuses < 15000 RETURN u.screen_name AS screen_name, u.followers AS followers, u.statuses AS statuses"
    },
    {
        "cypher": "MATCH (a:Address {icij_id: 'F969D23B2EDF91CAEBE119A675B61AAB'}) RETURN a.address",
        "gql": "MATCH (a:Address {icij_id: 'F969D23B2EDF91CAEBE119A675B61AAB'}) RETURN a.address"
    },
    {
        "cypher": "MATCH (n:Categories) WHERE n.category_id = '978aee6db23fc939cec71ac05eb15b7a' OR n.specifications IS NOT NULL RETURN DISTINCT n.specifications AS specifications",
        "gql": "MATCH (n:Categories) WHERE n.category_id = '978aee6db23fc939cec71ac05eb15b7a' OR n.specifications IS NOT NULL RETURN DISTINCT n.specifications AS specifications"
    },
    {
        "cypher": "MATCH (toyStory:Movie {title: 'Toy Story'}) WITH toyStory, toyStory.released AS toyStoryYear MATCH (otherMovies:Movie {released: toyStoryYear}) WITH otherMovies, toyStoryYear, [(otherMovies)-[:IN_GENRE]->(genres) | genres.name] AS genres RETURN otherMovies.title AS movieTitle, genres, toyStoryYear",
        "gql": "MATCH (toyStory:Movie{title:'Toy Story'}) MATCH (otherMovies:Movie{released:toyStoryYear}) RETURN toyStory, toyStory.released AS toyStoryYear NEXT RETURN otherMovies.title AS movieTitle, genres, toyStoryYear"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:MENTIONS]->(mentioned:User) RETURN mentioned, count(*) AS num_mentions ORDER BY num_mentions DESC LIMIT 10",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:MENTIONS]->(mentioned:User) RETURN mentioned, count(*) AS num_mentions ORDER BY num_mentions DESC LIMIT 10"
    },
    {
        "cypher": "MATCH (m:Member) WHERE m.Address = 'Harford' OR m.Address = 'Waterbury' RETURN m.Name",
        "gql": "MATCH (m:Member) WHERE m.Address = 'Harford' OR m.Address = 'Waterbury' RETURN m.Name"
    },
    {
        "cypher": "MATCH (o:Order)-[:ORDERS]->(p:Product) WHERE toFloat(o.freight) > 250 RETURN p.productName AS productName, o.freight AS freight LIMIT 5",
        "gql": "MATCH (o:`Order`)-[:ORDERS]->(p:`Product`) WHERE o.freight > 250 RETURN p.productName AS productName, o.freight AS freight LIMIT 5"
    },
    {
        "cypher": "MATCH (n:User {screen_name: 'neo4j'})<-[:FOLLOWS]-(follower) WITH avg(follower.betweenness) AS average_betweenness RETURN average_betweenness",
        "gql": "MATCH (n:User{screen_name:'neo4j'})<-[:FOLLOWS]-(follower) RETURN avg(follower.betweenness) AS average_betweenness NEXT RETURN average_betweenness"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag) WITH q, t ORDER BY q.view_count DESC LIMIT 3 RETURN DISTINCT t.name AS tag_name",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN q, t ORDER BY q.view_count DESC LIMIT 3 NEXT RETURN DISTINCT t.name AS tag_name"
    },
    {
        "cypher": "MATCH (n:RefLocation) WHERE n.Location_Code = \"x\" RETURN n.Location_Name, n.Location_Description",
        "gql": "MATCH (n:RefLocation) WHERE n.Location_Code = \"x\" RETURN n.Location_Name, n.Location_Description"
    },
    {
        "cypher": "MATCH (a:Adult) RETURN a.title ORDER BY a.popularity DESC LIMIT 1",
        "gql": "MATCH (a:Adult) RETURN a.title ORDER BY a.popularity DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})<-[:FOLLOWS]-(follower:User) RETURN follower.name AS follower_name, follower.betweenness AS betweenness ORDER BY follower.betweenness DESC LIMIT 3",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})<-[:FOLLOWS]-(follower:User) RETURN follower.name AS follower_name, follower.betweenness AS betweenness ORDER BY follower.betweenness DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN singer.song_name,singer.song_release_year ORDER BY singer.age LIMIT 1",
        "gql": "MATCH (singer:singer) RETURN singer.song_name,singer.song_release_year ORDER BY singer.age LIMIT 1"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN singer.song_name,singer.song_release_year ORDER BY singer.age LIMIT 1",
        "gql": "MATCH (singer:singer) RETURN singer.song_name,singer.song_release_year ORDER BY singer.age LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Keyword{key_id:'1af2a68bafbcdcb0f3329c5793163154'})-[:HAS_TOPIC]->(c:Topic)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Keyword{key_id:'1af2a68bafbcdcb0f3329c5793163154'})-[:HAS_TOPIC]->(c:Topic)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.released >= '2011-01-01' AND m.budget IS NOT NULL RETURN m ORDER BY m.budget DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.released >= '2011-01-01' AND m.budget IS NOT NULL RETURN m ORDER BY m.budget DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (b:Business {city: 'San Mateo'}) RETURN b LIMIT 3",
        "gql": "MATCH (b:Business {city: 'San Mateo'}) RETURN b LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) WHERE m.runtime < 80 WITH pc, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 3 RETURN pc.name, movies_count",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) WHERE m.runtime < 80 RETURN pc, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 3 NEXT RETURN pc.name, movies_count"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:RATED]-(u:User) WITH m, count(u) AS userCount WHERE userCount > 3 RETURN m",
        "gql": "MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, count(u) AS userCount NEXT RETURN m"
    },
    {
        "cypher": "MATCH (a:Article)-[:VARIANT_OF]->(p:Product) WHERE a.prodName = 'Nora T-shirt' RETURN DISTINCT p.productCode",
        "gql": "MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`) WHERE a.prodName = 'Nora T-shirt' RETURN DISTINCT p.productCode"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory) WITH o, COUNT(c) AS categoryCount WHERE categoryCount > 1 RETURN o.name AS organizationName LIMIT 5",
        "gql": "MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN o, COUNT(c) AS categoryCount NEXT RETURN o.name AS organizationName LIMIT 5"
    },
    {
        "cypher": "MATCH (r:Role) RETURN count(r)",
        "gql": "MATCH (r:Role) RETURN count(r)"
    },
    {
        "cypher": "MATCH (role:Role) WHERE role.Role_Name = \"Proof Reader\" RETURN role.Role_Description",
        "gql": "MATCH (role:Role) WHERE role.Role_Name = \"Proof Reader\" RETURN role.Role_Description"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.abstract='  The classical level set method, which represents the boundary of the unknown geometry as the zero-level set of a function, has been shown to be very effective in solving shape optimization problems. The present work addresses the issue of using a level set representation when there are simple geometrical and topological constraints. We propose a logarithmic barrier penalty which acts to enforce the constraints, leading to an approximate solution to shape design problems. ' RETURN m.name",
        "gql": "MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.`abstract` = '  The classical level set method, which represents the boundary of the unknown geometry as the zero-level set of a function, has been shown to be very effective in solving shape optimization problems. The present work addresses the issue of using a level set representation when there are simple geometrical and topological constraints. We propose a logarithmic barrier penalty which acts to enforce the constraints, leading to an approximate solution to shape design problems. ' RETURN m.name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE date(m.release_date).year = 1990 RETURN count(m)",
        "gql": "MATCH (m:Movie) WHERE m.release_date = 1990 RETURN count(m)"
    },
    {
        "cypher": "MATCH (c:City) WHERE c.Population > 1500 OR c.Population < 500 RETURN c.Official_Name",
        "gql": "MATCH (c:City) WHERE c.Population > 1500 OR c.Population < 500 RETURN c.Official_Name"
    },
    {
        "cypher": "MATCH (b:BookClub) WHERE b.Year > 1989 RETURN b.Book_Title, b.Author_or_Editor",
        "gql": "MATCH (b:BookClub) WHERE b.`Year` > 1989 RETURN b.Book_Title, b.Author_or_Editor"
    },
    {
        "cypher": "MATCH (m:Musical) WHERE m.Award = \"Tony Award\" OR m.Award = \"Cleavant Derricks\" RETURN m.Nominee",
        "gql": "MATCH (m:Musical) WHERE m.Award = \"Tony Award\" OR m.Award = \"Cleavant Derricks\" RETURN m.Nominee"
    },
    {
        "cypher": "MATCH (o:Organization {isPublic: true})-[:IN_CITY]->(c:City) RETURN DISTINCT c.name",
        "gql": "MATCH (o:Organization {isPublic: true})-[:IN_CITY]->(c:City) RETURN DISTINCT c.name"
    },
    {
        "cypher": "MATCH (n:RefLocation) RETURN n.Location_Code, n.Location_Name",
        "gql": "MATCH (n:RefLocation) RETURN n.Location_Code, n.Location_Name"
    },
    {
        "cypher": "MATCH (i:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization) WITH i, count(o) AS orgCount WHERE orgCount >= 3 RETURN i.name AS IndustryCategoryName",
        "gql": "MATCH (i:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization) RETURN i, count(o) AS orgCount NEXT RETURN i.name AS IndustryCategoryName"
    },
    {
        "cypher": "MATCH (b:Business {address: '313 N 1st St W'})<-[:REVIEWS]-(r:Review) RETURN r.text, r.stars ORDER BY r.stars DESC LIMIT 3",
        "gql": "MATCH (b:Business {address: '313 N 1st St W'})<-[:REVIEWS]-(r:Review) RETURN r.text, r.stars ORDER BY r.stars DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {year : '2000'}]->(m) WHERE n.article_id='1008' RETURN m.name",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2000'}]->(m) WHERE n.article_id = '1008' RETURN m.name"
    },
    {
        "cypher": "MATCH (f:Farm) RETURN f.Total_Horses ORDER BY f.Total_Horses ASC",
        "gql": "MATCH (f:Farm) RETURN f.Total_Horses ORDER BY f.Total_Horses ASC"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1008 OR n.article_id < 1069 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1008 OR n.article_id < 1069 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Joel Silver\"})-[:PRODUCED]->(m:Movie) RETURN m.title AS MovieTitle, m.released AS ReleaseYear",
        "gql": "MATCH (p:Person {name: \"Joel Silver\"})-[:PRODUCED]->(m:Movie) RETURN m.title AS MovieTitle, m.released AS ReleaseYear"
    },
    {
        "cypher": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN m.title AS Movie, r.roles AS Roles ORDER BY size(r.roles) DESC LIMIT 1",
        "gql": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN m.title AS Movie, r.roles AS Roles ORDER BY size(r.roles) DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (u:User) RETURN u.name, u.screen_name, u.followers ORDER BY u.followers DESC LIMIT 5",
        "gql": "MATCH (u:User) RETURN u.name, u.screen_name, u.followers ORDER BY u.followers DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Campus {Campus: \"San Jose State University\"})<-[:TEACHES]-(fee:CsuFee {Year: 1996}) return fee.CampusFee",
        "gql": "MATCH (n:Campus{Campus:\"San Jose State University\"})<-[:TEACHES]-(fee:CsuFee{`Year`:1996}) RETURN fee.CampusFee"
    },
    {
        "cypher": "MATCH (c:Campus)<-[:TEACHES]-(f:Faculty) WHERE f.Year = 2002 RETURN f.Faculty ORDER BY f.Faculty DESC LIMIT 1",
        "gql": "MATCH (c:Campus)<-[:TEACHES]-(f:Faculty) WHERE f.`Year` = 2002 RETURN f.Faculty ORDER BY f.Faculty DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (b:Business)-[:REVIEWS]-(r:Review) WHERE b.city = 'Burlingame' AND r.stars >= 4.0 RETURN b.address",
        "gql": "MATCH (b:Business)-[:REVIEWS]-(r:Review) WHERE b.city = 'Burlingame' AND r.stars >= 4.0 RETURN b.address"
    },
    {
        "cypher": "MATCH p=(a:Keyword{name:'super-population viewpoint'})-[*]->(d:Article{title:'An adelic causality problem related to abelian L-functions'}) RETURN count(p)",
        "gql": "MATCH (a:Keyword{name:'super-population viewpoint'})-[]->{1,}(d:Article{title:'An adelic causality problem related to abelian L-functions'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.Year < 2000 RETURN avg(m.Budget_million), max(m.Budget_million), min(m.Budget_million)",
        "gql": "MATCH (m:Movie) WHERE m.`Year` < 2000 RETURN avg(m.Budget_million), max(m.Budget_million), min(m.Budget_million)"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WITH m, r, p ORDER BY r.rating DESC LIMIT 1 RETURN p.name AS reviewer, r.summary AS review_summary",
        "gql": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) RETURN m, r, p ORDER BY r.rating DESC LIMIT 1 NEXT RETURN p.name AS reviewer, r.summary AS review_summary"
    },
    {
        "cypher": "MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 5",
        "gql": "MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality IS NOT NULL AND c.degree > 30 RETURN c ORDER BY c.centrality ASC LIMIT 1",
        "gql": "MATCH (c:Character) WHERE c.centrality IS NOT NULL AND c.degree > 30 RETURN c ORDER BY c.centrality ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Author{first_name:'R.'})-[*]->(d:Keyword{name:'logarithms'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Author{first_name:'R.'})-[]->{1,}(d:Keyword{name:'logarithms'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (rack:Rack {name: 'DC1-RCK-4-9'})-[:HOLDS]->(machine:Machine)-[:TYPE]->(type:Type {type: 'xl'}) RETURN machine.name, type.name, type.ram, type.cpu, type.disk LIMIT 3",
        "gql": "MATCH (rack:Rack {name: 'DC1-RCK-4-9'})-[:HOLDS]->(machine:Machine)-[:TYPE]->(type:Type {type: 'xl'}) RETURN machine.name, type.name, type.ram, type.cpu, type.disk LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.release_date >= date('1990-01-01') AND m.release_date < date('2000-01-01') AND m.budget IS NOT NULL RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.release_date >= date('1990-01-01') AND m.release_date < date('2000-01-01') AND m.budget IS NOT NULL RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:INTERACTED]->(:User) WHERE u.color = '#FF4500' RETURN u",
        "gql": "MATCH (u:User)-[:INTERACTED]->(:User) WHERE u.color = '#FF4500' RETURN u"
    },
    {
        "cypher": "MATCH (o:Order) WITH o.shipCountry AS shipCountry, avg(toFloat(o.freight)) AS averageFreight ORDER BY averageFreight DESC LIMIT 5 RETURN shipCountry, averageFreight",
        "gql": "MATCH (o:`Order`) RETURN o.shipCountry AS shipCountry, avg(o.freight) AS averageFreight ORDER BY averageFreight DESC LIMIT 5 NEXT RETURN shipCountry, averageFreight"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '217'}]->(m) WHERE n.article_id='2204' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '217'}]->(m) WHERE n.article_id='2204' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (s:Supplier) RETURN s.contactTitle, COUNT(*) AS titleCount ORDER BY titleCount DESC LIMIT 5",
        "gql": "MATCH (s:Supplier) RETURN s.contactTitle, COUNT(*) AS titleCount ORDER BY titleCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: \"Toy Story Collection\"}) RETURN m.title AS MovieTitle",
        "gql": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: \"Toy Story Collection\"}) RETURN m.title AS MovieTitle"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id IS NOT NULL RETURN n.article_id LIMIT 10",
        "gql": "MATCH (n:Article) WHERE n.article_id IS NOT NULL RETURN n.article_id LIMIT 10"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue IS NOT NULL AND m.release_date < date('1990-01-01') RETURN m ORDER BY m.revenue ASC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.revenue IS NOT NULL AND m.release_date < date('1990-01-01') RETURN m ORDER BY m.revenue ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (me:Me {name: 'Neo4j'})-[:AMPLIFIES]->(user:User) RETURN user ORDER BY user.followers DESC LIMIT 3",
        "gql": "MATCH (me:Me {name: 'Neo4j'})-[:AMPLIFIES]->(user:User) RETURN user ORDER BY user.followers DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[:WRITTEN_BY]->(m:Author) WITH DISTINCT n, m RETURN n.abstract AS abstract, count(m) AS author_count ORDER BY author_count",
        "gql": "MATCH (n:Article)-[:WRITTEN_BY]->(m:Author) RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS author_count ORDER BY author_count"
    },
    {
        "cypher": "MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) WITH e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 5 RETURN e, filingsCount",
        "gql": "MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 5 NEXT RETURN e, filingsCount"
    },
    {
        "cypher": "MATCH (org1:Organization {id: \"E0ZU8eCc5OaqS1LU9qE3n3w\"})-[:IN_CITY]->(city:City) MATCH (org2:Organization)-[:IN_CITY]->(city) WHERE org1 <> org2 RETURN DISTINCT org2.name",
        "gql": "MATCH (org1:Organization {id: \"E0ZU8eCc5OaqS1LU9qE3n3w\"})-[:IN_CITY]->(city:City) MATCH (org2:Organization)-[:IN_CITY]->(city) WHERE org1 <> org2 RETURN DISTINCT org2.name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.released >= '1990-01-01' AND m.released < '2000-01-01' AND m.revenue IS NOT NULL RETURN m ORDER BY m.revenue DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.released >= '1990-01-01' AND m.released < '2000-01-01' AND m.revenue IS NOT NULL RETURN m ORDER BY m.revenue DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.inactivation_date IS NOT NULL RETURN e ORDER BY e.inactivation_date DESC LIMIT 5",
        "gql": "MATCH (e:Entity) WHERE e.inactivation_date IS NOT NULL RETURN e ORDER BY e.inactivation_date DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (org:Organization {isPublic: true})-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: \"United States of America\"}) RETURN org.name AS organizationName",
        "gql": "MATCH (org:Organization {isPublic: true})-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: \"United States of America\"}) RETURN org.name AS organizationName"
    },
    {
        "cypher": "MATCH (z:Zone {zone: 3})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(m:Machine)-[:TYPE]->(t:Type) RETURN t.type AS MachineType, t.name AS TypeName ORDER BY t.id LIMIT 5",
        "gql": "MATCH (z:Zone {zone: 3})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(m:Machine)-[:TYPE]->(t:Type) RETURN t.type AS MachineType, t.name AS TypeName ORDER BY t.id LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m1:Movie)-[:IN_GENRE]->(g1:Genre {name: 'Action'}),       (a)-[:ACTED_IN]->(m2:Movie)-[:IN_GENRE]->(g2:Genre {name: 'Romance'}) WITH a, COUNT(DISTINCT m1) + COUNT(DISTINCT m2) AS movieCount ORDER BY movieCount DESC LIMIT 3 RETURN a.name AS actorName, movieCount",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m1:Movie)-[:IN_GENRE]->(g1:Genre{name:'Action'}) RETURN a, COUNT(m1) AS movieCount ORDER BY movieCount DESC LIMIT 3 NEXT RETURN a.name AS actorName, movieCount"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WITH p, avg(r.rating) AS avg_rating ORDER BY avg_rating DESC LIMIT 3 RETURN p.name AS reviewer, avg_rating",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN p, avg(r.rating) AS avg_rating ORDER BY avg_rating DESC LIMIT 3 NEXT RETURN p.name AS reviewer, avg_rating"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(:Movie) WITH p MATCH (p)-[:PRODUCED]->(:Movie) RETURN DISTINCT p.name",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(:Movie) RETURN p NEXT MATCH (p)-[:PRODUCED]->(:Movie) RETURN DISTINCT p.name"
    },
    {
        "cypher": "MATCH (a:Article {prodName: 'Duo'}) RETURN a.colourGroupCode",
        "gql": "MATCH (a:Article {prodName: 'Duo'}) RETURN a.colourGroupCode"
    },
    {
        "cypher": "MATCH (a:Author{last_name:'Burnol'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Author{last_name:'Burnol'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (q:Question)-[:COMMENTED_ON]-(c:Comment) WITH q, COUNT(c) AS commentCount WHERE commentCount > 0 RETURN q.title AS questionTitle, q.view_count AS viewCount ORDER BY viewCount DESC LIMIT 3",
        "gql": "MATCH (q:Question)-[:COMMENTED_ON]-(c:Comment) RETURN q, COUNT(c) AS commentCount NEXT RETURN q.title AS questionTitle, q.view_count AS viewCount ORDER BY viewCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Topic) MATCH (m:Article) RETURN n.cluster, m.article_id LIMIT 8",
        "gql": "MATCH (n:Topic) MATCH (m:Article) RETURN n.cluster, m.article_id LIMIT 8"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE m.budget > 50000000 RETURN m.title LIMIT 3",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE m.budget > 50000000 RETURN m.title LIMIT 3"
    },
    {
        "cypher": "MATCH (addresses:Addresses) WHERE addresses.city = 'Port Chelsea' RETURN addresses.zip_postcode",
        "gql": "MATCH (addresses:Addresses) WHERE addresses.city = 'Port Chelsea' RETURN addresses.zip_postcode"
    },
    {
        "cypher": "MATCH (u:User {name: \"Bob\"})-[:CREATED]->(c:Comment) RETURN COUNT(c) AS count",
        "gql": "MATCH (u:User{name:\"Bob\"})-[:CREATED]->(c:Comment) RETURN COUNT(c) AS `count`"
    },
    {
        "cypher": "MATCH (T1:Breeds)-[]-(T2:Dogs) WITH T1, count(T1.breed_name) AS cnt RETURN T1.breed_name ORDER BY cnt DESC LIMIT 1",
        "gql": "MATCH (T1:Breeds)-[]-(T2:Dogs) RETURN T1, count(T1.breed_name) AS cnt NEXT RETURN T1.breed_name ORDER BY cnt DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream)<-[:VIP]-(u) RETURN DISTINCT u.name",
        "gql": "MATCH (u:User)-[:MODERATOR]->(s:Stream)<-[:VIP]-(u) RETURN DISTINCT u.name"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'}) RETURN m.title AS MovieTitle LIMIT 3",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'}) RETURN m.title AS MovieTitle LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article {abstract:'  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. '})-[:PUBLISHED_IN {meta: '217'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{`abstract`:'  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. '})-[:PUBLISHED_IN{meta:'217'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.description = 'Collection of techniques and methods for studying the limiting behavior of functions, sequences, and series as certain parameters approach infinity or other special values. Includes concepts such as asymptotic expansions, asymptotic normality, scaling behavior, and Jost asymptotics. Emphasizes the study of asymptotic properties, asymptotic solutions, and asymptotic optimality. Also encompasses topics like approximate normality, asymptotic equivalents, asymptotic expansion of risk difference, and asymptotic relations. May involve the use of O(m log(m B)) notation to describe' RETURN n",
        "gql": "MATCH (n:Topic) WHERE n.description = 'Collection of techniques and methods for studying the limiting behavior of functions, sequences, and series as certain parameters approach infinity or other special values. Includes concepts such as asymptotic expansions, asymptotic normality, scaling behavior, and Jost asymptotics. Emphasizes the study of asymptotic properties, asymptotic solutions, and asymptotic optimality. Also encompasses topics like approximate normality, asymptotic equivalents, asymptotic expansion of risk difference, and asymptotic relations. May involve the use of O(m log(m B)) notation to describe' RETURN n"
    },
    {
        "cypher": "MATCH (e:Entity {name: \"TIANSHENG INDUSTRY AND TRADING CO., LTD.\"}) RETURN e.internal_id",
        "gql": "MATCH (e:Entity {name: \"TIANSHENG INDUSTRY AND TRADING CO., LTD.\"}) RETURN e.internal_id"
    },
    {
        "cypher": "MATCH (n:Campus) WHERE n.County = \"Los Angeles\" RETURN n.Campus",
        "gql": "MATCH (n:Campus) WHERE n.County = \"Los Angeles\" RETURN n.Campus"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.originator_bank_country = f.beneficiary_bank_country RETURN f",
        "gql": "MATCH (f:Filing) WHERE f.originator_bank_country = f.beneficiary_bank_country RETURN f"
    },
    {
        "cypher": "MATCH (c:RefCalendar) RETURN count(*)",
        "gql": "MATCH (c:RefCalendar) RETURN count(*)"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '521-554'}]->(m) WHERE n.article_id='2007' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '521-554'}]->(m) WHERE n.article_id='2007' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product) RETURN p.productName AS productName",
        "gql": "MATCH (s:Supplier{companyName:'Exotic Liquids'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName AS productName"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {backdrop_path: '/9FBwqcd9IRruEDUrTdcaafOMKUq.jpg'}) RETURN m.title",
        "gql": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {backdrop_path: '/9FBwqcd9IRruEDUrTdcaafOMKUq.jpg'}) RETURN m.title"
    },
    {
        "cypher": "MATCH (n:List) RETURN count(n)",
        "gql": "MATCH (n:`List`) RETURN count(n)"
    },
    {
        "cypher": "MATCH (p:paper {name: 'A sequential algorithm for training text classifiers'})<-[:paper_cite_paper]-(c:paper) RETURN c.name",
        "gql": "MATCH (p:paper {name: 'A sequential algorithm for training text classifiers'})<-[:paper_cite_paper]-(c:paper) RETURN c.name"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.originator_bank_country = 'United Kingdom' AND f.amount > 200000 RETURN f LIMIT 3",
        "gql": "MATCH (f:Filing) WHERE f.originator_bank_country = 'United Kingdom' AND f.amount > 200000 RETURN f LIMIT 3"
    },
    {
        "cypher": "MATCH (r:Role) WHERE r.role_code = \"ED\" RETURN r.role_description",
        "gql": "MATCH (r:Role) WHERE r.role_code = \"ED\" RETURN r.role_description"
    },
    {
        "cypher": "MATCH (org1)<-[:HAS_SUPPLIER]-(supplier)-[:HAS_CEO]->(ceo) WITH DISTINCT ceo, org1 MATCH (org1)-[:HAS_COMPETITOR]->(competitor)-[:HAS_CEO]->(ceo) RETURN DISTINCT ceo.name",
        "gql": "MATCH (org1)<-[:HAS_SUPPLIER]-(supplier)-[:HAS_CEO]->(ceo) RETURN DISTINCT ceo, org1 NEXT MATCH (org1)-[:HAS_COMPETITOR]->(competitor)-[:HAS_CEO]->(ceo) RETURN DISTINCT ceo.name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE size(m.languages) > 1 RETURN m.title, m.languages LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE size(m.languages) > 1 RETURN m.title, m.languages LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book45PageRank < 1 RETURN c.name AS character",
        "gql": "MATCH (c:Character) WHERE c.book45PageRank < 1 RETURN c.name AS character"
    },
    {
        "cypher": "MATCH (singer:singer) WHERE singer.Country = 'France' RETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "gql": "MATCH (singer:singer) WHERE singer.Country = 'France' RETURN avg(singer.Age),min(singer.Age),max(singer.Age)"
    },
    {
        "cypher": "MATCH (T1:Student)-[T2:Has_Pet]-(T3:Pets) WHERE T1.Sex = 'F' AND T3.PetType = 'dog' RETURN count(*)",
        "gql": "MATCH (T1:Student)-[T2:Has_Pet]-(T3:Pets) WHERE T1.Sex = 'F' AND T3.PetType = 'dog' RETURN count(*)"
    },
    {
        "cypher": "MATCH (c:Country {name: \"Singapore\"})<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing) WITH min(f.amount) AS minAmount RETURN minAmount",
        "gql": "MATCH (c:Country{name:\"Singapore\"})<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing) RETURN min(f.amount) AS minAmount NEXT RETURN minAmount"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category) WITH c, count(DISTINCT s) AS supplierCount ORDER BY supplierCount DESC LIMIT 3 RETURN c.categoryName, supplierCount",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN c, count(s) AS supplierCount ORDER BY supplierCount DESC LIMIT 3 NEXT RETURN c.categoryName, supplierCount"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) WHERE t.name = 'apollo' WITH u, count(q) AS questionsAsked ORDER BY questionsAsked DESC LIMIT 3 RETURN u.display_name, questionsAsked",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) WHERE t.name = 'apollo' RETURN u, count(q) AS questionsAsked ORDER BY questionsAsked DESC LIMIT 3 NEXT RETURN u.display_name, questionsAsked"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:REVIEWED]-() WHERE size(m.tagline) > 20 RETURN avg(r.rating) AS average_rating",
        "gql": "MATCH (m:Movie)<-[r:REVIEWED]-() WHERE size(m.tagline) > 20 RETURN avg(r.rating) AS average_rating"
    },
    {
        "cypher": "MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet) RETURN t.text, t.favorites ORDER BY t.favorites DESC LIMIT 3",
        "gql": "MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet) RETURN t.text, t.favorites ORDER BY t.favorites DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization {name: \"Accenture\"})-[:HAS_COMPETITOR]->(competitor:Organization) RETURN competitor.name LIMIT 3",
        "gql": "MATCH (o:Organization {name: \"Accenture\"})-[:HAS_COMPETITOR]->(competitor:Organization) RETURN competitor.name LIMIT 3"
    },
    {
        "cypher": "MATCH (n:RefLocation) RETURN count(n)",
        "gql": "MATCH (n:RefLocation) RETURN count(n)"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WITH s, avg(p.unitPrice) AS avgUnitPrice ORDER BY avgUnitPrice DESC LIMIT 3 RETURN s.companyName AS Supplier, avgUnitPrice AS AverageUnitPrice",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, avg(p.unitPrice) AS avgUnitPrice ORDER BY avgUnitPrice DESC LIMIT 3 NEXT RETURN s.companyName AS Supplier, avgUnitPrice AS AverageUnitPrice"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.revenue > 100000000 RETURN g.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.revenue > 100000000 RETURN g.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS2]->(c2:Character) WHERE r.weight < 20 RETURN c1.name AS character1, c2.name AS character2, r.weight AS weight",
        "gql": "MATCH (c1:Character)-[r:INTERACTS2]->(c2:Character) WHERE r.weight < 20 RETURN c1.name AS character1, c2.name AS character2, r.weight AS weight"
    },
    {
        "cypher": "MATCH (e:EnrolledIn) WHERE e.Grade = \"B\" RETURN count(DISTINCT e.StuID)",
        "gql": "MATCH (e:EnrolledIn) WHERE e.Grade = \"B\" RETURN count(DISTINCT e.StuID)"
    },
    {
        "cypher": "MATCH (t:Technician) WHERE t.Age = 36 OR t.Age = 37 RETURN t.Name",
        "gql": "MATCH (t:Technician) WHERE t.Age = 36 OR t.Age = 37 RETURN t.Name"
    },
    {
        "cypher": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician), (T1)-[:ASSIGNED_TO]->(T2:Machine) RETURN T3.Name, T2.Machine_series",
        "gql": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician), (T1)-[:ASSIGNED_TO]->(T2:Machine) RETURN T3.Name, T2.Machine_series"
    },
    {
        "cypher": "MATCH (p:Post)<-[:THREAD_PARENT]-(c:Comment) WITH p, count(c) AS commentsPerThread RETURN avg(commentsPerThread) AS averageCommentsPerThread",
        "gql": "MATCH (p:Post)<-[:THREAD_PARENT]-(c:Comment) RETURN p, count(c) AS commentsPerThread NEXT RETURN avg(commentsPerThread) AS averageCommentsPerThread"
    },
    {
        "cypher": "MATCH (b:Business {name: 'Missoula Public Library'}) MATCH (b)<-[:REVIEWS]-(r:Review) WITH r ORDER BY r.stars ASC RETURN r.date LIMIT 1",
        "gql": "MATCH (b:Business{name:'Missoula Public Library'}) MATCH (b)<-[:REVIEWS]-(r:Review) RETURN r ORDER BY r.stars ASC NEXT RETURN r.`date` LIMIT 1"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q ORDER BY q.createdAt DESC LIMIT 3",
        "gql": "MATCH (q:Question) RETURN q ORDER BY q.createdAt DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.year >= 2001 RETURN sum(m.revenue) AS totalRevenue",
        "gql": "MATCH (m:Movie) WHERE m.`year` >= 2001 RETURN sum(m.revenue) AS totalRevenue"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages='537-560' WITH DISTINCT n, m RETURN n.article_id AS article_id, count(m) AS count LIMIT 20",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '537-560' RETURN DISTINCT n, m NEXT RETURN n.article_id AS article_id, count(m) AS `count` LIMIT 20"
    },
    {
        "cypher": "MATCH (p:Person)<-[:HAS_BOARD_MEMBER]-(o:Organization) WHERE o.motto IS NOT NULL RETURN p.name LIMIT 3",
        "gql": "MATCH (p:Person)<-[:HAS_BOARD_MEMBER]-(o:Organization) WHERE o.motto IS NOT NULL RETURN p.name LIMIT 3"
    },
    {
        "cypher": "MATCH (n:RefShippingAgent) WHERE n.shipping_agent_name = \"UPS\" RETURN n.shipping_agent_code",
        "gql": "MATCH (n:RefShippingAgent) WHERE n.shipping_agent_name = \"UPS\" RETURN n.shipping_agent_code"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review) RETURN u.name, r.date ORDER BY r.date DESC LIMIT 3",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review) RETURN u.name, r.`date` ORDER BY r.`date` DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stadium) WHERE s.Opening_year < 2006 RETURN COUNT(DISTINCT s.City)",
        "gql": "MATCH (s:Stadium) WHERE s.Opening_year < 2006 RETURN COUNT(DISTINCT s.City)"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE m.released >= 1990 AND m.released <= 2000 AND r.rating > 80 RETURN DISTINCT m.title",
        "gql": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE m.released >= 1990 AND m.released <= 2000 AND r.rating > 80 RETURN DISTINCT m.title"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie {title: 'Avatar'}) RETURN d.name AS director_name",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie {title: 'Avatar'}) RETURN d.name AS director_name"
    },
    {
        "cypher": "MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:RUNS]->(s:Service) RETURN s LIMIT 3",
        "gql": "MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:RUNS]->(s:Service) RETURN s LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 5",
        "gql": "MATCH (m:Movie) RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (r:Region) RETURN count(r)",
        "gql": "MATCH (r:Region) RETURN count(r)"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WITH m, size(collect(g)) AS genreCount WHERE genreCount >= 3 RETURN m.title",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m, size(g) AS genreCount NEXT RETURN m.title"
    },
    {
        "cypher": "MATCH (c:Comment)-[:COMMENTED_ON]->(q:Question) WHERE c.score > 2 RETURN DISTINCT q",
        "gql": "MATCH (c:Comment)-[:COMMENTED_ON]->(q:Question) WHERE c.score > 2 RETURN DISTINCT q"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.nbrEmployees IS NOT NULL RETURN o.name AS organization, o.nbrEmployees AS numberOfEmployees ORDER BY o.nbrEmployees DESC LIMIT 3",
        "gql": "MATCH (o:Organization) WHERE o.nbrEmployees IS NOT NULL RETURN o.name AS organization, o.nbrEmployees AS numberOfEmployees ORDER BY o.nbrEmployees DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN count(*)",
        "gql": "MATCH (singer:singer) RETURN count(*)"
    },
    {
        "cypher": "MATCH (o:Order) RETURN o.shipCity AS City, count(o) AS NumberOfShipments ORDER BY NumberOfShipments DESC LIMIT 5",
        "gql": "MATCH (o:`Order`) RETURN o.shipCity AS City, count(o) AS NumberOfShipments ORDER BY NumberOfShipments DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'react-apollo'}) WHERE q.score < 0 RETURN q",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'react-apollo'}) WHERE q.score < 0 RETURN q"
    },
    {
        "cypher": "MATCH (n:List) RETURN n.Classroom, count(DISTINCT n.Grade)",
        "gql": "MATCH (n:`List`) RETURN n.Classroom, count(n.Grade)"
    },
    {
        "cypher": "MATCH (u:User)-[:PROVIDED]->(a:Answer {link: 'https://stackoverflow.com/a/69272967'}) RETURN u.display_name AS user_who_provided_answer",
        "gql": "MATCH (u:User)-[:PROVIDED]->(a:Answer {link: 'https://stackoverflow.com/a/69272967'}) RETURN u.display_name AS user_who_provided_answer"
    },
    {
        "cypher": "MATCH (actor:Actor)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Director) WHERE director.born < date('1950-01-01') RETURN DISTINCT actor.name",
        "gql": "MATCH (actor:Actor)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Director) WHERE director.born < date('1950-01-01') RETURN DISTINCT actor.name"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.first_name = 'Amnon' RETURN n",
        "gql": "MATCH (n:Author) WHERE n.first_name = 'Amnon' RETURN n"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 3 OR n.cluster < 3 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 3 OR n.cluster < 3 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (p:Person) RETURN p.Name ORDER BY p.Name ASC",
        "gql": "MATCH (p:Person) RETURN p.Name ORDER BY p.Name ASC"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:TAGS]->(h:Hashtag) RETURN h.name AS hashtag, COUNT(*) AS usage_count ORDER BY usage_count DESC LIMIT 3",
        "gql": "MATCH (t:Tweet)-[:TAGS]->(h:Hashtag) RETURN h.name AS hashtag, COUNT(*) AS usage_count ORDER BY usage_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (gs:GasStation) WHERE gs.Open_Year >= 2000 AND gs.Open_Year <= 2005 RETURN count(*)",
        "gql": "MATCH (gs:GasStation) WHERE gs.Open_Year >= 2000 AND gs.Open_Year <= 2005 RETURN count(*)"
    },
    {
        "cypher": "MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version) RETURN v.name",
        "gql": "MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version) RETURN v.name"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1052 OR n.article_id < 1013 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1052 OR n.article_id < 1013 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (accenture:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN subsidiary.name",
        "gql": "MATCH (accenture:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN subsidiary.name"
    },
    {
        "cypher": "MATCH (a:DOI{name:'10.1088/0305-4470/33/25/304'})-[*]->(d:Categories{category_id:'b1d13c8b6874949821d038a8a71379d1'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:DOI{name:'10.1088/0305-4470/33/25/304'})-[]->{1,}(d:Categories{category_id:'b1d13c8b6874949821d038a8a71379d1'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Headquarters <> 'USA' RETURN c.Main_Industry, c.Company",
        "gql": "MATCH (c:Company) WHERE c.Headquarters <> 'USA' RETURN c.Main_Industry, c.Company"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(oc:Country),       (f)-[:BENEFITS]->(b:Entity)-[:COUNTRY]->(bc:Country) WHERE oc.code = bc.code RETURN f ORDER BY f.amount DESC LIMIT 5",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(oc:Country),       (f)-[:BENEFITS]->(b:Entity)-[:COUNTRY]->(bc:Country) WHERE oc.code = bc.code RETURN f ORDER BY f.amount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question),       (u)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q) RETURN q LIMIT 5",
        "gql": "MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question),       (u)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q) RETURN q LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title <> 'Subexponential groups in 4-manifold topology' RETURN DISTINCT n.abstract AS abstract",
        "gql": "MATCH (n:Article) WHERE n.title <> 'Subexponential groups in 4-manifold topology' RETURN DISTINCT n.`abstract` AS `abstract`"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.runtime < 80 RETURN g.name AS Genre",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.runtime < 80 RETURN g.name AS Genre"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.average_vote = 7.7 RETURN m.title",
        "gql": "MATCH (m:Movie) WHERE m.average_vote = 7.7 RETURN m.title"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1BetweennessCentrality > 1000 RETURN c.name, c.book1BetweennessCentrality",
        "gql": "MATCH (c:Character) WHERE c.book1BetweennessCentrality > 1000 RETURN c.name, c.book1BetweennessCentrality"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Universal Pictures'}) RETURN m ORDER BY m.average_vote DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Universal Pictures'}) RETURN m ORDER BY m.average_vote DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (t:Tag) OPTIONAL MATCH (t)-[:TAGGED]->(q:Question) WHERE q IS NULL RETURN t.name AS tag_name",
        "gql": "MATCH (t:Tag) OPTIONAL MATCH (t)-[:TAGGED]->(q:Question) WHERE q IS NULL RETURN t.name AS tag_name"
    },
    {
        "cypher": "MATCH (c:Company)-[:LOCATED_IN]->(b:Building) RETURN b.Stories ORDER BY b.Height DESC LIMIT 1",
        "gql": "MATCH (c:Company)-[:LOCATED_IN]->(b:Building) RETURN b.Stories ORDER BY b.Height DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name, c.book1PageRank ORDER BY c.book1PageRank ASC LIMIT 3",
        "gql": "MATCH (c:Character) RETURN c.name, c.book1PageRank ORDER BY c.book1PageRank ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person) RETURN p.Name ORDER BY p.Name ASC",
        "gql": "MATCH (p:Person) RETURN p.Name ORDER BY p.Name ASC"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS]->(c2:Character) RETURN c1.name, c2.name, r.weight ORDER BY r.weight DESC LIMIT 5",
        "gql": "MATCH (c1:Character)-[r:INTERACTS]->(c2:Character) RETURN c1.name, c2.name, r.weight ORDER BY r.weight DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Answer)-[:ANSWERED]->(q:Question) WITH q, a.score AS score ORDER BY score DESC LIMIT 3 RETURN q.title AS QuestionTitle",
        "gql": "MATCH (a:Answer)-[:ANSWERED]->(q:Question) RETURN q, a.score AS score ORDER BY score DESC LIMIT 3 NEXT RETURN q.title AS QuestionTitle"
    },
    {
        "cypher": "MATCH (a:Address) WHERE a.sourceID = 'Bahamas Leaks' RETURN a.address",
        "gql": "MATCH (a:Address) WHERE a.sourceID = 'Bahamas Leaks' RETURN a.address"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born > 1970 RETURN m.title AS MovieTitle, m.released AS ReleaseYear",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born > 1970 RETURN m.title AS MovieTitle, m.released AS ReleaseYear"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(asked_q:Question)-[:TAGGED]->(asked_tag:Tag) MATCH (u)-[:PROVIDED]->(provided_a:Answer)-[:ANSWERED]->(answered_q:Question)-[:TAGGED]->(answered_tag:Tag) WHERE asked_tag.name = answered_tag.name RETURN DISTINCT u.display_name",
        "gql": "MATCH (u:User)-[:ASKED]->(asked_q:Question)-[:TAGGED]->(asked_tag:Tag) MATCH (u)-[:PROVIDED]->(provided_a:Answer)-[:ANSWERED]->(answered_q:Question)-[:TAGGED]->(answered_tag:Tag) WHERE asked_tag.name = answered_tag.name RETURN DISTINCT u.display_name"
    },
    {
        "cypher": "MATCH (o:Organization {name: \"Accenture\"})-[:HAS_SUBSIDIARY]->(s:Organization) RETURN s.name AS subsidiaryName ORDER BY s.revenue DESC LIMIT 5",
        "gql": "MATCH (o:Organization {name: \"Accenture\"})-[:HAS_SUBSIDIARY]->(s:Organization) RETURN s.name AS subsidiaryName ORDER BY s.revenue DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (o:Organization) MATCH (o)<-[:HAS_INVESTOR]-(p)-[:HAS_SUPPLIER]->(o) RETURN DISTINCT o.name",
        "gql": "MATCH (o:Organization) MATCH (o)<-[:HAS_INVESTOR]-(p)-[:HAS_SUPPLIER]->(o) RETURN DISTINCT o.name"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.nbrEmployees > 1000 AND o.isPublic = false RETURN o.name AS organization, o.nbrEmployees AS numberOfEmployees",
        "gql": "MATCH (o:Organization) WHERE o.nbrEmployees > 1000 AND o.isPublic = false RETURN o.name AS organization, o.nbrEmployees AS numberOfEmployees"
    },
    {
        "cypher": "MATCH (a:Author{affiliation:'Nice - Sophia Antipolis'})-[*]->(d:Journal{name:'Topology'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Author{affiliation:'Nice - Sophia Antipolis'})-[]->{1,}(d:Journal{name:'Topology'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (campus:Campus) WHERE campus.Location = \"Chico\" RETURN campus.Campus",
        "gql": "MATCH (campus:Campus) WHERE campus.Location = \"Chico\" RETURN campus.Campus"
    },
    {
        "cypher": "MATCH (shop:shop) RETURN count(*),shop.Location",
        "gql": "MATCH (shop:shop) RETURN count(*),shop.Location"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WITH c.categoryName AS category, SUM(p.unitsInStock) AS totalUnitsInStock ORDER BY totalUnitsInStock DESC LIMIT 5 RETURN category, totalUnitsInStock",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS category, SUM(p.unitsInStock) AS totalUnitsInStock ORDER BY totalUnitsInStock DESC LIMIT 5 NEXT RETURN category, totalUnitsInStock"
    },
    {
        "cypher": "MATCH (n:Author) MATCH (m:Categories) RETURN n.affiliation, m.specifications LIMIT 8",
        "gql": "MATCH (n:Author) MATCH (m:Categories) RETURN n.affiliation, m.specifications LIMIT 8"
    },
    {
        "cypher": "MATCH (s:Storm) WHERE s.Number_Deaths >= 1 RETURN s.Name, s.Dates_active, s.Number_Deaths",
        "gql": "MATCH (s:Storm) WHERE s.Number_Deaths >= 1 RETURN s.Name, s.Dates_active, s.Number_Deaths"
    },
    {
        "cypher": "MATCH (s:Stream) WHERE datetime(s.createdAt).dayOfWeek = 3 RETURN count(s)",
        "gql": "MATCH (s:Stream) WHERE s.createdAt = 3 RETURN count(s)"
    },
    {
        "cypher": "MATCH (n:DOI) WHERE n.doi_id = '01c710839626aa78f11824682bccef1b' RETURN n",
        "gql": "MATCH (n:DOI) WHERE n.doi_id = '01c710839626aa78f11824682bccef1b' RETURN n"
    },
    {
        "cypher": "MATCH (p:Product) WITH p, p.reorderLevel AS reorderLevel ORDER BY reorderLevel DESCENDING RETURN p.productName LIMIT 1",
        "gql": "MATCH (p:`Product`) RETURN p, p.reorderLevel AS reorderLevel ORDER BY reorderLevel DESCENDING NEXT RETURN p.productName LIMIT 1"
    },
    {
        "cypher": "MATCH (p:Paper) RETURN count(p)",
        "gql": "MATCH (p:Paper) RETURN count(p)"
    },
    {
        "cypher": "MATCH (s:Supplier) WHERE s.homePage IS NULL RETURN s",
        "gql": "MATCH (s:Supplier) WHERE s.homePage IS NULL RETURN s"
    },
    {
        "cypher": "MATCH (p:Product)-[o:ORDERS]->() WITH p, sum(o.quantity) AS totalQuantity ORDER BY totalQuantity DESC LIMIT 5 RETURN p.productName, totalQuantity",
        "gql": "MATCH (p:`Product`)-[o:ORDERS]->() RETURN p, sum(o.quantity) AS totalQuantity ORDER BY totalQuantity DESC LIMIT 5 NEXT RETURN p.productName, totalQuantity"
    },
    {
        "cypher": "MATCH (d:Doctor {name: 'Dr. Johnson'})<-[:HAS_DOCTOR]-(p:Patient)-[:HAS_APPOINTMENT]->(:Appointment) MATCH (p)-[:HAS_DIAGNOSIS]->(:Diagnosis)-[:OF_TYPE]->(:DiagnosisType {description: 'Migraine'}) WITH DISTINCT p RETURN p.name as patient",
        "gql": "MATCH (d:Doctor{name:'Dr. Johnson'})<-[:HAS_DOCTOR]-(p:Patient)-[:HAS_APPOINTMENT]->(:Appointment) MATCH (p)-[:HAS_DIAGNOSIS]->(:Diagnosis)-[:OF_TYPE]->(:DiagnosisType{description:'Migraine'}) RETURN DISTINCT p NEXT RETURN p.name AS patient"
    },
    {
        "cypher": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b",
        "gql": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b"
    },
    {
        "cypher": "MATCH (v:Video) RETURN v ORDER BY v.popularity DESC LIMIT 5",
        "gql": "MATCH (v:Video) RETURN v ORDER BY v.popularity DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: \"Rust\"}) RETURN avg(s.followers)",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: \"Rust\"}) RETURN avg(s.followers)"
    },
    {
        "cypher": "MATCH (n) OPTIONAL MATCH (n)-[r]->(m) RETURN n, r, m",
        "gql": "MATCH (n) OPTIONAL MATCH (n)-[r]->(m) RETURN n, r, m"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order) WHERE o.shipCountry = 'France' RETURN c LIMIT 3",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`) WHERE o.shipCountry = 'France' RETURN c LIMIT 3"
    },
    {
        "cypher": "MATCH (f:Filing) RETURN DISTINCT f.originator_iso",
        "gql": "MATCH (f:Filing) RETURN DISTINCT f.originator_iso"
    },
    {
        "cypher": "MATCH (o:Organization {isPublic: false})-[:HAS_CEO]->(ceo:Person) RETURN ceo.name LIMIT 3",
        "gql": "MATCH (o:Organization {isPublic: false})-[:HAS_CEO]->(ceo:Person) RETURN ceo.name LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User) RETURN u ORDER BY u.size DESC LIMIT 5",
        "gql": "MATCH (u:User) RETURN u ORDER BY u.`size` DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie {title: 'Open Season'}) MATCH (m)<-[:DIRECTED]-(d:Director) WITH d MATCH (d)-[:DIRECTED]->(otherMovies:Movie) WITH avg(otherMovies.runtime) AS averageRuntime RETURN averageRuntime",
        "gql": "MATCH (m:Movie{title:'Open Season'}) MATCH (m)<-[:DIRECTED]-(d:Director) MATCH (d)-[:DIRECTED]->(otherMovies:Movie) RETURN d NEXT RETURN averageRuntime"
    },
    {
        "cypher": "MATCH (n:Keyword) WHERE n.key_id = '72e4f3fc2930bd3a0a7730a664d069d6' RETURN n",
        "gql": "MATCH (n:Keyword) WHERE n.key_id = '72e4f3fc2930bd3a0a7730a664d069d6' RETURN n"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.label = 'Mathematical Analysis_8' OR n.description IS NOT NULL RETURN DISTINCT n.description AS description",
        "gql": "MATCH (n:Topic) WHERE n.label = 'Mathematical Analysis_8' OR n.description IS NOT NULL RETURN DISTINCT n.description AS description"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE size(r.text) > 100 RETURN DISTINCT b.name",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE size(r.text) > 100 RETURN DISTINCT b.name"
    },
    {
        "cypher": "MATCH (b:BookClub) RETURN b.Year, b.Book_Title, b.Publisher ORDER BY b.Year DESC",
        "gql": "MATCH (b:BookClub) RETURN b.`Year`, b.Book_Title, b.Publisher ORDER BY b.`Year` DESC"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta='217' WITH DISTINCT n, m RETURN n.comments AS comments, count(m) AS count LIMIT 20",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '217' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` LIMIT 20"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie {title: 'V for Vendetta'}) WHERE p.born > 1960 RETURN p.name, p.born ORDER BY p.born DESC LIMIT 3",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie {title: 'V for Vendetta'}) WHERE p.born > 1960 RETURN p.name, p.born ORDER BY p.born DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title <> 'Chow groups of weighted hypersurfaces' RETURN DISTINCT n.article_id AS article_id",
        "gql": "MATCH (n:Article) WHERE n.title <> 'Chow groups of weighted hypersurfaces' RETURN DISTINCT n.article_id AS article_id"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.beneficiary_bank = 'Barclays Bank Plc' RETURN e.name ORDER BY f.begin LIMIT 3",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.beneficiary_bank = 'Barclays Bank Plc' RETURN e.name ORDER BY f.begin LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Product) RETURN COUNT(p)",
        "gql": "MATCH (p:`Product`) RETURN COUNT(p)"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:AMPLIFIES]->(user:User)-[:POSTS]->(tweet:Tweet) RETURN tweet ORDER BY tweet.created_at ASC LIMIT 3",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:AMPLIFIES]->(user:User)-[:POSTS]->(tweet:Tweet) RETURN tweet ORDER BY tweet.created_at ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Course) WHERE c.Credits > 2 RETURN count(c)",
        "gql": "MATCH (c:Course) WHERE c.Credits > 2 RETURN count(c)"
    },
    {
        "cypher": "MATCH (d:Department) WHERE d.Building = \"Mergenthaler\" RETURN d.DName",
        "gql": "MATCH (d:Department) WHERE d.Building = \"Mergenthaler\" RETURN d.DName"
    },
    {
        "cypher": "MATCH (n:RefDocumentType) RETURN count(*)",
        "gql": "MATCH (n:RefDocumentType) RETURN count(*)"
    },
    {
        "cypher": "MATCH (n:Author), (:Journal {name: 'Topology'}) WHERE NOT (n) --> (:Journal) RETURN n.last_name",
        "gql": "MATCH (n:Author), (:Journal {name: 'Topology'}) WHERE NOT (n) --> (:Journal) RETURN n.last_name"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.Headquarters ORDER BY c.Sales_in_Billion DESC LIMIT 1",
        "gql": "MATCH (c:Company) RETURN c.Headquarters ORDER BY c.Sales_in_Billion DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.runtime > 120 AND m.released > '2000-01-01' RETURN m.title, m.released, m.runtime",
        "gql": "MATCH (m:Movie) WHERE m.runtime > 120 AND m.released > '2000-01-01' RETURN m.title, m.released, m.runtime"
    },
    {
        "cypher": "MATCH (a:Adult) RETURN a.title, a.popularity ORDER BY a.popularity DESC LIMIT 5",
        "gql": "MATCH (a:Adult) RETURN a.title, a.popularity ORDER BY a.popularity DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.key_id='c807a6943bac079cc85fda45518ea7f4' RETURN m.label",
        "gql": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.key_id='c807a6943bac079cc85fda45518ea7f4' RETURN m.label"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Adventure'}) WITH a, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 5 RETURN a.name, movies_count",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre{name:'Adventure'}) RETURN a, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 5 NEXT RETURN a.name, movies_count"
    },
    {
        "cypher": "MATCH (c:City) WHERE c.Population > 1000 WITH c MATCH (fc:Farm_competition)-[:TAKES_PLACE_IN]->(c) RETURN fc.Theme",
        "gql": "MATCH (c:City) WHERE c.Population > 1000 RETURN c NEXT MATCH (fc:Farm_competition)-[:TAKES_PLACE_IN]->(c) RETURN fc.Theme"
    },
    {
        "cypher": "MATCH (p:Product) WITH max(p.unitPrice) AS maxPrice MATCH (p:Product {unitPrice: maxPrice}) MATCH (s:Supplier)-[:SUPPLIES]->(p) RETURN s.companyName",
        "gql": "MATCH (p:`Product`) RETURN max(p.unitPrice) AS maxPrice NEXT MATCH (p:`Product`{unitPrice:maxPrice}) MATCH (s:Supplier)-[:SUPPLIES]->(p) RETURN s.companyName"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 4 OR n.cluster < 6 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 4 OR n.cluster < 6 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: \"Italy\"}) WHERE o.isPublic = true RETURN o ORDER BY o.revenue DESC LIMIT 3",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: \"Italy\"}) WHERE o.isPublic = true RETURN o ORDER BY o.revenue DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.runtime > 150 MATCH (p:Person)-[:CAST_FOR]->(m) RETURN DISTINCT p.name LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.runtime > 150 MATCH (p:Person)-[:CAST_FOR]->(m) RETURN DISTINCT p.name LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q ORDER BY q.createdAt ASC LIMIT 1",
        "gql": "MATCH (q:Question) RETURN q ORDER BY q.createdAt ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) WITH c.name AS CountryName, SUM(f.amount) AS TotalAmount RETURN CountryName, TotalAmount ORDER BY TotalAmount DESC LIMIT 5",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.name AS CountryName, SUM(f.amount) AS TotalAmount NEXT RETURN CountryName, TotalAmount ORDER BY TotalAmount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN singer.name,singer.country,singer.age ORDER BY singer.age DESC",
        "gql": "MATCH (singer:singer) RETURN singer.name,singer.country,singer.age ORDER BY singer.age DESC"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1BetweennessCentrality > 1000 RETURN c.name AS character",
        "gql": "MATCH (c:Character) WHERE c.book1BetweennessCentrality > 1000 RETURN c.name AS character"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.released >= 2005 AND m.released <= 2010   AND m.tagline = 'Speed has no limits' RETURN m.title",
        "gql": "MATCH (m:Movie) WHERE m.released >= 2005 AND m.released <= 2010   AND m.tagline = 'Speed has no limits' RETURN m.title"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount < 500000 RETURN e.name AS OriginatorEntity ORDER BY e.name LIMIT 3",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount < 500000 RETURN e.name AS OriginatorEntity ORDER BY e.name LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue = 0 RETURN m.title",
        "gql": "MATCH (m:Movie) WHERE m.revenue = 0 RETURN m.title"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: \"Technology\"}) RETURN o LIMIT 5",
        "gql": "MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: \"Technology\"}) RETURN o LIMIT 5"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS2]->(c2:Character) WHERE r.weight > 50 RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS Weight",
        "gql": "MATCH (c1:Character)-[r:INTERACTS2]->(c2:Character) WHERE r.weight > 50 RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS Weight"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.released = \"1995-12-25\" WITH a, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 5 RETURN a.name AS actorName, movieCount",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.released = \"1995-12-25\" RETURN a, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 5 NEXT RETURN a.name AS actorName, movieCount"
    },
    {
        "cypher": "MATCH (j:Job) RETURN j.location, COUNT(j) as job_count",
        "gql": "MATCH (j:Job) RETURN j.location, COUNT(j) as job_count"
    },
    {
        "cypher": "MATCH (director:Person)-[:CREW_FOR {job: \"Director\"}]->(movie:Movie) MATCH (director)-[:CAST_FOR]->(acted_movie:Movie) RETURN DISTINCT movie.title AS DirectedMovies",
        "gql": "MATCH (director:Person)-[:CREW_FOR {job: \"Director\"}]->(movie:Movie) MATCH (director)-[:CAST_FOR]->(acted_movie:Movie) RETURN DISTINCT movie.title AS DirectedMovies"
    },
    {
        "cypher": "MATCH (targetOrg:Organization {name: \"Deja vu Security\"})-[:HAS_CATEGORY]->(category:IndustryCategory)<-[:HAS_CATEGORY]-(sameCategoryOrg:Organization) WITH DISTINCT sameCategoryOrg MATCH (sameCategoryOrg)<-[:HAS_SUPPLIER]-(supplierOrg:Organization) WITH avg(supplierOrg.nbrEmployees) AS averageEmployees RETURN averageEmployees",
        "gql": "MATCH (targetOrg:Organization{name:\"Deja vu Security\"})-[:HAS_CATEGORY]->(category:IndustryCategory)<-[:HAS_CATEGORY]-(sameCategoryOrg:Organization) MATCH (sameCategoryOrg)<-[:HAS_SUPPLIER]-(supplierOrg:Organization) RETURN DISTINCT sameCategoryOrg NEXT RETURN averageEmployees"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.originator_bank IS NOT NULL AND f.beneficiary_bank IS NOT NULL MATCH (f)-[:ORIGINATOR]->(originator:Entity {name: f.originator_bank}) MATCH (f)-[:CONCERNS]->(beneficiary:Entity {name: f.beneficiary_bank}) WHERE originator.location = beneficiary.location RETURN f.id",
        "gql": "MATCH (f:Filing) WHERE f.originator_bank IS NOT NULL AND f.beneficiary_bank IS NOT NULL MATCH (f)-[:ORIGINATOR]->(originator:Entity {name: f.originator_bank}) MATCH (f)-[:CONCERNS]->(beneficiary:Entity {name: f.beneficiary_bank}) WHERE originator.location = beneficiary.location RETURN f.id"
    },
    {
        "cypher": "MATCH (r:Role) RETURN r.Role_Code, r.Role_Name, r.Role_Description",
        "gql": "MATCH (r:Role) RETURN r.Role_Code, r.Role_Name, r.Role_Description"
    },
    {
        "cypher": "MATCH (book:Book), (publication:Publication) where publication.Book_ID =  book.Book_ID return book.Title as Title, publication.Publication_Date as publicationDate",
        "gql": "MATCH (book:Book), (publication:Publication) where publication.Book_ID =  book.Book_ID return book.Title as Title, publication.Publication_Date as publicationDate"
    },
    {
        "cypher": "MATCH (n:DOI) WHERE n.doi_id = '673313cb2dcde5d215a7e7ec2788f676' RETURN n",
        "gql": "MATCH (n:DOI) WHERE n.doi_id = '673313cb2dcde5d215a7e7ec2788f676' RETURN n"
    },
    {
        "cypher": "MATCH (org:Organization)-[:IN_CITY]->(city:City {name: \"Seattle\"}) MATCH (article:Article)-[:MENTIONS]->(org) RETURN article.title, article.date, article.sentiment ORDER BY article.sentiment DESC LIMIT 3",
        "gql": "MATCH (org:Organization)-[:IN_CITY]->(city:City{name:\"Seattle\"}) MATCH (article:Article)-[:MENTIONS]->(org) RETURN article.title, article.`date`, article.sentiment ORDER BY article.sentiment DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget > 50000000 RETURN a.name AS actorName, m.title AS movieTitle, m.budget AS movieBudget LIMIT 3",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget > 50000000 RETURN a.name AS actorName, m.title AS movieTitle, m.budget AS movieBudget LIMIT 3"
    },
    {
        "cypher": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert) WHERE T3.year = 2014 RETURN T2.name",
        "gql": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert) WHERE T3.`year` = 2014 RETURN T2.name"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country {name: 'Italy'}) WHERE o.isPublic IS NOT NULL AND o.isPublic = true RETURN o.name AS organization, o.summary AS summary ORDER BY o.revenue DESC LIMIT 3",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country {name: 'Italy'}) WHERE o.isPublic IS NOT NULL AND o.isPublic = true RETURN o.name AS organization, o.summary AS summary ORDER BY o.revenue DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.tagline = 'What price would you put on your health?' RETURN m ORDER BY m.average_vote DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.tagline = 'What price would you put on your health?' RETURN m ORDER BY m.average_vote DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: \"Seattle\"}) RETURN o.name AS Organization, o.nbrEmployees AS Employees ORDER BY o.nbrEmployees DESC LIMIT 1",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: \"Seattle\"}) RETURN o.name AS Organization, o.nbrEmployees AS Employees ORDER BY o.nbrEmployees DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (campus:Campus) WHERE campus.Location = \"Chico\" RETURN campus.Campus",
        "gql": "MATCH (campus:Campus) WHERE campus.Location = \"Chico\" RETURN campus.Campus"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United States' RETURN f",
        "gql": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United States' RETURN f"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.isDissolved = false RETURN o.name, o.revenue ORDER BY o.revenue ASC LIMIT 3",
        "gql": "MATCH (o:Organization) WHERE o.isDissolved = false RETURN o.name, o.revenue ORDER BY o.revenue ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.release_date.year > 2010 RETURN m",
        "gql": "MATCH (m:Movie) WHERE m.release_date > 2010 RETURN m"
    },
    {
        "cypher": "MATCH (e:Employee) WHERE e.Employee_Name = 'Armani' RETURN e.Employee_Name, e.Role_Code, e.Date_of_Birth",
        "gql": "MATCH (e:Employee) WHERE e.Employee_Name = 'Armani' RETURN e.Employee_Name, e.Role_Code, e.Date_of_Birth"
    },
    {
        "cypher": "MATCH (s:Service)-[:LISTENS]->(p:Port {port: 80}) RETURN s.name AS service_name LIMIT 3",
        "gql": "MATCH (s:Service)-[:LISTENS]->(p:Port {port: 80}) RETURN s.name AS service_name LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article{title:'Computing the Top Betti Numbers of Semi-algebraic Sets Defined by   Quadratic Inequalities in Polynomial Time'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Computing the Top Betti Numbers of Semi-algebraic Sets Defined by   Quadratic Inequalities in Polynomial Time'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (o:Officer) WHERE o.country_codes = 'KOR' RETURN o.name AS officer_name, o.country_codes AS country_code",
        "gql": "MATCH (o:Officer) WHERE o.country_codes = 'KOR' RETURN o.name AS officer_name, o.country_codes AS country_code"
    },
    {
        "cypher": "MATCH (t:Technician) RETURN count(t)",
        "gql": "MATCH (t:Technician) RETURN count(t)"
    },
    {
        "cypher": "MATCH (fc:Farm_competition)-[:TAKES_PLACE_IN]->(c:City) RETURN fc.Year, c.Official_Name",
        "gql": "MATCH (fc:Farm_competition)-[:TAKES_PLACE_IN]->(c:City) RETURN fc.`Year`, c.Official_Name"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Industry = \"Banking\" OR c.Industry = \"Conglomerate\" RETURN count(*)",
        "gql": "MATCH (c:Company) WHERE c.Industry = \"Banking\" OR c.Industry = \"Conglomerate\" RETURN count(*)"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) WITH p, COUNT(m) AS directedMovies ORDER BY directedMovies DESC LIMIT 1 RETURN p.name AS director, directedMovies",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) RETURN p, COUNT(m) AS directedMovies ORDER BY directedMovies DESC LIMIT 1 NEXT RETURN p.name AS director, directedMovies"
    },
    {
        "cypher": "MATCH (s:Sensor)-[d:DETECTS]->(p:Pollutant {name: 'CO2'}) WITH s, d.value AS level ORDER BY level DESC LIMIT 1 RETURN s as sensor",
        "gql": "MATCH (s:Sensor)-[d:DETECTS]->(p:Pollutant{name:'CO2'}) RETURN s, d.`value` AS level ORDER BY level DESC LIMIT 1 NEXT RETURN s AS sensor"
    },
    {
        "cypher": "MATCH (t:Tag {name: 'cypher'})<-[:TAGGED]-(q:Question)<-[:ANSWERED]-(a:Answer) WITH max(a.score) AS max_score MATCH (a:Answer {score: max_score})-[:PROVIDED]-(u:User) RETURN u.display_name",
        "gql": "MATCH (t:Tag{name:'cypher'})<-[:TAGGED]-(q:Question)<-[:ANSWERED]-(a:Answer) RETURN max(a.score) AS max_score NEXT MATCH (a:Answer{score:max_score})-[:PROVIDED]-(u:User) RETURN u.display_name"
    },
    {
        "cypher": "MATCH (rf:Character {name: \"Ryman-Frey\"})-[:INTERACTS45]-(other) WITH avg(other.degree) AS avg_degree RETURN avg_degree",
        "gql": "MATCH (rf:Character{name:\"Ryman-Frey\"})-[:INTERACTS45]-(other) RETURN avg(other.degree) AS avg_degree NEXT RETURN avg_degree"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1071 OR n.article_id < 1015 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1071 OR n.article_id < 1015 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (s:Supplier) WHERE s.homePage IS NULL RETURN s",
        "gql": "MATCH (s:Supplier) WHERE s.homePage IS NULL RETURN s"
    },
    {
        "cypher": "MATCH (t:Technician) RETURN t.Starting_Year ORDER BY t.Age DESC LIMIT 1",
        "gql": "MATCH (t:Technician) RETURN t.Starting_Year ORDER BY t.Age DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.runtime ORDER BY m.runtime ASC LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.runtime ORDER BY m.runtime ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.revenue > 50000000 RETURN DISTINCT country.name AS Country",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.revenue > 50000000 RETURN DISTINCT country.name AS Country"
    },
    {
        "cypher": "MATCH (r:Role) WHERE r.Role_Code = \"MG\" RETURN r.Role_Name, r.Role_Description",
        "gql": "MATCH (r:Role) WHERE r.Role_Code = \"MG\" RETURN r.Role_Name, r.Role_Description"
    },
    {
        "cypher": "MATCH (m:Machine)-[:RUNS]->(s:Service)-[:LISTENS]->(p:Port {port: 80}) RETURN m.name AS machine_name",
        "gql": "MATCH (m:Machine)-[:RUNS]->(s:Service)-[:LISTENS]->(p:Port {port: 80}) RETURN m.name AS machine_name"
    },
    {
        "cypher": "MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface) RETURN i",
        "gql": "MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface) RETURN i"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.Company, c.Rank ORDER BY c.Sales_billion DESC",
        "gql": "MATCH (c:Company) RETURN c.Company, c.Rank ORDER BY c.Sales_billion DESC"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '527-551' RETURN n.comments AS comments, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '527-551' RETURN n.comments AS comments, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.score = 0 RETURN q ORDER BY q.createdAt LIMIT 3",
        "gql": "MATCH (q:Question) WHERE q.score = 0 RETURN q ORDER BY q.createdAt LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Author{first_name:'Alexander'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Author{first_name:'Alexander'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) RETURN e.name AS Beneficiary, sum(f.amount) AS TotalAmountReceived ORDER BY TotalAmountReceived DESC LIMIT 5",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) RETURN e.name AS Beneficiary, sum(f.amount) AS TotalAmountReceived ORDER BY TotalAmountReceived DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c1:Character)-[i:INTERACTS]->(c2:Character) RETURN c1.community, count(*) AS frequency ORDER BY frequency DESC LIMIT 3",
        "gql": "MATCH (c1:Character)-[i:INTERACTS]->(c2:Character) RETURN c1.community, count(*) AS frequency ORDER BY frequency DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Artifact)-[r:INCLUDED_IN]->(e:Exhibit)  RETURN a.name  ORDER BY r.date_added  LIMIT 1",
        "gql": "MATCH (a:Artifact)-[r:INCLUDED_IN]->(e:Exhibit)  RETURN a.name  ORDER BY r.date_added  LIMIT 1"
    },
    {
        "cypher": "MATCH (t:Tweet)<-[:RETWEETS]-(retweeted:Tweet) RETURN t, count(retweeted) AS retweets ORDER BY retweets DESC LIMIT 3",
        "gql": "MATCH (t:Tweet)<-[:RETWEETS]-(retweeted:Tweet) RETURN t, count(retweeted) AS retweets ORDER BY retweets DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'France'}) RETURN m.title LIMIT 5",
        "gql": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'France'}) RETURN m.title LIMIT 5"
    },
    {
        "cypher": "MATCH (t:Transaction) WHERE date(t.date).year=2021 RETURN SUM(t.amount) AS total_amount",
        "gql": "MATCH (t:Transaction) WHERE t.`date` = 2021 RETURN SUM(t.amount) AS total_amount"
    },
    {
        "cypher": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) WITH p, COUNT(DISTINCT pc) AS productionCompanyCount WHERE productionCompanyCount >= 5 MATCH (p)-[:CAST_FOR]->(m2:Movie) WITH p, m2 ORDER BY m2.release_date ASC WITH p, COLLECT(DISTINCT m2)[..3] AS firstThreeMovies RETURN p.name AS actor, firstThreeMovies LIMIT 3",
        "gql": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) MATCH (p)-[:CAST_FOR]->(m2:Movie) RETURN p, COUNT(pc) AS productionCompanyCount NEXT RETURN p.name AS actor, firstThreeMovies LIMIT 3"
    },
    {
        "cypher": "MATCH p=(a:Author{affiliation:'unspecified'})-[*]->(d:Article{article_id:'1010'}) RETURN count(p)",
        "gql": "MATCH (a:Author{affiliation:'unspecified'})-[]->{1,}(d:Article{article_id:'1010'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (n:Journal) MATCH (m:Keyword) RETURN n.journal_id, m.key_id LIMIT 8",
        "gql": "MATCH (n:Journal) MATCH (m:Keyword) RETURN n.journal_id, m.key_id LIMIT 8"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Tim Allen\"})-[:CAST_FOR]->(m:Movie {title: \"Crazy on the Outside\"}) RETURN m.title AS MovieTitle, p.name AS ActorName, m.id AS MovieID",
        "gql": "MATCH (p:Person {name: \"Tim Allen\"})-[:CAST_FOR]->(m:Movie {title: \"Crazy on the Outside\"}) RETURN m.title AS MovieTitle, p.name AS ActorName, m.id AS MovieID"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) WITH b, count(DISTINCT u) AS userCount WHERE userCount > 1 RETURN b LIMIT 3",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN b, count(u) AS userCount NEXT RETURN b LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet) WHERE t.favorites > 300 RETURN t ORDER BY t.created_at ASC LIMIT 3",
        "gql": "MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet) WHERE t.favorites > 300 RETURN t ORDER BY t.created_at ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity {internal_id: \"1000914\"}) RETURN e.jurisdiction_description",
        "gql": "MATCH (e:Entity {internal_id: \"1000914\"}) RETURN e.jurisdiction_description"
    },
    {
        "cypher": "MATCH (a:Adult {tagline: 'Humiliation. Rape. Murder. You know the drill.'}) RETURN a LIMIT 3",
        "gql": "MATCH (a:Adult {tagline: 'Humiliation. Rape. Murder. You know the drill.'}) RETURN a LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.degree < 10 RETURN c.name",
        "gql": "MATCH (c:Character) WHERE c.degree < 10 RETURN c.name"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank_country = 'United Arab Emirates' RETURN e.name LIMIT 3",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank_country = 'United Arab Emirates' RETURN e.name LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Campus) RETURN count(*)",
        "gql": "MATCH (n:Campus) RETURN count(*)"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.originator_bank_country = 'United Kingdom' RETURN e.name AS entity, COUNT(f) AS filings_count ORDER BY filings_count DESC LIMIT 1",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.originator_bank_country = 'United Kingdom' RETURN e.name AS entity, COUNT(f) AS filings_count ORDER BY filings_count DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (singer:singer) WHERE singer.country = 'France' RETURN avg(singer.age),min(singer.age),max(singer.age)",
        "gql": "MATCH (singer:singer) WHERE singer.country = 'France' RETURN avg(singer.age),min(singer.age),max(singer.age)"
    },
    {
        "cypher": "MATCH (a:Article{title:'Hyper-K{\\\"a}hler Hierarchies and their twistor theory'})-[:PUBLISHED_IN]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Hyper-K{\\\"a}hler Hierarchies and their twistor theory'})-[:PUBLISHED_IN]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (a:Address {address: 'ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.'})<-[:registered_address]-(e:Entity) RETURN e",
        "gql": "MATCH (a:Address {address: 'ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.'})<-[:registered_address]-(e:Entity) RETURN e"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m ORDER BY m.budget DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m ORDER BY m.budget DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (b:Business {name: 'Missoula Public Library'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN COUNT(DISTINCT u) AS numberOfUsers",
        "gql": "MATCH (b:Business {name: 'Missoula Public Library'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN COUNT(DISTINCT u) AS numberOfUsers"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.motto <> \"\" RETURN o.name",
        "gql": "MATCH (o:Organization) WHERE o.motto <> \"\" RETURN o.name"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating = 100 RETURN p.name",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating = 100 RETURN p.name"
    },
    {
        "cypher": "MATCH (n:Article) -[wr:WRITTEN_BY]->(m) WHERE n.article_id='1006' RETURN m.author_id",
        "gql": "MATCH (n:Article) -[wr:WRITTEN_BY]->(m) WHERE n.article_id='1006' RETURN m.author_id"
    },
    {
        "cypher": "MATCH (a:Categories{category_id:'f2012d79fe17f02edc7542435cc04510'})-[*]->(d:Article{title:'Chow groups of weighted hypersurfaces'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Categories{category_id:'f2012d79fe17f02edc7542435cc04510'})-[]->{1,}(d:Article{title:'Chow groups of weighted hypersurfaces'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (b:Business {name: 'Zootown Brew'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name AS userName",
        "gql": "MATCH (b:Business {name: 'Zootown Brew'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name AS userName"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.popularity IS NOT NULL AND m.revenue IS NOT NULL RETURN m.title, m.popularity, m.revenue ORDER BY m.popularity DESC, m.revenue ASC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.popularity IS NOT NULL AND m.revenue IS NOT NULL RETURN m.title, m.popularity, m.revenue ORDER BY m.popularity DESC, m.revenue ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[r:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Comedy'}) RETURN u.name AS user, count(r) AS comedyRatings ORDER BY comedyRatings DESC LIMIT 5",
        "gql": "MATCH (u:User)-[r:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Comedy'}) RETURN u.name AS user, count(r) AS comedyRatings ORDER BY comedyRatings DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.status = 'Released' RETURN m.title, m.revenue ORDER BY m.revenue ASC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.status = 'Released' RETURN m.title, m.revenue ORDER BY m.revenue ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question)<-[:ANSWERED]-(a:Answer)<-[:PROVIDED]-(u) WHERE q.accepted_answer_id = a.uuid RETURN q ORDER BY q.creation_date LIMIT 5",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question)<-[:ANSWERED]-(a:Answer)<-[:PROVIDED]-(u) WHERE q.accepted_answer_id = a.uuid RETURN q ORDER BY q.creation_date LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) MATCH (p)-[:DIRECTED]->(m2:Movie) WHERE m.title = m2.title RETURN m.title AS MovieTitle, p.name AS ProducerDirector",
        "gql": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) MATCH (p)-[:DIRECTED]->(m2:Movie) WHERE m.title = m2.title RETURN m.title AS MovieTitle, p.name AS ProducerDirector"
    },
    {
        "cypher": "MATCH (me:Me)-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet)-[:MENTIONS]->(user:User) RETURN user.screen_name, COUNT(*) AS mention_count ORDER BY mention_count DESC LIMIT 3",
        "gql": "MATCH (me:Me)-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet)-[:MENTIONS]->(user:User) RETURN user.screen_name, COUNT(*) AS mention_count ORDER BY mention_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released DESC LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity)<-[:BENEFITS]-(f:Filing) WITH e, SUM(f.amount) AS total_received ORDER BY total_received DESC LIMIT 5 RETURN e.name AS entity_name, total_received",
        "gql": "MATCH (e:Entity)<-[:BENEFITS]-(f:Filing) RETURN e, SUM(f.amount) AS total_received ORDER BY total_received DESC LIMIT 5 NEXT RETURN e.name AS entity_name, total_received"
    },
    {
        "cypher": "MATCH (v:Video) WHERE v.runtime < 90 RETURN v.title, v.popularity ORDER BY v.popularity DESC LIMIT 3",
        "gql": "MATCH (v:Video) WHERE v.runtime < 90 RETURN v.title, v.popularity ORDER BY v.popularity DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN p.name AS person, m.title AS movie, size(r.roles) AS num_roles ORDER BY num_roles DESC LIMIT 1",
        "gql": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN p.name AS person, m.title AS movie, size(r.roles) AS num_roles ORDER BY num_roles DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (u1:User)-[:WROTE]->(r1:Review)-[:REVIEWS]->(b1:Business)-[:IN_CATEGORY]->(c1:Category) MATCH (u2:User)-[:WROTE]->(r2:Review)-[:REVIEWS]->(b2:Business)-[:IN_CATEGORY]->(c2:Category) WHERE u1.userId <> u2.userId AND c1.name <> c2.name RETURN DISTINCT u1.name, u2.name",
        "gql": "MATCH (u1:User)-[:WROTE]->(r1:Review)-[:REVIEWS]->(b1:Business)-[:IN_CATEGORY]->(c1:Category) MATCH (u2:User)-[:WROTE]->(r2:Review)-[:REVIEWS]->(b2:Business)-[:IN_CATEGORY]->(c2:Category) WHERE u1.userId <> u2.userId AND c1.name <> c2.name RETURN DISTINCT u1.name, u2.name"
    },
    {
        "cypher": "MATCH (a:UpdateDate{update_date:'2014-01-15'})-[*]->(d:Article{title:'Solutions to congruences using sets with the property of Baire'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:UpdateDate{update_date:'2014-01-15'})-[]->{1,}(d:Article{title:'Solutions to congruences using sets with the property of Baire'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Missoula'}) RETURN b.name, b.address, b.city, b.state, b.businessId LIMIT 5",
        "gql": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Missoula'}) RETURN b.name, b.address, b.city, b.state, b.businessId LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.Company, c.Headquarters ORDER BY c.Market_Value DESC",
        "gql": "MATCH (c:Company) RETURN c.Company, c.Headquarters ORDER BY c.Market_Value DESC"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing) WITH e, count(f) AS filingsCount WHERE filingsCount > 30 MATCH (e)-[:COUNTRY]->(c:Country) RETURN c.name, count(DISTINCT e) AS entityCount ORDER BY entityCount DESC LIMIT 3",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing) RETURN e, count(f) AS filingsCount NEXT MATCH (e)-[:COUNTRY]->(c:Country) RETURN c.name, count(e) AS entityCount ORDER BY entityCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) WITH m, count(pc) AS production_company_count WHERE production_company_count > 1 RETURN m.title AS movie_title, production_company_count",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) RETURN m, count(pc) AS production_company_count NEXT RETURN m.title AS movie_title, production_company_count"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '227'}]->(m) WHERE n.article_id='6147' RETURN m.name",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '227'}]->(m) WHERE n.article_id='6147' RETURN m.name"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '222'}]->(m) WHERE n.title='Notes for a Quantum Index Theorem' RETURN m.name",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '222'}]->(m) WHERE n.title='Notes for a Quantum Index Theorem' RETURN m.name"
    },
    {
        "cypher": "MATCH (question:Question)<-[:ANSWERED]-(answer:Answer) WITH question, count(DISTINCT answer) AS answer_count WHERE answer_count > 1 RETURN question.title",
        "gql": "MATCH (question:Question)<-[:ANSWERED]-(answer:Answer) RETURN question, count(answer) AS answer_count NEXT RETURN question.title"
    },
    {
        "cypher": "MATCH (c:Character)-[i:INTERACTS2]->(other:Character) WHERE i.book = 2 AND i.weight > 50 RETURN c.name",
        "gql": "MATCH (c:Character)-[i:INTERACTS2]->(other:Character) WHERE i.book = 2 AND i.weight > 50 RETURN c.name"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'}) WITH m ORDER BY m.revenue DESC LIMIT 3 RETURN m",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Animation'}) RETURN m ORDER BY m.revenue DESC LIMIT 3 NEXT RETURN m"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.isPublic = true RETURN c.name AS city, count(*) AS numPublicOrgs ORDER BY numPublicOrgs DESC LIMIT 5",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.isPublic = true RETURN c.name AS city, count(*) AS numPublicOrgs ORDER BY numPublicOrgs DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE m.released < 2000 WITH p, count(r) AS reviews ORDER BY reviews DESC LIMIT 3 RETURN p.name AS PersonName, reviews AS NumberOfReviews",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE m.released < 2000 RETURN p, count(r) AS reviews ORDER BY reviews DESC LIMIT 3 NEXT RETURN p.name AS PersonName, reviews AS NumberOfReviews"
    },
    {
        "cypher": "MATCH (T1:TV_Channel)-[]-(T2:Cartoon) WHERE T2.Written_by = 'Todd Casey' RETURN T1.Country",
        "gql": "MATCH (T1:TV_Channel)-[]-(T2:Cartoon) WHERE T2.Written_by = 'Todd Casey' RETURN T1.Country"
    },
    {
        "cypher": "MATCH (c:Customer) WHERE c.contactTitle = 'Sales Representative' AND c.city = 'Berlin' RETURN c",
        "gql": "MATCH (c:Customer) WHERE c.contactTitle = 'Sales Representative' AND c.city = 'Berlin' RETURN c"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:DIRECTED]-(d:Director) WHERE m.budget > 200000000 WITH d, avg(m.imdbRating) AS averageRating RETURN d.name AS directorName, averageRating ORDER BY averageRating DESC LIMIT 1",
        "gql": "MATCH (m:Movie)<-[:DIRECTED]-(d:Director) WHERE m.budget > 200000000 RETURN d, avg(m.imdbRating) AS averageRating NEXT RETURN d.name AS directorName, averageRating ORDER BY averageRating DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WHERE p.unitsOnOrder = 0 RETURN DISTINCT c.categoryName LIMIT 3",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.unitsOnOrder = 0 RETURN DISTINCT c.categoryName LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'}) WITH s, count(p) as productCount ORDER BY productCount DESC LIMIT 3 RETURN s.companyName AS supplierName, productCount",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Beverages'}) RETURN s, count(p) AS productCount ORDER BY productCount DESC LIMIT 3 NEXT RETURN s.companyName AS supplierName, productCount"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing)-[:BENEFITS]->(b:Entity) WHERE b.country = 'China' WITH e, count(f) AS transactions ORDER BY transactions DESC LIMIT 3 RETURN e",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing)-[:BENEFITS]->(b:Entity) WHERE b.country = 'China' RETURN e, count(f) AS transactions ORDER BY transactions DESC LIMIT 3 NEXT RETURN e"
    },
    {
        "cypher": "MATCH (c:Company) RETURN count(c)",
        "gql": "MATCH (c:Company) RETURN count(c)"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.degree = 0.0 RETURN count(c)",
        "gql": "MATCH (c:Character) WHERE c.degree = 0.0 RETURN count(c)"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Science Fiction'}) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Science Fiction'}) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.label = 'Mathematical Analysis_8' RETURN n",
        "gql": "MATCH (n:Topic) WHERE n.label = 'Mathematical Analysis_8' RETURN n"
    },
    {
        "cypher": "MATCH (s:Station) RETURN DISTINCT s.Location",
        "gql": "MATCH (s:Station) RETURN DISTINCT s.Location"
    },
    {
        "cypher": "MATCH (e:Editor) WHERE e.Age > 25 RETURN e.Name",
        "gql": "MATCH (e:Editor) WHERE e.Age > 25 RETURN e.Name"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Lana Wachowski\"})-[:DIRECTED]->(m:Movie) MATCH (producer:Person)-[:PRODUCED]->(m) RETURN DISTINCT producer.name",
        "gql": "MATCH (p:Person {name: \"Lana Wachowski\"})-[:DIRECTED]->(m:Movie) MATCH (producer:Person)-[:PRODUCED]->(m) RETURN DISTINCT producer.name"
    },
    {
        "cypher": "MATCH (a:Article {prodName: 'PQ Micaela Waistbelt'})-[:VARIANT_OF]->(p:Product) RETURN p.productTypeName",
        "gql": "MATCH (a:Article{prodName:'PQ Micaela Waistbelt'})-[:VARIANT_OF]->(p:`Product`) RETURN p.productTypeName"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet) MATCH (t)-[:TAGS]->(h:Hashtag) MATCH (t)-[:MENTIONS]->(m:User) RETURN t.id_str AS tweet_id, t.text AS tweet_text, t.created_at AS created_at ORDER BY t.created_at ASC LIMIT 3",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet) MATCH (t)-[:TAGS]->(h:Hashtag) MATCH (t)-[:MENTIONS]->(m:User) RETURN t.id_str AS tweet_id, t.text AS tweet_text, t.created_at AS created_at ORDER BY t.created_at ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character)-[r:INTERACTS1]->(:Character) WHERE r.weight > 250 RETURN c",
        "gql": "MATCH (c:Character)-[r:INTERACTS1]->(:Character) WHERE r.weight > 250 RETURN c"
    },
    {
        "cypher": "MATCH (a:Article {comments:'22 pages, LaTeX'})-[:PUBLISHED_IN {pages: '537-560'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article {comments:'22 pages, LaTeX'})-[:PUBLISHED_IN {pages: '537-560'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (p:Person)-[r:CREW_FOR]->(m:Movie) WHERE r.job = 'Producer' RETURN p.name, count(r) AS credits ORDER BY credits DESC LIMIT 3",
        "gql": "MATCH (p:Person)-[r:CREW_FOR]->(m:Movie) WHERE r.job = 'Producer' RETURN p.name, count(r) AS credits ORDER BY credits DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Call of Duty: Warzone'}) RETURN s.description AS StreamDescription",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Call of Duty: Warzone'}) RETURN s.description AS StreamDescription"
    },
    {
        "cypher": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) WITH m, count(p) AS producers_count WHERE producers_count > 1 RETURN m.title AS Movie, producers_count",
        "gql": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) RETURN m, count(p) AS producers_count NEXT RETURN m.title AS Movie, producers_count"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title = 'Free Field Construction for the ABF Models in Regime II' OR n.comments IS NOT NULL RETURN DISTINCT n.comments AS comments",
        "gql": "MATCH (n:Article) WHERE n.title = 'Free Field Construction for the ABF Models in Regime II' OR n.comments IS NOT NULL RETURN DISTINCT n.comments AS comments"
    },
    {
        "cypher": "MATCH (s:Switch)-[:ROUTES]->(i:Interface) WITH s, count(i) AS interfaceCount RETURN avg(interfaceCount) AS averageInterfacesPerSwitch",
        "gql": "MATCH (s:Switch)-[:ROUTES]->(i:Interface) RETURN s, count(i) AS interfaceCount NEXT RETURN avg(interfaceCount) AS averageInterfacesPerSwitch"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0 RETURN o.name",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0 RETURN o.name"
    },
    {
        "cypher": "MATCH (a:Address) RETURN a.address, a.lastEditTimestamp ORDER BY a.lastEditTimestamp DESC LIMIT 5",
        "gql": "MATCH (a:Address) RETURN a.address, a.lastEditTimestamp ORDER BY a.lastEditTimestamp DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (:User)-[r:RETWEETS]->(t:Tweet) RETURN t.id AS TweetID, COUNT(r) AS RetweetCount ORDER BY RetweetCount DESC LIMIT 3",
        "gql": "MATCH (:User)-[r:RETWEETS]->(t:Tweet) RETURN t.id AS TweetID, COUNT(r) AS RetweetCount ORDER BY RetweetCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Customer {country: 'USA'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) RETURN p.productName, count(o) AS ordersCount ORDER BY ordersCount DESC LIMIT 5",
        "gql": "MATCH (c:Customer{country:'USA'})-[:PURCHASED]->(o:`Order`)-[:ORDERS]->(p:`Product`) RETURN p.productName, count(o) AS ordersCount ORDER BY ordersCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1010 OR n.article_id < 1013 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1010 OR n.article_id < 1013 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages='303-348' WITH DISTINCT n, m RETURN n.comments AS comments, count(m) AS count LIMIT 20",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '303-348' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` LIMIT 20"
    },
    {
        "cypher": "MATCH (c:Company) RETURN COUNT(DISTINCT c.Industry)",
        "gql": "MATCH (c:Company) RETURN COUNT(DISTINCT c.Industry)"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality = 1.0 RETURN c.name",
        "gql": "MATCH (c:Character) WHERE c.centrality = 1.0 RETURN c.name"
    },
    {
        "cypher": "MATCH (n:Topic {cluster:'11'}) RETURN n",
        "gql": "MATCH (n:Topic {cluster:'11'}) RETURN n"
    },
    {
        "cypher": "MATCH (v:Video)-[:IN_GENRE]->(g:Genre) WITH g, count(v) AS videoCount ORDER BY videoCount DESC LIMIT 3 RETURN g.name AS genre, videoCount",
        "gql": "MATCH (v:Video)-[:IN_GENRE]->(g:Genre) RETURN g, count(v) AS videoCount ORDER BY videoCount DESC LIMIT 3 NEXT RETURN g.name AS genre, videoCount"
    },
    {
        "cypher": "MATCH (n:DOI) WHERE n.doi_id <> '57aa19619324dcd39039c52e67002af3' RETURN DISTINCT n.name AS name",
        "gql": "MATCH (n:DOI) WHERE n.doi_id <> '57aa19619324dcd39039c52e67002af3' RETURN DISTINCT n.name AS name"
    },
    {
        "cypher": "MATCH (a:Report{report_no:'SISSA: 39/99/FM/GEO'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Report{report_no:'SISSA: 39/99/FM/GEO'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (p:Product)-[:SUPPLIES]-(s:Supplier) RETURN s.supplierID, p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 1",
        "gql": "MATCH (p:`Product`)-[:SUPPLIES]-(s:Supplier) RETURN s.supplierID, p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment > 0.8 RETURN o.name AS OrganizationName",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment > 0.8 RETURN o.name AS OrganizationName"
    },
    {
        "cypher": "MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)<-[r:RATED]-(u:User) WITH g, m, count(DISTINCT u) AS userCount WHERE userCount >= 5 RETURN g.name AS genre ORDER BY userCount DESC LIMIT 3",
        "gql": "MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)<-[r:RATED]-(u:User) RETURN g, m, count(u) AS userCount NEXT RETURN g.name AS genre ORDER BY userCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(:City {name: 'Seattle'}) MATCH (o)-[:HAS_CEO]->(ceo:Person) RETURN o.name AS organization, ceo.name AS ceo",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(:City {name: 'Seattle'}) MATCH (o)-[:HAS_CEO]->(ceo:Person) RETURN o.name AS organization, ceo.name AS ceo"
    },
    {
        "cypher": "MATCH (oc:OperateCompany) RETURN MAX(oc.Group_Equity_Shareholding)",
        "gql": "MATCH (oc:OperateCompany) RETURN MAX(oc.Group_Equity_Shareholding)"
    },
    {
        "cypher": "MATCH (c:Character {name: \"Cersei-Lannister\"})-[:INTERACTS45 {book: 45}]-(other) RETURN other.name AS character_name",
        "gql": "MATCH (c:Character {name: \"Cersei-Lannister\"})-[:INTERACTS45 {book: 45}]-(other) RETURN other.name AS character_name"
    },
    {
        "cypher": "MATCH (n:Journal) WHERE n.name = 'Commun.Math.Phys' OR n.name IS NOT NULL RETURN DISTINCT n.name AS name",
        "gql": "MATCH (n:Journal) WHERE n.name = 'Commun.Math.Phys' OR n.name IS NOT NULL RETURN DISTINCT n.name AS name"
    },
    {
        "cypher": "MATCH (t:Technician) WHERE t.Team <> \"NYY\" RETURN t.Name",
        "gql": "MATCH (t:Technician) WHERE t.Team <> \"NYY\" RETURN t.Name"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: \"Electronic Products Manufacturers\"}) RETURN o",
        "gql": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: \"Electronic Products Manufacturers\"}) RETURN o"
    },
    {
        "cypher": "MATCH (n:Campus {Campus: \"San Jose State University\"})<-[:TEACHES]-(fee:CsuFee {Year: 1996}) return fee.CampusFee",
        "gql": "MATCH (n:Campus{Campus:\"San Jose State University\"})<-[:TEACHES]-(fee:CsuFee{`Year`:1996}) RETURN fee.CampusFee"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {title: \"GoldenEye\"}) RETURN COUNT(a) AS numberOfActors",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {title: \"GoldenEye\"}) RETURN COUNT(a) AS numberOfActors"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality = 0.0 AND c.degree > 20 RETURN c",
        "gql": "MATCH (c:Character) WHERE c.centrality = 0.0 AND c.degree > 20 RETURN c"
    },
    {
        "cypher": "MATCH (b:BookClub) RETURN DISTINCT b.Publisher",
        "gql": "MATCH (b:BookClub) RETURN DISTINCT b.Publisher"
    },
    {
        "cypher": "MATCH (s:Stream)-[:MODERATOR]->(u:User) WHERE s.name = u.name RETURN s LIMIT 5",
        "gql": "MATCH (s:Stream)-[:MODERATOR]->(u:User) WHERE s.name = u.name RETURN s LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Categories), (:Journal {name: 'J.Diff.Eq'}) WHERE NOT (n) --> (:Journal) RETURN n.category_id",
        "gql": "MATCH (n:Categories), (:Journal {name: 'J.Diff.Eq'}) WHERE NOT (n) --> (:Journal) RETURN n.category_id"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {year : '2002'}]->(m) WHERE n.title='Summation and transformation formulas for elliptic hypergeometric series' RETURN m.journal_id",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2002'}]->(m) WHERE n.title = 'Summation and transformation formulas for elliptic hypergeometric series' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie) WHERE m.runtime > 180 RETURN DISTINCT p.name",
        "gql": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie) WHERE m.runtime > 180 RETURN DISTINCT p.name"
    },
    {
        "cypher": "MATCH (r:Router{name: 'DC1-R-2'})<-[:CONTAINS]-(dc:DataCenter) RETURN dc.name",
        "gql": "MATCH (r:Router{name: 'DC1-R-2'})<-[:CONTAINS]-(dc:DataCenter) RETURN dc.name"
    },
    {
        "cypher": "MATCH (parentOrg:Organization)-[:HAS_SUBSIDIARY]->(subOrg:Organization) WITH parentOrg, COUNT(subOrg) AS numSubsidiaries WHERE numSubsidiaries > 1 RETURN parentOrg.name AS OrganizationName, numSubsidiaries",
        "gql": "MATCH (parentOrg:Organization)-[:HAS_SUBSIDIARY]->(subOrg:Organization) RETURN parentOrg, COUNT(subOrg) AS numSubsidiaries NEXT RETURN parentOrg.name AS OrganizationName, numSubsidiaries"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m ORDER BY m.year ASC LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m ORDER BY m.`year` ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:FOLLOWS]->(:Me {screen_name: 'neo4j'}) RETURN u.profile_image_url",
        "gql": "MATCH (u:User)-[:FOLLOWS]->(:Me {screen_name: 'neo4j'}) RETURN u.profile_image_url"
    },
    {
        "cypher": "MATCH (r:RestaurantType) WHERE r.ResTypeName = \"Sandwich\" RETURN r.ResTypeDescription",
        "gql": "MATCH (r:RestaurantType) WHERE r.ResTypeName = \"Sandwich\" RETURN r.ResTypeDescription"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '537-560'}]->(m) WHERE n.article_id='5145' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '537-560'}]->(m) WHERE n.article_id='5145' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (stadium:stadium) RETURN stadium.name,stadium.capacity ORDER BY stadium.average DESC LIMIT 1",
        "gql": "MATCH (stadium:stadium) RETURN stadium.name,stadium.capacity ORDER BY stadium.average DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (p:Process {pid: 8966})<-[:DEPENDS_ON]-(a:Application) RETURN a.name",
        "gql": "MATCH (p:Process {pid: 8966})<-[:DEPENDS_ON]-(a:Application) RETURN a.name"
    },
    {
        "cypher": "MATCH (c:Comment) WHERE c.uuid = 122427099 RETURN c.score",
        "gql": "MATCH (c:Comment) WHERE c.uuid = 122427099 RETURN c.score"
    },
    {
        "cypher": "MATCH (d:DocumentsToBeDestroyed) RETURN DISTINCT d.Destruction_Authorised_by_Employee_ID",
        "gql": "MATCH (d:DocumentsToBeDestroyed) RETURN DISTINCT d.Destruction_Authorised_by_Employee_ID"
    },
    {
        "cypher": "MATCH (u:User) WHERE u.followers > 10000 RETURN u.name, u.screen_name, u.followers ORDER BY u.followers DESC LIMIT 3",
        "gql": "MATCH (u:User) WHERE u.followers > 10000 RETURN u.name, u.screen_name, u.followers ORDER BY u.followers DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Other {type: 'FOREIGN FORMED CORPORATION'}) RETURN e.name AS entity_name, e.incorporation_date AS incorporation_date, e.jurisdiction AS jurisdiction, e.jurisdiction_description AS jurisdiction_description",
        "gql": "MATCH (e:Other {type: 'FOREIGN FORMED CORPORATION'}) RETURN e.name AS entity_name, e.incorporation_date AS incorporation_date, e.jurisdiction AS jurisdiction, e.jurisdiction_description AS jurisdiction_description"
    },
    {
        "cypher": "MATCH (s:Student {Advisor:1121}) RETURN count(s)",
        "gql": "MATCH (s:Student {Advisor:1121}) RETURN count(s)"
    },
    {
        "cypher": "MATCH (s:Stream) RETURN s.name, s.createdAt ORDER BY s.createdAt DESC LIMIT 5",
        "gql": "MATCH (s:Stream) RETURN s.name, s.createdAt ORDER BY s.createdAt DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (o:Officer)-[:officer_of]->(e:Entity) WITH o, COUNT(e) AS entityCount ORDER BY entityCount DESC LIMIT 3 RETURN o.name AS officerName, entityCount",
        "gql": "MATCH (o:Officer)-[:officer_of]->(e:Entity) RETURN o, COUNT(e) AS entityCount ORDER BY entityCount DESC LIMIT 3 NEXT RETURN o.name AS officerName, entityCount"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Comedy'}) RETURN DISTINCT a.name",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Comedy'}) RETURN DISTINCT a.name"
    },
    {
        "cypher": "MATCH (n:AssessmentNote) RETURN COUNT(*)",
        "gql": "MATCH (n:AssessmentNote) RETURN COUNT(*)"
    },
    {
        "cypher": "MATCH (p:Product {productName: 'Chai'})<-[:ORDERS]-(o:Order) RETURN DISTINCT o.shipCity AS shipCity",
        "gql": "MATCH (p:`Product`{productName:'Chai'})<-[:ORDERS]-(o:`Order`) RETURN DISTINCT o.shipCity AS shipCity"
    },
    {
        "cypher": "MATCH (p:Person {id: 63303}) RETURN p.name",
        "gql": "MATCH (p:Person {id: 63303}) RETURN p.name"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE c.country = 'Austria' WITH avg(toFloat(o.unitPrice)) AS averagePrice RETURN averagePrice",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`)-[:ORDERS]->(p:`Product`) WHERE c.country = 'Austria' RETURN avg(o.unitPrice) AS averagePrice NEXT RETURN averagePrice"
    },
    {
        "cypher": "MATCH (o:Other) RETURN o ORDER BY o.lastEditTimestamp DESC LIMIT 3",
        "gql": "MATCH (o:Other) RETURN o ORDER BY o.lastEditTimestamp DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answered = true RETURN q ORDER BY q.upVotes DESC LIMIT 3",
        "gql": "MATCH (q:Question) WHERE q.answered = true RETURN q ORDER BY q.upVotes DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget > 100000000 MATCH (p:Person)-[:CAST_FOR]->(m) RETURN DISTINCT p.name",
        "gql": "MATCH (m:Movie) WHERE m.budget > 100000000 MATCH (p:Person)-[:CAST_FOR]->(m) RETURN DISTINCT p.name"
    },
    {
        "cypher": "MATCH p=(a:Categories{specifications:'cs.CC'})-[*]->(d:Article{article_id:'1010'}) RETURN count(p)",
        "gql": "MATCH (a:Categories{specifications:'cs.CC'})-[]->{1,}(d:Article{article_id:'1010'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (c:City)<-[:IN_CITY]-(o:Organization) WHERE o.revenue > 5e8 RETURN c.name AS city",
        "gql": "MATCH (c:City)<-[:IN_CITY]-(o:Organization) WHERE o.revenue > 5e8 RETURN c.name AS city"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes ASC LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Address {address: \"ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.\"})-[:registered_address]-(e:Entity) RETURN e",
        "gql": "MATCH (a:Address {address: \"ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.\"})-[:registered_address]-(e:Entity) RETURN e"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name, c.book1BetweennessCentrality ORDER BY c.book1BetweennessCentrality DESC LIMIT 3",
        "gql": "MATCH (c:Character) RETURN c.name, c.book1BetweennessCentrality ORDER BY c.book1BetweennessCentrality DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (singer:singer) WHERE singer.country = 'France' RETURN avg(singer.age),min(singer.age),max(singer.age)",
        "gql": "MATCH (singer:singer) WHERE singer.country = 'France' RETURN avg(singer.age),min(singer.age),max(singer.age)"
    },
    {
        "cypher": "MATCH (o:Organization) WITH sum(o.revenue) AS totalRevenue RETURN totalRevenue",
        "gql": "MATCH (o:Organization) RETURN sum(o.revenue) AS totalRevenue NEXT RETURN totalRevenue"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN t.text AS tweet, h.name AS hashtag ORDER BY t.created_at DESC LIMIT 3",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN t.text AS tweet, h.name AS hashtag ORDER BY t.created_at DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:DocumentsToBeDestroyed) RETURN DISTINCT n.Destruction_Authorised_by_Employee_ID",
        "gql": "MATCH (n:DocumentsToBeDestroyed) RETURN DISTINCT n.Destruction_Authorised_by_Employee_ID"
    },
    {
        "cypher": "MATCH (u:User)-[:INTERACTED]->(:User {label: 'vtcodes.dev'}) RETURN u.label AS UserLabel, u.area AS UserArea ORDER BY u.area DESC LIMIT 5",
        "gql": "MATCH (u:User)-[:INTERACTED]->(:User {label: 'vtcodes.dev'}) RETURN u.label AS UserLabel, u.area AS UserArea ORDER BY u.area DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'}) RETURN u.display_name AS userName, u.reputation AS reputation, u.link AS userLink ORDER BY u.reputation DESC LIMIT 3",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'}) RETURN u.display_name AS userName, u.reputation AS reputation, u.link AS userLink ORDER BY u.reputation DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (stadium:stadium) WHERE 5000<=stadium.Capacity<=10000 RETURN stadium.Location,stadium.Name",
        "gql": "MATCH (stadium:stadium) WHERE 5000<=stadium.Capacity<=10000 RETURN stadium.Location,stadium.Name"
    },
    {
        "cypher": "MATCH (u:User)-[r:RATED]->(m:Movie) WITH u, COUNT(r) AS ratedMovies, AVG(r.rating) AS avgRating WHERE ratedMovies >= 20 RETURN u.name AS userName, avgRating ORDER BY avgRating DESC LIMIT 3",
        "gql": "MATCH (u:User)-[r:RATED]->(m:Movie) RETURN u, COUNT(r) AS ratedMovies, AVG(r.rating) AS avgRating NEXT RETURN u.name AS userName, avgRating ORDER BY avgRating DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Journal{name:'Commun.Math.Phys'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Journal{name:'Commun.Math.Phys'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (a:Author{affiliation:'unspecified'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Author{affiliation:'unspecified'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.imdbRating < 5 WITH g, avg(m.imdbRating) AS avgRating ORDER BY avgRating ASC RETURN g.name, avgRating LIMIT 3",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.imdbRating < 5 RETURN g, avg(m.imdbRating) AS avgRating ORDER BY avgRating ASC NEXT RETURN g.name, avgRating LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.total_view_count > 10000 RETURN g.name AS game, count(*) AS stream_count ORDER BY stream_count DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.total_view_count > 10000 RETURN g.name AS game, count(*) AS stream_count ORDER BY stream_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order) WITH c, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 3 RETURN c.companyName AS customerName, orderCount",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`) RETURN c, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 3 NEXT RETURN c.companyName AS customerName, orderCount"
    },
    {
        "cypher": "MATCH (c:Campus) WHERE c.County = \"Los Angeles\" RETURN count(c)",
        "gql": "MATCH (c:Campus) WHERE c.County = \"Los Angeles\" RETURN count(c)"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Headquarters <> 'USA' RETURN c.name",
        "gql": "MATCH (c:Company) WHERE c.Headquarters <> 'USA' RETURN c.name"
    },
    {
        "cypher": "MATCH (s:Stream)-[:VIP]->(:User) MATCH (s)-[:PLAYS]->(g:Game) RETURN g.name AS game, count(*) AS frequency ORDER BY frequency DESC LIMIT 3",
        "gql": "MATCH (s:Stream)-[:VIP]->(:User) MATCH (s)-[:PLAYS]->(g:Game) RETURN g.name AS game, count(*) AS frequency ORDER BY frequency DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Area DESC",
        "gql": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Area DESC"
    },
    {
        "cypher": "MATCH (m:Musical) WHERE m.Nominee = \"Bob Fosse\" RETURN m.Name",
        "gql": "MATCH (m:Musical) WHERE m.Nominee = \"Bob Fosse\" RETURN m.Name"
    },
    {
        "cypher": "MATCH (u:User)-[:RATED]->(m:Movie)<-[:DIRECTED]-(d:Director) WHERE d.born > date('1960-01-01') RETURN DISTINCT u",
        "gql": "MATCH (u:User)-[:RATED]->(m:Movie)<-[:DIRECTED]-(d:Director) WHERE d.born > date('1960-01-01') RETURN DISTINCT u"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.runtime > 180 WITH a, count(m) AS movieCount ORDER BY movieCount DESC RETURN a.name AS actorName, movieCount LIMIT 1",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.runtime > 180 RETURN a, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN a.name AS actorName, movieCount LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Author), (:Categories {category_id: '4b7053a7def1fb0250a0e83ebd2f9a7b'}) WHERE NOT (n) --> (:Categories) RETURN n.author_id",
        "gql": "MATCH (n:Author), (:Categories {category_id: '4b7053a7def1fb0250a0e83ebd2f9a7b'}) WHERE NOT (n) --> (:Categories) RETURN n.author_id"
    },
    {
        "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(er:Egress)-[:ROUTES]->(interface:Interface) WITH er, size(collect(interface)) AS numInterfaces RETURN avg(numInterfaces) AS averageInterfacesPerEgress",
        "gql": "MATCH (dc:DataCenter)-[:CONTAINS]->(er:Egress)-[:ROUTES]->(interface:Interface) RETURN er, size(interface) AS numInterfaces NEXT RETURN avg(numInterfaces) AS averageInterfacesPerEgress"
    },
    {
        "cypher": "MATCH (c:Candidate) RETURN count(*)",
        "gql": "MATCH (c:Candidate) RETURN count(*)"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes DESC LIMIT 1",
        "gql": "MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.title='Capital allocation for credit portfolios with kernel estimators' RETURN m.specifications",
        "gql": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.title='Capital allocation for credit portfolios with kernel estimators' RETURN m.specifications"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:MENTIONS]->(u:User {screen_name: 'neo4j'}) RETURN t ORDER BY t.favorites DESC LIMIT 5",
        "gql": "MATCH (t:Tweet)-[:MENTIONS]->(u:User {screen_name: 'neo4j'}) RETURN t ORDER BY t.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine) WHERE r.zone = 1 WITH r, count(m) as machineCount WHERE machineCount > 3 RETURN r.name",
        "gql": "MATCH (r:Rack)-[:HOLDS]->(m:Machine) WHERE r.zone = 1 RETURN r, count(m) AS machineCount NEXT RETURN r.name"
    },
    {
        "cypher": "MATCH (a:Article {title:'Geometrical Tools for Quantum Euclidean Spaces'})-[:PUBLISHED_IN {meta: '217'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article {title:'Geometrical Tools for Quantum Euclidean Spaces'})-[:PUBLISHED_IN {meta: '217'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 5",
        "gql": "MATCH (t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Categories {category_id:'775271e2a118257e7308fe4c21c9d0b4'}) RETURN n",
        "gql": "MATCH (n:Categories {category_id:'775271e2a118257e7308fe4c21c9d0b4'}) RETURN n"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.jurisdiction = 'SAM' RETURN e.name AS entity_name, e.jurisdiction_description AS jurisdiction_description",
        "gql": "MATCH (e:Entity) WHERE e.jurisdiction = 'SAM' RETURN e.name AS entity_name, e.jurisdiction_description AS jurisdiction_description"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-subscriptions'}) RETURN u.display_name, u.reputation ORDER BY u.reputation DESC",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-subscriptions'}) RETURN u.display_name, u.reputation ORDER BY u.reputation DESC"
    },
    {
        "cypher": "MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) RETURN t.name AS TeamName, count(s) AS NumberOfStreams",
        "gql": "MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) RETURN t.name AS TeamName, count(s) AS NumberOfStreams"
    },
    {
        "cypher": "MATCH (n:Network {ip: '10.4'})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch {rack: 8}) RETURN s.ip",
        "gql": "MATCH (n:Network {ip: '10.4'})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch {rack: 8}) RETURN s.ip"
    },
    {
        "cypher": "MATCH (f:Filing)-[:CONCERNS]->(e:Entity) WHERE f.amount > 1000000 RETURN e LIMIT 3",
        "gql": "MATCH (f:Filing)-[:CONCERNS]->(e:Entity) WHERE f.amount > 1000000 RETURN e LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:FOLLOWS]->(:Me {screen_name: 'neo4j'}) WHERE u.profile_image_url IS NOT NULL RETURN u.screen_name, u.profile_image_url LIMIT 3",
        "gql": "MATCH (u:User)-[:FOLLOWS]->(:Me {screen_name: 'neo4j'}) WHERE u.profile_image_url IS NOT NULL RETURN u.screen_name, u.profile_image_url LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 1000000 RETURN COUNT(DISTINCT l.name) AS numberOfLanguages",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 1000000 RETURN COUNT(DISTINCT l.name) AS numberOfLanguages"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country {name: 'Belgium'}) WHERE a.sentiment > 0.5 RETURN DISTINCT o",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country {name: 'Belgium'}) WHERE a.sentiment > 0.5 RETURN DISTINCT o"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_SUPPLIER]->(s:Organization) RETURN o.name AS organization, count(s) AS supplierCount ORDER BY supplierCount DESC LIMIT 5",
        "gql": "MATCH (o:Organization)-[:HAS_SUPPLIER]->(s:Organization) RETURN o.name AS organization, count(s) AS supplierCount ORDER BY supplierCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Station)-[r:SERVES]->(t:Train) RETURN count(*)",
        "gql": "MATCH (s:Station)-[r:SERVES]->(t:Train) RETURN count(*)"
    },
    {
        "cypher": "MATCH (d:Document {document_id: 3}) RETURN d.receipt_date",
        "gql": "MATCH (d:Document {document_id: 3}) RETURN d.receipt_date"
    },
    {
        "cypher": "MATCH (c:City) RETURN c.Official_Name ORDER BY c.Population DESC",
        "gql": "MATCH (c:City) RETURN c.Official_Name ORDER BY c.Population DESC"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '263-281' RETURN n.title AS title, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '263-281' RETURN n.title AS title, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) RETURN m.title, p.born ORDER BY p.born ASC LIMIT 1",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) RETURN m.title, p.born ORDER BY p.born ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (country:Country)<-[:IN_COUNTRY]-(city:City) RETURN country.name AS country, count(city) AS numCities ORDER BY numCities DESC LIMIT 3",
        "gql": "MATCH (country:Country)<-[:IN_COUNTRY]-(city:City) RETURN country.name AS country, count(city) AS numCities ORDER BY numCities DESC LIMIT 3"
    },
    {
        "cypher": "MATCH p=(a:Topic{cluster:'10'})-[*]->(d:Journal{name:'J.Diff.Eq'}) RETURN count(p)",
        "gql": "MATCH (a:Topic{cluster:'10'})-[]->{1,}(d:Journal{name:'J.Diff.Eq'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WITH m, count(distinct g) as genreCount ORDER BY genreCount DESC LIMIT 3 RETURN m.title as movie, genreCount as numberOfGenres",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m, count(g) AS genreCount ORDER BY genreCount DESC LIMIT 3 NEXT RETURN m.title AS movie, genreCount AS numberOfGenres"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality >= 0.2 AND c.centrality <= 0.5 RETURN c.name, c.centrality",
        "gql": "MATCH (c:Character) WHERE c.centrality >= 0.2 AND c.centrality <= 0.5 RETURN c.name, c.centrality"
    },
    {
        "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream) WITH u, COUNT(s) AS streamCount WHERE streamCount > 1 RETURN u.name AS userName, streamCount ORDER BY streamCount DESC LIMIT 3",
        "gql": "MATCH (u:User)-[:MODERATOR]->(s:Stream) RETURN u, COUNT(s) AS streamCount NEXT RETURN u.name AS userName, streamCount ORDER BY streamCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {label: 'dwither.bsky.social'})-[:INTERACTED]->(interactedUser:User) RETURN interactedUser LIMIT 5",
        "gql": "MATCH (u:User {label: 'dwither.bsky.social'})-[:INTERACTED]->(interactedUser:User) RETURN interactedUser LIMIT 5"
    },
    {
        "cypher": "MATCH (gs:GasStation) WHERE gs.Open_Year >= 2000 AND gs.Open_Year <= 2005 RETURN count(gs)",
        "gql": "MATCH (gs:GasStation) WHERE gs.Open_Year >= 2000 AND gs.Open_Year <= 2005 RETURN count(gs)"
    },
    {
        "cypher": "MATCH (b:Business {name: 'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN COUNT(DISTINCT u.userId) AS numberOfUsers",
        "gql": "MATCH (b:Business {name: 'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN COUNT(DISTINCT u.userId) AS numberOfUsers"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 WITH p, count(m) AS moviesReviewed ORDER BY moviesReviewed DESC LIMIT 1 RETURN p.name AS reviewer, moviesReviewed",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 RETURN p, count(m) AS moviesReviewed ORDER BY moviesReviewed DESC LIMIT 1 NEXT RETURN p.name AS reviewer, moviesReviewed"
    },
    {
        "cypher": "MATCH (n:Report) WHERE n.report_id = '45009bf7f2e3f4f275de6d92deab7b27' RETURN n",
        "gql": "MATCH (n:Report) WHERE n.report_id = '45009bf7f2e3f4f275de6d92deab7b27' RETURN n"
    },
    {
        "cypher": "MATCH (u:User)-[r:RATED]->(m:Movie) WITH u, avg(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 3 RETURN u.name AS user, avgRating",
        "gql": "MATCH (u:User)-[r:RATED]->(m:Movie) RETURN u, avg(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 3 NEXT RETURN u.name AS user, avgRating"
    },
    {
        "cypher": "MATCH (n:UpdateDate) WHERE n.update_date >= date('2010-01-01') AND n.update_date <= date('2015-01-01') RETURN count(n) AS UpdateDates",
        "gql": "MATCH (n:UpdateDate) WHERE n.update_date >= date('2010-01-01') AND n.update_date <= date('2015-01-01') RETURN count(n) AS UpdateDates"
    },
    {
        "cypher": "MATCH (z:Zone {size: 16}) RETURN z LIMIT 3",
        "gql": "MATCH (z:Zone{`size`:16}) RETURN z LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:DIRECTED]-(d:Person) MATCH (m)<-[:WROTE]-(w:Person) WHERE d = w RETURN m.title, d.name",
        "gql": "MATCH (m:Movie)<-[:DIRECTED]-(d:Person) MATCH (m)<-[:WROTE]-(w:Person) WHERE d = w RETURN m.title, d.name"
    },
    {
        "cypher": "MATCH (p:Package) RETURN p.name AS package, p.price AS price ORDER BY p.price DESC LIMIT 3",
        "gql": "MATCH (p:Package) RETURN p.name AS package, p.price AS price ORDER BY p.price DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q ORDER BY q.score DESC LIMIT 5",
        "gql": "MATCH (q:Question) RETURN q ORDER BY q.score DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product)<-[:SUPPLIES]-(s:Supplier) RETURN DISTINCT s.companyName LIMIT 3",
        "gql": "MATCH (c:Category{categoryName:'Beverages'})<-[:PART_OF]-(p:`Product`)<-[:SUPPLIES]-(s:Supplier) RETURN DISTINCT s.companyName LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[:PUBLISHED_IN{meta: '220'}]->(m:Journal) WHERE m.title < date('2020-12-31') RETURN avg(m.name) AS avg_name",
        "gql": "MATCH (n:Article) -[:PUBLISHED_IN{meta: '220'}]->(m:Journal) WHERE m.title < date('2020-12-31') RETURN avg(m.name) AS avg_name"
    },
    {
        "cypher": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T2:Technician) RETURN T2.Name, COUNT(*)",
        "gql": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T2:Technician) RETURN T2.Name, COUNT(*)"
    },
    {
        "cypher": "MATCH (a:Topic{description:'Study of mathematical objects based on their properties, including types ADE, LYM-type, Lie type, PEL type, and finite type invariance, as well as characteristics such as chirality, hereditary properties, and integrable KdV type hierarchies. Topics also include alternative characterizations, preservation properties, qualitative properties, and reviews of properties. Distinctions between characteristic 0 and characteristic >0 are explored. The focus is on understanding the mathematical structure and behavior of these objects rather than practical applications.'})-[*]->(d:Journal{name:'Geom. Topol'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Topic{description:'Study of mathematical objects based on their properties, including types ADE, LYM-type, Lie type, PEL type, and finite type invariance, as well as characteristics such as chirality, hereditary properties, and integrable KdV type hierarchies. Topics also include alternative characterizations, preservation properties, qualitative properties, and reviews of properties. Distinctions between characteristic 0 and characteristic >0 are explored. The focus is on understanding the mathematical structure and behavior of these objects rather than practical applications.'})-[]->{1,}(d:Journal{name:'Geom. Topol'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (n:Categories {category_id:'978aee6db23fc939cec71ac05eb15b7a'}) RETURN n",
        "gql": "MATCH (n:Categories {category_id:'978aee6db23fc939cec71ac05eb15b7a'}) RETURN n"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.year = 2000 RETURN avg(m.runtime) AS average_runtime",
        "gql": "MATCH (m:Movie) WHERE m.`year` = 2000 RETURN avg(m.runtime) AS average_runtime"
    },
    {
        "cypher": "MATCH (c:Company) RETURN count(c)",
        "gql": "MATCH (c:Company) RETURN count(c)"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE m.released >= 1970 AND m.released < 1980 RETURN m.title AS movie, count(p) AS actor_count ORDER BY actor_count DESC LIMIT 1",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE m.released >= 1970 AND m.released < 1980 RETURN m.title AS movie, count(p) AS actor_count ORDER BY actor_count DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Student) WHERE s.first_name = \"Emma\" AND s.last_name = \"Rohan\" RETURN s.email_address",
        "gql": "MATCH (s:Student) WHERE s.first_name = \"Emma\" AND s.last_name = \"Rohan\" RETURN s.email_address"
    },
    {
        "cypher": "MATCH (p:Process {pid: 8966})<-[:DEPENDS_ON]-(a:Application) RETURN a.name LIMIT 5",
        "gql": "MATCH (p:Process {pid: 8966})<-[:DEPENDS_ON]-(a:Application) RETURN a.name LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.originator_bank = \"CIMB Bank Berhad\" AND f.beneficiary_bank = \"Barclays Bank Plc\" RETURN f.sar_id",
        "gql": "MATCH (f:Filing) WHERE f.originator_bank = \"CIMB Bank Berhad\" AND f.beneficiary_bank = \"Barclays Bank Plc\" RETURN f.sar_id"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) WITH c.code AS country_code, sum(f.amount) AS total_amount ORDER BY total_amount DESC RETURN country_code, total_amount LIMIT 5",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.code AS country_code, sum(f.amount) AS total_amount ORDER BY total_amount DESC NEXT RETURN country_code, total_amount LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User {userId: 'u1'}) RETURN u.name",
        "gql": "MATCH (u:User {userId: 'u1'}) RETURN u.name"
    },
    {
        "cypher": "MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant'}) RETURN c.city",
        "gql": "MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant'}) RETURN c.city"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor) WITH d, count(DISTINCT a) AS numActors ORDER BY numActors DESC LIMIT 3 RETURN d.name AS director, numActors",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN d, count(a) AS numActors ORDER BY numActors DESC LIMIT 3 NEXT RETURN d.name AS director, numActors"
    },
    {
        "cypher": "MATCH (deis:Organization {name: 'Deis'})-[:IN_CITY]->(deisCity:City) MATCH (otherOrg:Organization)-[:IN_CITY]->(deisCity) MATCH (supplierOrg:Organization)-[:HAS_SUPPLIER]->(otherOrg) RETURN DISTINCT supplierOrg.name",
        "gql": "MATCH (deis:Organization {name: 'Deis'})-[:IN_CITY]->(deisCity:City) MATCH (otherOrg:Organization)-[:IN_CITY]->(deisCity) MATCH (supplierOrg:Organization)-[:HAS_SUPPLIER]->(otherOrg) RETURN DISTINCT supplierOrg.name"
    },
    {
        "cypher": "MATCH (m:Movie {title: \"Toy Story\"}) RETURN m.plot",
        "gql": "MATCH (m:Movie {title: \"Toy Story\"}) RETURN m.plot"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = 'ru' AND s.total_view_count < 10000 RETURN s ORDER BY s.createdAt LIMIT 3",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = 'ru' AND s.total_view_count < 10000 RETURN s ORDER BY s.createdAt LIMIT 3"
    },
    {
        "cypher": "MATCH (T1:Student)-[T2:Has_Pet]-() RETURN DISTINCT T1.Fname,T1.Age",
        "gql": "MATCH (T1:Student)-[T2:Has_Pet]-() RETURN DISTINCT T1.Fname,T1.Age"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'}) WHERE m.runtime > 80 RETURN m.title, m.runtime ORDER BY m.runtime DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'}) WHERE m.runtime > 80 RETURN m.title, m.runtime ORDER BY m.runtime DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (cartoon:Cartoon) RETURN cartoon.Title ORDER BY cartoon.Title",
        "gql": "MATCH (cartoon:Cartoon) RETURN cartoon.Title ORDER BY cartoon.Title"
    },
    {
        "cypher": "MATCH (u:User {name: 'itsbigchase'})-[:VIP]->(s:Stream) RETURN s",
        "gql": "MATCH (u:User {name: 'itsbigchase'})-[:VIP]->(s:Stream) RETURN s"
    },
    {
        "cypher": "MATCH (p:Person {name: 'Julie Spellman Sweet'})<-[:HAS_BOARD_MEMBER]-(o:Organization) RETURN o",
        "gql": "MATCH (p:Person {name: 'Julie Spellman Sweet'})<-[:HAS_BOARD_MEMBER]-(o:Organization) RETURN o"
    },
    {
        "cypher": "MATCH (n:Article), (:Keyword {key_id: '5d6533e2a77e3daabc184ee8f2441597'}) WHERE NOT (n) --> (:Keyword) RETURN n.abstract",
        "gql": "MATCH (n:Article), (:Keyword {key_id: '5d6533e2a77e3daabc184ee8f2441597'}) WHERE NOT (n) --> (:Keyword) RETURN n.abstract"
    },
    {
        "cypher": "MATCH (stadium:stadium) WHERE 5000<=stadium.Capacity<=10000 RETURN stadium.Location,stadium.Name",
        "gql": "MATCH (stadium:stadium) WHERE 5000<=stadium.Capacity<=10000 RETURN stadium.Location,stadium.Name"
    },
    {
        "cypher": "MATCH (u:User) WITH u ORDER BY u.reputation DESC LIMIT 1 MATCH (u)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) RETURN t.name",
        "gql": "MATCH (u:User) RETURN u ORDER BY u.reputation DESC LIMIT 1 NEXT MATCH (u)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) RETURN t.name"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WHERE p.discontinued = TRUE WITH c.categoryName AS categoryName, count(p) AS discontinuedCount ORDER BY discontinuedCount DESC RETURN categoryName, discontinuedCount LIMIT 1",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.discontinued = TRUE RETURN c.categoryName AS categoryName, count(p) AS discontinuedCount ORDER BY discontinuedCount DESC NEXT RETURN categoryName, discontinuedCount LIMIT 1"
    },
    {
        "cypher": "MATCH (director:Person)-[:DIRECTED]->(movie:Movie)<-[:ACTED_IN]-(actor:Person) WHERE director.born / 10 = actor.born / 10 RETURN DISTINCT actor.name",
        "gql": "MATCH (director:Person)-[:DIRECTED]->(movie:Movie)<-[:ACTED_IN]-(actor:Person) WHERE director.born / 10 = actor.born / 10 RETURN DISTINCT actor.name"
    },
    {
        "cypher": "MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre {name: 'Animation'}) RETURN p LIMIT 3",
        "gql": "MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre {name: 'Animation'}) RETURN p LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person) RETURN p.Name ORDER BY p.Date_of_Birth",
        "gql": "MATCH (p:Person) RETURN p.Name ORDER BY p.Date_of_Birth"
    },
    {
        "cypher": "MATCH (b:Building) RETURN b.name ORDER BY b.Height DESC",
        "gql": "MATCH (b:Building) RETURN b.name ORDER BY b.Height DESC"
    },
    {
        "cypher": "MATCH (me:Me)-[:AMPLIFIES]->(user:User) RETURN user.name AS user, user.screen_name AS handle",
        "gql": "MATCH (me:Me)-[:AMPLIFIES]->(user:User) RETURN user.name AS user, user.screen_name AS handle"
    },
    {
        "cypher": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert) WHERE T3.Year = 2014 RETURN T2.Name",
        "gql": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert) WHERE T3.`Year` = 2014 RETURN T2.Name"
    },
    {
        "cypher": "MATCH (c:Campus) WHERE c.Year = 1958 RETURN c.Campus",
        "gql": "MATCH (c:Campus) WHERE c.`Year` = 1958 RETURN c.Campus"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1BetweennessCentrality = 0.0 RETURN c.name LIMIT 3",
        "gql": "MATCH (c:Character) WHERE c.book1BetweennessCentrality = 0.0 RETURN c.name LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 RETURN p.name",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 RETURN p.name"
    },
    {
        "cypher": "MATCH (o:Organization {name: \"Accenture\"})<-[:MENTIONS]-(a:Article) RETURN a.title, a.sentiment ORDER BY a.sentiment DESC LIMIT 1",
        "gql": "MATCH (o:Organization {name: \"Accenture\"})<-[:MENTIONS]-(a:Article) RETURN a.title, a.sentiment ORDER BY a.sentiment DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory) WITH o, count(c) AS categoryCount WHERE categoryCount > 1 RETURN o.name AS organization, categoryCount",
        "gql": "MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN o, count(c) AS categoryCount NEXT RETURN o.name AS organization, categoryCount"
    },
    {
        "cypher": "MATCH (stadium:stadium) RETURN avg(stadium.Capacity),max(stadium.Capacity)",
        "gql": "MATCH (stadium:stadium) RETURN avg(stadium.Capacity),max(stadium.Capacity)"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN t.name AS tag, COUNT(q) AS frequency ORDER BY frequency DESC LIMIT 3",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN t.name AS tag, COUNT(q) AS frequency ORDER BY frequency DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) MATCH (u)-[:PROVIDED]->(a:Answer) RETURN DISTINCT u.display_name",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) MATCH (u)-[:PROVIDED]->(a:Answer) RETURN DISTINCT u.display_name"
    },
    {
        "cypher": "MATCH (d:Doctor)-[:GAVE_DIAGNOSIS]->(di:Diagnosis)-[:OF_TYPE]->(dt:DiagnosisType) WHERE dt.description = 'High Blood Pressure' RETURN d.name",
        "gql": "MATCH (d:Doctor)-[:GAVE_DIAGNOSIS]->(di:Diagnosis)-[:OF_TYPE]->(dt:DiagnosisType) WHERE dt.description = 'High Blood Pressure' RETURN d.name"
    },
    {
        "cypher": "MATCH (p:Process)-[:LISTENS]->(port:Port {port: 80}) RETURN p ORDER BY p.startTime DESC LIMIT 3",
        "gql": "MATCH (p:Process)-[:LISTENS]->(port:Port {port: 80}) RETURN p ORDER BY p.startTime DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) WHERE o.isPublic = true WITH ic, count(o) as orgCount ORDER BY orgCount DESC LIMIT 3 RETURN ic.name as IndustryCategory, orgCount",
        "gql": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) WHERE o.isPublic = true RETURN ic, count(o) AS orgCount ORDER BY orgCount DESC LIMIT 3 NEXT RETURN ic.name AS IndustryCategory, orgCount"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN singer.Name ORDER BY singer.Net_Worth_Millions ASC",
        "gql": "MATCH (singer:singer) RETURN singer.Name ORDER BY singer.Net_Worth_Millions ASC"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WITH p, COUNT(m) AS movieCount RETURN p.name AS actor, movieCount ORDER BY movieCount DESC LIMIT 5",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) RETURN p, COUNT(m) AS movieCount NEXT RETURN p.name AS actor, movieCount ORDER BY movieCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (o:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment < 0.3 WITH o, COUNT(a) AS articleCount ORDER BY articleCount DESC LIMIT 3 RETURN o.name AS organizationName, articleCount",
        "gql": "MATCH (o:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment < 0.3 RETURN o, COUNT(a) AS articleCount ORDER BY articleCount DESC LIMIT 3 NEXT RETURN o.name AS organizationName, articleCount"
    },
    {
        "cypher": "MATCH (s:Student)-[:ENROLLED_IN]->(:Course {name: 'Physics'}) RETURN avg(s.age)",
        "gql": "MATCH (s:Student)-[:ENROLLED_IN]->(:Course {name: 'Physics'}) RETURN avg(s.age)"
    },
    {
        "cypher": "MATCH (people:people) RETURN people.Name,people.Birth_Date ORDER BY people.Name ASC",
        "gql": "MATCH (people:people) RETURN people.Name,people.Birth_Date ORDER BY people.Name ASC"
    },
    {
        "cypher": "MATCH (d:Doctor)-[:GAVE_PRESCRIPTION]->(:Prescription)-[:OF_MEDICATION]->(:Medication)<-[:HAS_PRESCRIPTION]-(p:Patient) WITH d, COUNT(DISTINCT p) AS numPatients WHERE numPatients > 1 RETURN d",
        "gql": "MATCH (d:Doctor)-[:GAVE_PRESCRIPTION]->(:Prescription)-[:OF_MEDICATION]->(:Medication)<-[:HAS_PRESCRIPTION]-(p:Patient) RETURN d, COUNT(p) AS numPatients NEXT RETURN d"
    },
    {
        "cypher": "MATCH (n:Categories), (:Author {first_name: 'A.'}) WHERE NOT (n) --> (:Author) RETURN n.category_id",
        "gql": "MATCH (n:Categories), (:Author {first_name: 'A.'}) WHERE NOT (n) --> (:Author) RETURN n.category_id"
    },
    {
        "cypher": "MATCH (e:Entity)-[:officer_of]->(o:Officer) WHERE e.status = 'Active' WITH e, count(o) AS officerCount WHERE officerCount > 1 RETURN e, officerCount",
        "gql": "MATCH (e:Entity)-[:officer_of]->(o:Officer) WHERE e.status = 'Active' RETURN e, count(o) AS officerCount NEXT RETURN e, officerCount"
    },
    {
        "cypher": "MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review) WHERE r.date.month = 9 RETURN count(DISTINCT b) AS NumberOfBusinessesReviewedInSeptember",
        "gql": "MATCH (b:Business{city:'San Mateo'})-[:REVIEWS]-(r:Review) WHERE r.`date` = 9 RETURN count(b) AS NumberOfBusinessesReviewedInSeptember"
    },
    {
        "cypher": "MATCH (s:Student) WHERE s.Sex = \"F\" RETURN s.LName ORDER BY s.Age DESC",
        "gql": "MATCH (s:Student) WHERE s.Sex = \"F\" RETURN s.LName ORDER BY s.Age DESC"
    },
    {
        "cypher": "MATCH (n:Article) MATCH (m:Topic) RETURN n.title, m.description LIMIT 8",
        "gql": "MATCH (n:Article) MATCH (m:Topic) RETURN n.title, m.description LIMIT 8"
    },
    {
        "cypher": "MATCH (l:List) WHERE l.Classroom = 103 RETURN DISTINCT l.Grade",
        "gql": "MATCH (l:`List`) WHERE l.Classroom = 103 RETURN DISTINCT l.Grade"
    },
    {
        "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'en'}) WITH u, count(s) AS num_moderated_streams ORDER BY num_moderated_streams DESC LIMIT 5 RETURN u.name AS user, num_moderated_streams",
        "gql": "MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(:Language{name:'en'}) RETURN u, count(s) AS num_moderated_streams ORDER BY num_moderated_streams DESC LIMIT 5 NEXT RETURN u.name AS user, num_moderated_streams"
    },
    {
        "cypher": "MATCH (a:Author) RETURN a.lname ORDER BY a.lname",
        "gql": "MATCH (a:Author) RETURN a.lname ORDER BY a.lname"
    },
    {
        "cypher": "MATCH (c:Company)-[:OWNS]->(g:GasStation) WHERE c.Market_Value > 100 RETURN g.Location",
        "gql": "MATCH (c:Company)-[:OWNS]->(g:GasStation) WHERE c.Market_Value > 100 RETURN g.Location"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality > 0.5 RETURN c",
        "gql": "MATCH (c:Character) WHERE c.centrality > 0.5 RETURN c"
    },
    {
        "cypher": "MATCH (j:Journal) RETURN DISTINCT j.Theme",
        "gql": "MATCH (j:Journal) RETURN DISTINCT j.Theme"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'}) RETURN p.productName, p.unitsInStock ORDER BY p.unitsInStock DESC LIMIT 5",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Dairy Products'}) RETURN p.productName, p.unitsInStock ORDER BY p.unitsInStock DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:DOI {name:'10.1016/S0393-0440(00)00003-6'}) RETURN n",
        "gql": "MATCH (n:DOI {name:'10.1016/S0393-0440(00)00003-6'}) RETURN n"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WITH u, COUNT(q) AS questionCount WHERE questionCount > 20 MATCH (u)-[:ASKED]->(q:Question) RETURN q.title AS questionTitle, q.id AS questionId, u.display_name AS userName",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, COUNT(q) AS questionCount NEXT MATCH (u)-[:ASKED]->(q:Question) RETURN q.title AS questionTitle, q.id AS questionId, u.display_name AS userName"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United States of America'}) WHERE m.revenue > 50000000 RETURN m LIMIT 5",
        "gql": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United States of America'}) WHERE m.revenue > 50000000 RETURN m LIMIT 5"
    },
    {
        "cypher": "MATCH (v:Video) WHERE v.revenue IS NOT NULL RETURN v ORDER BY v.revenue ASC LIMIT 5",
        "gql": "MATCH (v:Video) WHERE v.revenue IS NOT NULL RETURN v ORDER BY v.revenue ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:COMMENTED]->(c:Comment) RETURN u.display_name, COUNT(c) AS comment_count ORDER BY comment_count DESC LIMIT 1",
        "gql": "MATCH (u:User)-[:COMMENTED]->(c:Comment) RETURN u.display_name, COUNT(c) AS comment_count ORDER BY comment_count DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream) WITH u, count(s) AS moderated_streams ORDER BY moderated_streams DESC LIMIT 5 RETURN u.name, moderated_streams",
        "gql": "MATCH (u:User)-[:MODERATOR]->(s:Stream) RETURN u, count(s) AS moderated_streams ORDER BY moderated_streams DESC LIMIT 5 NEXT RETURN u.name, moderated_streams"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '18' RETURN n.title AS title, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '18' RETURN n.title AS title, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE m.title = \"Pearl Harbour\" RETURN p.name",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE m.title = \"Pearl Harbour\" RETURN p.name"
    },
    {
        "cypher": "MATCH (:Order)-[o:ORDERS]->(p:Product) RETURN p.productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5",
        "gql": "MATCH (:`Order`)-[o:ORDERS]->(p:`Product`) RETURN p.productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Course) WHERE c.Credits > 2 RETURN count(c)",
        "gql": "MATCH (c:Course) WHERE c.Credits > 2 RETURN count(c)"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' RETURN f",
        "gql": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' RETURN f"
    },
    {
        "cypher": "MATCH (e:Entity)-[:COUNTRY]->(c:Country) RETURN e, count(c) AS connections ORDER BY connections DESC LIMIT 5",
        "gql": "MATCH (e:Entity)-[:COUNTRY]->(c:Country) RETURN e, count(c) AS connections ORDER BY connections DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (conductor:conductor) RETURN conductor.Name ORDER BY conductor.Year_of_Work DESC LIMIT 1",
        "gql": "MATCH (conductor:conductor) RETURN conductor.Name ORDER BY conductor.Year_of_Work DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (c:Company) RETURN count(*)",
        "gql": "MATCH (c:Company) RETURN count(*)"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)<-[:BENEFITS]-(f) RETURN f.sar_id",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)<-[:BENEFITS]-(f) RETURN f.sar_id"
    },
    {
        "cypher": "MATCH (p:Person)-[:CREW_FOR {job: 'Director'}]->(m:Movie) WHERE m.budget > 150000000 RETURN p.name LIMIT 3",
        "gql": "MATCH (p:Person)-[:CREW_FOR {job: 'Director'}]->(m:Movie) WHERE m.budget > 150000000 RETURN p.name LIMIT 3"
    },
    {
        "cypher": "MATCH (f:Farm) RETURN COUNT(*)",
        "gql": "MATCH (f:Farm) RETURN COUNT(*)"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.originator_bank <> f.beneficiary_bank RETURN f",
        "gql": "MATCH (f:Filing) WHERE f.originator_bank <> f.beneficiary_bank RETURN f"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.languages, size(m.languages) AS language_count ORDER BY language_count DESC LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.languages, size(m.languages) AS language_count ORDER BY language_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:City) RETURN c.Official_Name ORDER BY c.Population DESC",
        "gql": "MATCH (c:City) RETURN c.Official_Name ORDER BY c.Population DESC"
    },
    {
        "cypher": "MATCH (n:Categories) MATCH (m:UpdateDate) RETURN n.specifications, m.update_date LIMIT 8",
        "gql": "MATCH (n:Categories) MATCH (m:UpdateDate) RETURN n.specifications, m.update_date LIMIT 8"
    },
    {
        "cypher": "MATCH (a:Article {prodName: 'Esmeralda Fluff'}) RETURN a.colourGroupCode",
        "gql": "MATCH (a:Article {prodName: 'Esmeralda Fluff'}) RETURN a.colourGroupCode"
    },
    {
        "cypher": "MATCH (b:Business {businessId: 'b7'}) RETURN b.name",
        "gql": "MATCH (b:Business {businessId: 'b7'}) RETURN b.name"
    },
    {
        "cypher": "MATCH (f:Flight)-[:LANDS_AT]->(a:Airport), (f)-[:OPERATED_BY]->(oc:OperateCompany) WHERE f.Pilot = 'Thompson' RETURN avg(f.Velocity)",
        "gql": "MATCH (f:Flight)-[:LANDS_AT]->(a:Airport), (f)-[:OPERATED_BY]->(oc:OperateCompany) WHERE f.Pilot = 'Thompson' RETURN avg(f.Velocity)"
    },
    {
        "cypher": "MATCH (pc:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) WITH pc, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 5 RETURN pc.name AS production_company, movie_count",
        "gql": "MATCH (pc:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) RETURN pc, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 5 NEXT RETURN pc.name AS production_company, movie_count"
    },
    {
        "cypher": "MATCH (a:Address)-[:IS_LISTED_IN]->(d:Document) WHERE d.document_id = 4 RETURN a.address_details",
        "gql": "MATCH (a:Address)-[:IS_LISTED_IN]->(d:Document) WHERE d.document_id = 4 RETURN a.address_details"
    },
    {
        "cypher": "MATCH (i:Intermediary {status: 'ACTIVE'}) RETURN i",
        "gql": "MATCH (i:Intermediary {status: 'ACTIVE'}) RETURN i"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WITH s, g ORDER BY s.followers DESC LIMIT 3 RETURN g.name AS game_name",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN s, g ORDER BY s.followers DESC LIMIT 3 NEXT RETURN g.name AS game_name"
    },
    {
        "cypher": "MATCH (e1:Entity)-[:same_name_as]->(e2:Entity) RETURN e1.name AS EntityName1, e2.name AS EntityName2",
        "gql": "MATCH (e1:Entity)-[:same_name_as]->(e2:Entity) RETURN e1.name AS EntityName1, e2.name AS EntityName2"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WITH b, r ORDER BY r.date ASC LIMIT 1 RETURN b.name AS businessName, b.address AS businessAddress",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) RETURN b, r ORDER BY r.`date` ASC LIMIT 1 NEXT RETURN b.name AS businessName, b.address AS businessAddress"
    },
    {
        "cypher": "MATCH (e:EnrolledIn) WHERE e.Grade = \"B\" RETURN COUNT(DISTINCT e.StuID)",
        "gql": "MATCH (e:EnrolledIn) WHERE e.Grade = \"B\" RETURN COUNT(DISTINCT e.StuID)"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.state = 'CA' RETURN r",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.state = 'CA' RETURN r"
    },
    {
        "cypher": "MATCH (actor:Person)-[:ACTED_IN]->(m:Movie) WITH actor, count(m) AS moviesActed ORDER BY moviesActed DESC LIMIT 1 MATCH (actor)-[:ACTED_IN]->(m)<-[:DIRECTED]-(director:Person) WITH director, count(m) AS moviesDirected ORDER BY moviesDirected ASC LIMIT 1 RETURN director.name AS directorName, moviesDirected",
        "gql": "MATCH (actor:Person)-[:ACTED_IN]->(m:Movie) MATCH (actor)-[:ACTED_IN]->(m)<-[:DIRECTED]-(director:Person) RETURN actor, count(m) AS moviesActed ORDER BY moviesActed DESC LIMIT 1 NEXT RETURN director.name AS directorName, moviesDirected"
    },
    {
        "cypher": "MATCH (r:RefLocation) WHERE r.Location_Code = \"x\" RETURN r.Location_Name, r.Location_Description",
        "gql": "MATCH (r:RefLocation) WHERE r.Location_Code = \"x\" RETURN r.Location_Name, r.Location_Description"
    },
    {
        "cypher": "MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'}) RETURN u.display_name, COUNT(a) AS answer_count ORDER BY answer_count DESC LIMIT 1",
        "gql": "MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'}) RETURN u.display_name, COUNT(a) AS answer_count ORDER BY answer_count DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WITH b, COUNT(DISTINCT c) AS categoryCount WHERE categoryCount >= 2 RETURN b.name AS businessName, categoryCount",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) RETURN b, COUNT(c) AS categoryCount NEXT RETURN b.name AS businessName, categoryCount"
    },
    {
        "cypher": "MATCH (s:Storm) WHERE s.Number_Deaths >= 1 RETURN s.Name, s.Dates_active, s.Number_Deaths",
        "gql": "MATCH (s:Storm) WHERE s.Number_Deaths >= 1 RETURN s.Name, s.Dates_active, s.Number_Deaths"
    },
    {
        "cypher": "MATCH (n:Report), (:Journal {name: 'Topology'}) WHERE NOT (n) --> (:Journal) RETURN n.report_no",
        "gql": "MATCH (n:Report), (:Journal {name: 'Topology'}) WHERE NOT (n) --> (:Journal) RETURN n.report_no"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.first_name = 'Marco' OR n.affiliation IS NOT NULL RETURN DISTINCT n.affiliation AS affiliation",
        "gql": "MATCH (n:Author) WHERE n.first_name = 'Marco' OR n.affiliation IS NOT NULL RETURN DISTINCT n.affiliation AS affiliation"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'}) WHERE m.status = 'Released' RETURN m",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'}) WHERE m.status = 'Released' RETURN m"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'}) WHERE q.answered = true RETURN q ORDER BY q.createdAt ASC LIMIT 3",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'}) WHERE q.answered = true RETURN q ORDER BY q.createdAt ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (g:Gymnast) RETURN g.Total_Points ORDER BY g.Floor_Exercise_Points DESC",
        "gql": "MATCH (g:Gymnast) RETURN g.Total_Points ORDER BY g.Floor_Exercise_Points DESC"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.comments='no comments' RETURN m.category_id",
        "gql": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.comments='no comments' RETURN m.category_id"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) WHERE s.followers >= 1000 AND s.followers <= 5000 RETURN s.name AS stream, s.followers AS followerCount",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) WHERE s.followers >= 1000 AND s.followers <= 5000 RETURN s.name AS stream, s.followers AS followerCount"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.comments='Published at http://dx.doi.org/10.1214/009117905000000369 in the   Annals of Probability (http://www.imstat.org/aop/) by the Institute of   Mathematical Statistics (http://www.imstat.org)' RETURN m.name",
        "gql": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.comments='Published at http://dx.doi.org/10.1214/009117905000000369 in the   Annals of Probability (http://www.imstat.org/aop/) by the Institute of   Mathematical Statistics (http://www.imstat.org)' RETURN m.name"
    },
    {
        "cypher": "MATCH (n:CsuFee) WHERE n.Year = 1996 RETURN avg(n.CampusFee)",
        "gql": "MATCH (n:CsuFee) WHERE n.`Year` = 1996 RETURN avg(n.CampusFee)"
    },
    {
        "cypher": "MATCH (n:Keyword), (:Categories {category_id: '33657234da1dc070ea09e7c31bb86abb'}) WHERE NOT (n) --> (:Categories) RETURN n.name",
        "gql": "MATCH (n:Keyword), (:Categories {category_id: '33657234da1dc070ea09e7c31bb86abb'}) WHERE NOT (n) --> (:Categories) RETURN n.name"
    },
    {
        "cypher": "MATCH p=(a:Author{author_id:'1184638302ce384c7549eeead253af2d'})-[*]->(d:Report{report_id:'45009bf7f2e3f4f275de6d92deab7b27'}) RETURN count(p)",
        "gql": "MATCH (a:Author{author_id:'1184638302ce384c7549eeead253af2d'})-[]->{1,}(d:Report{report_id:'45009bf7f2e3f4f275de6d92deab7b27'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (a:Actor) WHERE a.born < date('1900-01-01') RETURN a.name, a.born ORDER BY a.born LIMIT 5",
        "gql": "MATCH (a:Actor) WHERE a.born < date('1900-01-01') RETURN a.name, a.born ORDER BY a.born LIMIT 5"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization {name: 'SuccessFactors'}) RETURN o.name AS organization, sub.name AS subsidiary",
        "gql": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization {name: 'SuccessFactors'}) RETURN o.name AS organization, sub.name AS subsidiary"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1PageRank < 0.4 RETURN c",
        "gql": "MATCH (c:Character) WHERE c.book1PageRank < 0.4 RETURN c"
    },
    {
        "cypher": "MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:RUNS]->(a:Application) RETURN a.name",
        "gql": "MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:RUNS]->(a:Application) RETURN a.name"
    },
    {
        "cypher": "MATCH (c:City) RETURN COUNT(DISTINCT c.Status)",
        "gql": "MATCH (c:City) RETURN COUNT(DISTINCT c.Status)"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.community = 579 RETURN c",
        "gql": "MATCH (c:Character) WHERE c.community = 579 RETURN c"
    },
    {
        "cypher": "MATCH (i:Intermediary {name: 'LOYAL PORT LIMITED'})-[:intermediary_of]->(e:Entity) WITH e.jurisdiction_description AS targetJurisdiction MATCH (o:Officer)-[:officer_of]->(e2:Entity {jurisdiction_description: targetJurisdiction}) RETURN DISTINCT o.name",
        "gql": "MATCH (i:Intermediary{name:'LOYAL PORT LIMITED'})-[:intermediary_of]->(e:Entity) RETURN e.jurisdiction_description AS targetJurisdiction NEXT MATCH (o:Officer)-[:officer_of]->(e2:Entity{jurisdiction_description:targetJurisdiction}) RETURN DISTINCT o.name"
    },
    {
        "cypher": "MATCH (p:Package) RETURN p.name, p.duration ORDER BY p.duration DESC LIMIT 5",
        "gql": "MATCH (p:Package) RETURN p.name, p.`duration` ORDER BY p.`duration` DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 3 OR n.cluster < 7 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 3 OR n.cluster < 7 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE p.born > 1980 WITH p, count(m) AS numMovies WHERE numMovies > 1 RETURN p.name AS actor, numMovies",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE p.born > 1980 RETURN p, count(m) AS numMovies NEXT RETURN p.name AS actor, numMovies"
    },
    {
        "cypher": "MATCH (f:Flight) WHERE f.Velocity > 200 RETURN count(*)",
        "gql": "MATCH (f:Flight) WHERE f.Velocity > 200 RETURN count(*)"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[a:AMPLIFIES]->(u:User) RETURN u.screen_name AS user, count(a) AS amplifications ORDER BY amplifications DESC LIMIT 3",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[a:AMPLIFIES]->(u:User) RETURN u.screen_name AS user, count(a) AS amplifications ORDER BY amplifications DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Categories {specifications:'math.AT'}) RETURN n",
        "gql": "MATCH (n:Categories {specifications:'math.AT'}) RETURN n"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.first_name = 'R.' OR n.affiliation IS NOT NULL RETURN DISTINCT n.affiliation AS affiliation",
        "gql": "MATCH (n:Author) WHERE n.first_name = 'R.' OR n.affiliation IS NOT NULL RETURN DISTINCT n.affiliation AS affiliation"
    },
    {
        "cypher": "MATCH (r:Restaurant {ResName: \"Subway\"}) RETURN r.Address",
        "gql": "MATCH (r:Restaurant {ResName: \"Subway\"}) RETURN r.Address"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score = 0 WITH u, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 5 RETURN u.display_name AS user, question_count",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score = 0 RETURN u, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 5 NEXT RETURN u.display_name AS user, question_count"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score < 0 RETURN u.link",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score < 0 RETURN u.link"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) WITH a, count(DISTINCT g) AS genreCount ORDER BY genreCount DESC LIMIT 3 RETURN a.name, genreCount",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN a, count(g) AS genreCount ORDER BY genreCount DESC LIMIT 3 NEXT RETURN a.name, genreCount"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:REVIEWED {summary: 'An amazing journey'}]-(:Person) RETURN m",
        "gql": "MATCH (m:Movie)<-[:REVIEWED {summary: 'An amazing journey'}]-(:Person) RETURN m"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.summary = 'Fun, but a little far fetched' RETURN m.title, r.rating",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.summary = 'Fun, but a little far fetched' RETURN m.title, r.rating"
    },
    {
        "cypher": "MATCH (r:Room) RETURN count(DISTINCT r.RoomType)",
        "gql": "MATCH (r:Room) RETURN count(DISTINCT r.RoomType)"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WITH u, count(DISTINCT q.favorites) AS favVariations ORDER BY favVariations DESC LIMIT 3 RETURN u.display_name, favVariations",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, count(q.favorites) AS favVariations ORDER BY favVariations DESC LIMIT 3 NEXT RETURN u.display_name, favVariations"
    },
    {
        "cypher": "MATCH (n:List) RETURN DISTINCT n.Classroom, n.Grade",
        "gql": "MATCH (n:`List`) RETURN DISTINCT n.Classroom, n.Grade"
    },
    {
        "cypher": "MATCH (cc:CatalogContent) RETURN cc.catalog_entry_name ORDER BY cc.capacity ASC LIMIT 1",
        "gql": "MATCH (cc:CatalogContent) RETURN cc.catalog_entry_name ORDER BY cc.capacity ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE c.name <> country.name RETURN o.name AS organization, c.name AS city, country.name AS country",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE c.name <> country.name RETURN o.name AS organization, c.name AS city, country.name AS country"
    },
    {
        "cypher": "MATCH (fc:Farm_competition)-[:TAKES_PLACE_IN]->(c:City) RETURN fc.Year, c.Official_Name",
        "gql": "MATCH (fc:Farm_competition)-[:TAKES_PLACE_IN]->(c:City) RETURN fc.`Year`, c.Official_Name"
    },
    {
        "cypher": "MATCH (t:Technician) WHERE t.Age = 36 OR t.Age = 37 RETURN t.Name",
        "gql": "MATCH (t:Technician) WHERE t.Age = 36 OR t.Age = 37 RETURN t.Name"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answered = false RETURN q.title, q.link, q.createdAt ORDER BY q.createdAt DESC LIMIT 5",
        "gql": "MATCH (q:Question) WHERE q.answered = false RETURN q.title, q.link, q.createdAt ORDER BY q.createdAt DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(egress:Egress) RETURN count(egress)",
        "gql": "MATCH (dc:DataCenter)-[:CONTAINS]->(egress:Egress) RETURN count(egress)"
    },
    {
        "cypher": "MATCH (p:Product) WHERE p.unitsOnOrder > 50 RETURN p",
        "gql": "MATCH (p:`Product`) WHERE p.unitsOnOrder > 50 RETURN p"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE b.name = 'KettleHouse Brewing Co.' RETURN b, c",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE b.name = 'KettleHouse Brewing Co.' RETURN b, c"
    },
    {
        "cypher": "MATCH (n:Article) -[:PUBLISHED_IN{meta: '18'}]->(m:Journal) WHERE m.title < date('2020-12-31') RETURN avg(m.name) AS avg_name",
        "gql": "MATCH (n:Article) -[:PUBLISHED_IN{meta: '18'}]->(m:Journal) WHERE m.title < date('2020-12-31') RETURN avg(m.name) AS avg_name"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1009 OR n.article_id < 1009 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1009 OR n.article_id < 1009 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (n:Topic), (:Article {title: 'Failure of Brown representability in derived categories'}) WHERE NOT (n) --> (:Article) RETURN n.cluster",
        "gql": "MATCH (n:Topic), (:Article {title: 'Failure of Brown representability in derived categories'}) WHERE NOT (n) --> (:Article) RETURN n.cluster"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE m.runtime < 100 RETURN m.title, m.runtime ORDER BY m.runtime LIMIT 3",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE m.runtime < 100 RETURN m.title, m.runtime ORDER BY m.runtime LIMIT 3"
    },
    {
        "cypher": "MATCH (n: RefIncidentType {incident_type_code: \"VIOLENCE\"}) RETURN n.incident_type_description",
        "gql": "MATCH (n: RefIncidentType {incident_type_code: \"VIOLENCE\"}) RETURN n.incident_type_description"
    },
    {
        "cypher": "MATCH (r:Review)-[:REVIEWS]->(b:Business) WHERE r.stars > 4 WITH r MATCH (u:User)-[:WROTE]->(r) RETURN DISTINCT u.name",
        "gql": "MATCH (r:Review)-[:REVIEWS]->(b:Business) WHERE r.stars > 4 RETURN r NEXT MATCH (u:User)-[:WROTE]->(r) RETURN DISTINCT u.name"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'}) MATCH (t)-[:TAGS]->(h:Hashtag) RETURN h.name AS Hashtag LIMIT 3",
        "gql": "MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'}) MATCH (t)-[:TAGS]->(h:Hashtag) RETURN h.name AS Hashtag LIMIT 3"
    },
    {
        "cypher": "MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country) WITH v, count(DISTINCT c) AS countries_count ORDER BY countries_count DESC RETURN v.title, countries_count LIMIT 5",
        "gql": "MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN v, count(c) AS countries_count ORDER BY countries_count DESC NEXT RETURN v.title, countries_count LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'}) RETURN s.companyName",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Beverages'}) RETURN s.companyName"
    },
    {
        "cypher": "MATCH (a:DOI{doi_id:'abce5ed79c520bdb8fd79a61a852648d'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:DOI{doi_id:'abce5ed79c520bdb8fd79a61a852648d'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (c:City)<-[:TAKES_PLACE_IN]-(fc:Farm_competition) WITH c, count(fc) as Farm_competition_count WHERE Farm_competition_count > 1 RETURN c.Official_Name",
        "gql": "MATCH (c:City)<-[:TAKES_PLACE_IN]-(fc:Farm_competition) RETURN c, count(fc) AS Farm_competition_count NEXT RETURN c.Official_Name"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.author_id <> 'ee24bab93b9531431f442226dd453745' RETURN DISTINCT n.first_name AS first_name",
        "gql": "MATCH (n:Author) WHERE n.author_id <> 'ee24bab93b9531431f442226dd453745' RETURN DISTINCT n.first_name AS first_name"
    },
    {
        "cypher": "MATCH (u:User) WHERE u.x < -5000 RETURN u ORDER BY u.x DESC LIMIT 5",
        "gql": "MATCH (u:User) WHERE u.x < -5000 RETURN u ORDER BY u.x DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (T1:Thing) WHERE T1.service_details = \"Unsatisfied\" MATCH (T2:Timed_Locations_of_Thing) WHERE T2.thing_id = T1.thing_id RETURN COUNT(DISTINCT T2.Location_Code)",
        "gql": "MATCH (T1:Thing) WHERE T1.service_details = \"Unsatisfied\" MATCH (T2:Timed_Locations_of_Thing) WHERE T2.thing_id = T1.thing_id RETURN COUNT(DISTINCT T2.Location_Code)"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answer_count = 0 RETURN q.title, q.link, q.view_count ORDER BY q.view_count DESC LIMIT 5",
        "gql": "MATCH (q:Question) WHERE q.answer_count = 0 RETURN q.title, q.link, q.view_count ORDER BY q.view_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Topic{cluster:'9'})-[*]->(d:Article{comments:'23 pages, 1 figure'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Topic{cluster:'9'})-[]->{1,}(d:Article{comments:'23 pages, 1 figure'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'}) RETURN u.name, u.screen_name, u.statuses ORDER BY u.statuses DESC LIMIT 5",
        "gql": "MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'}) RETURN u.name, u.screen_name, u.statuses ORDER BY u.statuses DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WITH g.name AS genreName, avg(m.runtime) AS averageRuntime RETURN genreName, averageRuntime",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g.name AS genreName, avg(m.runtime) AS averageRuntime NEXT RETURN genreName, averageRuntime"
    },
    {
        "cypher": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.name='tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-' RETURN m.description",
        "gql": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.name='tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-' RETURN m.description"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title AS title, size(m.languages) AS numLanguages ORDER BY numLanguages DESC LIMIT 5",
        "gql": "MATCH (m:Movie) RETURN m.title AS title, size(m.languages) AS numLanguages ORDER BY numLanguages DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) -[:PUBLISHED_IN]->(m:Journal) WITH DISTINCT n, m RETURN n.title AS title, count(m) AS journal_count ORDER BY journal_count",
        "gql": "MATCH (n:Article)-[:PUBLISHED_IN]->(m:Journal) RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS journal_count ORDER BY journal_count"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'Singapore' RETURN f ORDER BY f.amount DESC LIMIT 3",
        "gql": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'Singapore' RETURN f ORDER BY f.amount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Company) RETURN count(DISTINCT c.Industry)",
        "gql": "MATCH (c:Company) RETURN count(DISTINCT c.Industry)"
    },
    {
        "cypher": "MATCH (c:Company) RETURN max(c.Market_Value_in_Billion), min(c.Market_Value_in_Billion)",
        "gql": "MATCH (c:Company) RETURN max(c.Market_Value_in_Billion), min(c.Market_Value_in_Billion)"
    },
    {
        "cypher": "MATCH (article:Article)-[:MENTIONS]->(mentionedOrg:Organization) WHERE article.sentiment > 0.8 WITH distinct mentionedOrg MATCH (mentionedOrg)<-[:HAS_COMPETITOR]-(org:Organization)-[:HAS_SUPPLIER]->(mentionedOrg) RETURN DISTINCT org.name",
        "gql": "MATCH (article:Article)-[:MENTIONS]->(mentionedOrg:Organization) WHERE article.sentiment > 0.8 RETURN DISTINCT mentionedOrg NEXT MATCH (mentionedOrg)<-[:HAS_COMPETITOR]-(org:Organization)-[:HAS_SUPPLIER]->(mentionedOrg) RETURN DISTINCT org.name"
    },
    {
        "cypher": "MATCH (ic:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization) WITH ic, count(o) AS orgCount WHERE orgCount > 5 RETURN ic.name AS industry, orgCount ORDER BY orgCount DESC LIMIT 3",
        "gql": "MATCH (ic:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization) RETURN ic, count(o) AS orgCount NEXT RETURN ic.name AS industry, orgCount ORDER BY orgCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (neo4j:User {screen_name: \"neo4j\"})-[:POSTS]->(neo4jTweets:Tweet)-[:TAGS]->(commonHashtags:Hashtag) WITH neo4j, neo4jTweets, commonHashtags MATCH (otherTweets:Tweet)-[:TAGS]->(commonHashtags)<-[:TAGS]-(neo4jTweets) WITH DISTINCT otherTweets MATCH (user:User)-[:POSTS]->(:Tweet)-[:RETWEETS]->(otherTweets) RETURN DISTINCT user.screen_name",
        "gql": "MATCH (neo4j:User{screen_name:\"neo4j\"})-[:POSTS]->(neo4jTweets:Tweet)-[:TAGS]->(commonHashtags:Hashtag) MATCH (otherTweets:Tweet)-[:TAGS]->(commonHashtags)<-[:TAGS]-(neo4jTweets) RETURN neo4j, neo4jTweets, commonHashtags NEXT MATCH (user:User)-[:POSTS]->(:Tweet)-[:RETWEETS]->(otherTweets) RETURN DISTINCT user.screen_name"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.title='Fast linear algebra is stable' RETURN m.specifications",
        "gql": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.title='Fast linear algebra is stable' RETURN m.specifications"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'}) WHERE q.score = 0 RETURN q.title AS title, q.link AS link, q.createdAt AS createdAt, q.id AS id",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'}) WHERE q.score = 0 RETURN q.title AS title, q.link AS link, q.createdAt AS createdAt, q.id AS id"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) WITH o, count(ic) AS numCategories WHERE numCategories > 1 RETURN o LIMIT 3",
        "gql": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) RETURN o, count(ic) AS numCategories NEXT RETURN o LIMIT 3"
    },
    {
        "cypher": "MATCH (d:Document) WHERE d.document_status_code = \"done\" RETURN COUNT(d)",
        "gql": "MATCH (d:Document) WHERE d.document_status_code = \"done\" RETURN COUNT(d)"
    },
    {
        "cypher": "MATCH (n:Article {abstract:'  I associate to a global field K a Lax-Phillips scattering which has the property of causality if and only if the Riemann Hypothesis holds for all the abelian L-functions of K. As a Hilbert space closure problem this provides an adelic variation on a theme initiated by Nyman and Beurling. The adelic aspects are related to previous work by Tate, Iwasawa and Connes. '}) RETURN n",
        "gql": "MATCH (n:Article{`abstract`:'  I associate to a global field K a Lax-Phillips scattering which has the property of causality if and only if the Riemann Hypothesis holds for all the abelian L-functions of K. As a Hilbert space closure problem this provides an adelic variation on a theme initiated by Nyman and Beurling. The adelic aspects are related to previous work by Tate, Iwasawa and Connes. '}) RETURN n"
    },
    {
        "cypher": "MATCH (a:Article {title:'A New Cohomology Theory for Orbifold'})-[:PUBLISHED_IN {pages: '1-31'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article {title:'A New Cohomology Theory for Orbifold'})-[:PUBLISHED_IN {pages: '1-31'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (g:Genre {name: 'Adventure'}) WITH g MATCH (g)<-[:IN_GENRE]-(m:Movie) WITH sum(m.revenue) AS totalRevenue RETURN totalRevenue",
        "gql": "MATCH (g:Genre{name:'Adventure'}) MATCH (g)<-[:IN_GENRE]-(m:Movie) RETURN g NEXT RETURN totalRevenue"
    },
    {
        "cypher": "MATCH (a:Article {title:'Quantum Affine (Super)Algebras $U_q(A_{1}^{(1)})$ and $U_q(C(2)^{(2)})$'})-[:PUBLISHED_IN {meta: '220'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article {title:'Quantum Affine (Super)Algebras $U_q(A_{1}^{(1)})$ and $U_q(C(2)^{(2)})$'})-[:PUBLISHED_IN {meta: '220'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(:Question) WITH u MATCH (u)-[:COMMENTED]->(c:Comment) RETURN avg(c.score) AS average_score",
        "gql": "MATCH (u:User)-[:ASKED]->(:Question) RETURN u NEXT MATCH (u)-[:COMMENTED]->(c:Comment) RETURN avg(c.score) AS average_score"
    },
    {
        "cypher": "MATCH (s:Stream)<-[:MODERATOR]-(m:User)-[:VIP]->(s) RETURN s.name AS stream, m.name AS moderator_and_vip",
        "gql": "MATCH (s:Stream)<-[:MODERATOR]-(m:User)-[:VIP]->(s) RETURN s.name AS stream, m.name AS moderator_and_vip"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:FOLLOWS]->(user:User)-[:POSTS]->(tweet:Tweet)-[:CONTAINS]->(link:Link) RETURN tweet.text AS tweet_text, tweet.created_at AS created_at, link.url AS link_url ORDER BY tweet.created_at DESC LIMIT 5",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:FOLLOWS]->(user:User)-[:POSTS]->(tweet:Tweet)-[:CONTAINS]->(link:Link) RETURN tweet.text AS tweet_text, tweet.created_at AS created_at, link.url AS link_url ORDER BY tweet.created_at DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (egress:Egress)-[:ROUTES]->(interface:Interface) RETURN interface.ip",
        "gql": "MATCH (egress:Egress)-[:ROUTES]->(interface:Interface) RETURN interface.ip"
    },
    {
        "cypher": "MATCH (p:Product)<-[:ORDERS]-(o:Order) WITH p, o ORDER BY o.discount DESC LIMIT 3 RETURN p.productName AS productName, o.discount AS discount",
        "gql": "MATCH (p:`Product`)<-[:ORDERS]-(o:`Order`) RETURN p, o ORDER BY o.discount DESC LIMIT 3 NEXT RETURN p.productName AS productName, o.discount AS discount"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie), (p)-[:PRODUCED]->(m) RETURN m.title AS MovieTitle, m.released AS ReleaseYear",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie), (p)-[:PRODUCED]->(m) RETURN m.title AS MovieTitle, m.released AS ReleaseYear"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE o.revenue < 5000000 RETURN a.title, a.summary, a.date LIMIT 3",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE o.revenue < 5000000 RETURN a.title, a.summary, a.`date` LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity)-->(o:Officer)-[:officer_of]->(other:Other) RETURN DISTINCT e.jurisdiction",
        "gql": "MATCH (e:Entity)-->(o:Officer)-[:officer_of]->(other:Other) RETURN DISTINCT e.jurisdiction"
    },
    {
        "cypher": "MATCH (org:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: \"United States of America\"}) WHERE org.isPublic = true AND org.nbrEmployees > 1000 RETURN org.name, org.nbrEmployees",
        "gql": "MATCH (org:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: \"United States of America\"}) WHERE org.isPublic = true AND org.nbrEmployees > 1000 RETURN org.name, org.nbrEmployees"
    },
    {
        "cypher": "MATCH (s:Service)  WITH avg(s.startTime) AS averageStartTime RETURN averageStartTime",
        "gql": "MATCH (s:Service) RETURN avg(s.startTime) AS averageStartTime NEXT RETURN averageStartTime"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE country.name <> 'United States of America' RETURN o",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE country.name <> 'United States of America' RETURN o"
    },
    {
        "cypher": "MATCH (c:Category {categoryName: 'Dairy Products'})-[:PART_OF]->(p:Product) WITH avg(p.unitsOnOrder) AS averageQuantity RETURN averageQuantity",
        "gql": "MATCH (c:Category{categoryName:'Dairy Products'})-[:PART_OF]->(p:`Product`) RETURN avg(p.unitsOnOrder) AS averageQuantity NEXT RETURN averageQuantity"
    },
    {
        "cypher": "MATCH (t:Tag {name: 'neo4j'})<-[:TAGGED]-(q:Question)<-[:ASKED]-(u:User) RETURN DISTINCT u.display_name",
        "gql": "MATCH (t:Tag {name: 'neo4j'})<-[:TAGGED]-(q:Question)<-[:ASKED]-(u:User) RETURN DISTINCT u.display_name"
    },
    {
        "cypher": "MATCH (b:BehaviorIncident) RETURN count(DISTINCT b.incident_type_code)",
        "gql": "MATCH (b:BehaviorIncident) RETURN count(DISTINCT b.incident_type_code)"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 2000 RETURN q.title, q.link, q.createdAt ORDER BY q.createdAt LIMIT 3",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 2000 RETURN q.title, q.link, q.createdAt ORDER BY q.createdAt LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Coffee'}) WHERE b.state = 'CA' MATCH (r:Review)-[:REVIEWS]->(b) RETURN b.name, b.address, r.stars",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Coffee'}) WHERE b.state = 'CA' MATCH (r:Review)-[:REVIEWS]->(b) RETURN b.name, b.address, r.stars"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'}) RETURN t.text, t.favorites, t.created_at ORDER BY t.favorites DESC LIMIT 5",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'}) RETURN t.text, t.favorites, t.created_at ORDER BY t.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (d:Director {name: \"Harold Lloyd\"})-[:DIRECTED]->(m:Movie) MATCH (a:Actor)-[:ACTED_IN]->(m) RETURN DISTINCT a.name",
        "gql": "MATCH (d:Director {name: \"Harold Lloyd\"})-[:DIRECTED]->(m:Movie) MATCH (a:Actor)-[:ACTED_IN]->(m) RETURN DISTINCT a.name"
    },
    {
        "cypher": "MATCH (o:Officer {countries: \"South Korea\"}) RETURN o",
        "gql": "MATCH (o:Officer {countries: \"South Korea\"}) RETURN o"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE d.bornIn = 'Burchard, Nebraska, USA' RETURN SUM(m.revenue) AS totalRevenue",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE d.bornIn = 'Burchard, Nebraska, USA' RETURN SUM(m.revenue) AS totalRevenue"
    },
    {
        "cypher": "MATCH (bt:Character {name: \"Brynden-Tully\"}) WITH bt MATCH (bt)-[:INTERACTS*1..5]->(other) RETURN other.name, other.centrality  ORDER BY other.centrality ASC",
        "gql": "MATCH (bt:Character{name:\"Brynden-Tully\"}) RETURN bt NEXT MATCH (bt)-[:INTERACTS]->{1,5}(other) RETURN other.name, other.centrality ORDER BY other.centrality ASC"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality < 0.2 AND c.book45PageRank > 3 RETURN c.name, c.centrality, c.book45PageRank",
        "gql": "MATCH (c:Character) WHERE c.centrality < 0.2 AND c.book45PageRank > 3 RETURN c.name, c.centrality, c.book45PageRank"
    },
    {
        "cypher": "MATCH (n:Article) MATCH (m:Article) RETURN n.title, m.comments LIMIT 8",
        "gql": "MATCH (n:Article) MATCH (m:Article) RETURN n.title, m.comments LIMIT 8"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WITH p, count(m) AS movies_count WHERE movies_count > 1 WITH count(p) AS actors_more_than_one_movie MATCH (actor:Person)-[:ACTED_IN]->(:Movie) WITH count(DISTINCT actor) AS total_actors, actors_more_than_one_movie RETURN (actors_more_than_one_movie * 1.0) / total_actors * 100 AS percentage",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) MATCH (actor:Person)-[:ACTED_IN]->(:Movie) RETURN p, count(m) AS movies_count NEXT RETURN total_actors AS percentage"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answer_count = 0 RETURN q ORDER BY q.creation_date ASC LIMIT 3",
        "gql": "MATCH (q:Question) WHERE q.answer_count = 0 RETURN q ORDER BY q.creation_date ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (l:List) WHERE l.Classroom = 103 RETURN DISTINCT l.Grade",
        "gql": "MATCH (l:`List`) WHERE l.Classroom = 103 RETURN DISTINCT l.Grade"
    },
    {
        "cypher": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.key_id='4969a8e0646cdb8842726781e7637625' RETURN m.cluster",
        "gql": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.key_id='4969a8e0646cdb8842726781e7637625' RETURN m.cluster"
    },
    {
        "cypher": "MATCH (user:User)-[:WROTE]->(review:Review) WITH user, count(review) AS reviewCount RETURN user.name AS userName, reviewCount",
        "gql": "MATCH (user:User)-[:WROTE]->(review:Review) RETURN user, count(review) AS reviewCount NEXT RETURN user.name AS userName, reviewCount"
    },
    {
        "cypher": "MATCH (c:Character { name: 'Jaime-Lannister' })-[:INTERACTS3]->(other:Character) RETURN other.name",
        "gql": "MATCH (c:Character { name: 'Jaime-Lannister' })-[:INTERACTS3]->(other:Character) RETURN other.name"
    },
    {
        "cypher": "MATCH (:Person)-[r:REVIEWED]->(m:Movie) RETURN m.title AS movie, AVG(r.rating) AS average_rating ORDER BY average_rating ASC LIMIT 5",
        "gql": "MATCH (:Person)-[r:REVIEWED]->(m:Movie) RETURN m.title AS movie, AVG(r.rating) AS average_rating ORDER BY average_rating ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p) RETURN p.name AS person, m.title AS movie",
        "gql": "MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p) RETURN p.name AS person, m.title AS movie"
    },
    {
        "cypher": "MATCH (n:Keyword) WHERE n.key_id = '6ded85146e3dbfb1bb866831b8948f5b' OR n.name IS NOT NULL RETURN DISTINCT n.name AS name",
        "gql": "MATCH (n:Keyword) WHERE n.key_id = '6ded85146e3dbfb1bb866831b8948f5b' OR n.name IS NOT NULL RETURN DISTINCT n.name AS name"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.Headquarters, count(c)",
        "gql": "MATCH (c:Company) RETURN c.Headquarters, count(c)"
    },
    {
        "cypher": "MATCH (e1:Entity {jurisdiction: 'SAM'})-[:registered_address]->(addr:Address) MATCH (e2:Entity)-[:registered_address]->(addr) WHERE e1 <> e2 RETURN DISTINCT e2.name LIMIT 5",
        "gql": "MATCH (e1:Entity {jurisdiction: 'SAM'})-[:registered_address]->(addr:Address) MATCH (e2:Entity)-[:registered_address]->(addr) WHERE e1 <> e2 RETURN DISTINCT e2.name LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category {description: 'Desserts, candies, and sweet breads'}) WHERE p.unitsOnOrder > 5 RETURN p.productName, p.unitsOnOrder",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category{description:'Desserts, candies, and sweet breads'}) WHERE p.unitsOnOrder > 5 RETURN p.productName, p.unitsOnOrder"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.Headquarters, c.Industry",
        "gql": "MATCH (c:Company) RETURN c.Headquarters, c.Industry"
    },
    {
        "cypher": "MATCH (u:User {uuid: 16922964})-[:PROVIDED]->(a:Answer) RETURN a",
        "gql": "MATCH (u:User {uuid: 16922964})-[:PROVIDED]->(a:Answer) RETURN a"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '303-348' RETURN n.title AS title, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '303-348' RETURN n.title AS title, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:RETWEETS]->(retweet:Tweet) RETURN t.text AS tweet_text, count(retweet) AS retweet_count ORDER BY retweet_count DESC LIMIT 5",
        "gql": "MATCH (t:Tweet)-[:RETWEETS]->(retweet:Tweet) RETURN t.text AS tweet_text, count(retweet) AS retweet_count ORDER BY retweet_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '217'}]->(m) WHERE n.abstract='  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. ' RETURN m.journal_id",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'217'}]->(m) WHERE n.`abstract` = '  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. ' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) WITH t, h ORDER BY t.created_at DESC LIMIT 3 RETURN h.name AS hashtag",
        "gql": "MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN t, h ORDER BY t.created_at DESC LIMIT 3 NEXT RETURN h.name AS hashtag"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget = 50000000 RETURN m.title LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.budget = 50000000 RETURN m.title LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)-[:MODERATOR]->(u:User {name: 'itsbigchase'}) RETURN s.name",
        "gql": "MATCH (s:Stream)-[:MODERATOR]->(u:User {name: 'itsbigchase'}) RETURN s.name"
    },
    {
        "cypher": "MATCH (a:Adult)-[:IN_GENRE]->(g:Genre {name: 'Horror'}) RETURN a.title",
        "gql": "MATCH (a:Adult)-[:IN_GENRE]->(g:Genre {name: 'Horror'}) RETURN a.title"
    },
    {
        "cypher": "MATCH (a:AssessmentNote) RETURN a.date_of_notes",
        "gql": "MATCH (a:AssessmentNote) RETURN a.date_of_notes"
    },
    {
        "cypher": "MATCH (n:Author {author_id:'788db042978edbbfc654927e23ac21d1'}) RETURN n",
        "gql": "MATCH (n:Author {author_id:'788db042978edbbfc654927e23ac21d1'}) RETURN n"
    },
    {
        "cypher": "MATCH (a:Author)-[:WROTE]->(b:Book) WHERE b.isbn = '1234567890' RETURN a AS author",
        "gql": "MATCH (a:Author)-[:WROTE]->(b:Book) WHERE b.isbn = '1234567890' RETURN a AS author"
    },
    {
        "cypher": "MATCH p=(a:Topic{cluster:'2'})-[*]->(d:DOI{name:'10.1007/PL00005532'}) RETURN count(p)",
        "gql": "MATCH (a:Topic{cluster:'2'})-[]->{1,}(d:DOI{name:'10.1007/PL00005532'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (t:Technician) RETURN t.Name ORDER BY t.Age ASC",
        "gql": "MATCH (t:Technician) RETURN t.Name ORDER BY t.Age ASC"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 5 OR n.cluster < 7 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 5 OR n.cluster < 7 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (d:Director) RETURN DISTINCT d.name",
        "gql": "MATCH (d:Director) RETURN DISTINCT d.name"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name, c.centrality ORDER BY c.centrality ASC LIMIT 3",
        "gql": "MATCH (c:Character) RETURN c.name, c.centrality ORDER BY c.centrality ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)-[:CHATTER|MODERATOR|VIP]->(u) WITH s, COUNT(DISTINCT u) AS influence_count RETURN s.id, s.name, influence_count ORDER BY influence_count DESC LIMIT 1",
        "gql": "MATCH (s:Stream)-[:CHATTER]->(u) RETURN s, COUNT(u) AS influence_count NEXT RETURN s.id, s.name, influence_count ORDER BY influence_count DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Article {article_id:'3082'})-[:PUBLISHED_IN {pages: '45-96'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article {article_id:'3082'})-[:PUBLISHED_IN {pages: '45-96'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (b:Branch) WHERE b.Open_year = \"2001\" AND b.Membership_amount > \"100\" RETURN b.City",
        "gql": "MATCH (b:Branch) WHERE b.Open_year = \"2001\" AND b.Membership_amount > \"100\" RETURN b.City"
    },
    {
        "cypher": "MATCH (a:Author) RETURN a.fname, a.lname ORDER BY a.lname",
        "gql": "MATCH (a:Author) RETURN a.fname, a.lname ORDER BY a.lname"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.Company, c.Headquarters ORDER BY c.Market_Value DESC",
        "gql": "MATCH (c:Company) RETURN c.Company, c.Headquarters ORDER BY c.Market_Value DESC"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0 WITH o, avg(a.sentiment) AS avgSentiment ORDER BY avgSentiment LIMIT 3 RETURN o.name AS organization, avgSentiment",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0 RETURN o, avg(a.sentiment) AS avgSentiment ORDER BY avgSentiment LIMIT 3 NEXT RETURN o.name AS organization, avgSentiment"
    },
    {
        "cypher": "MATCH (n:Topic) RETURN count(n)",
        "gql": "MATCH (n:Topic) RETURN count(n)"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE a.bornIn = 'USA' WITH a, count(m) AS numMovies WHERE numMovies >= 2 RETURN a.name, a.bornIn, numMovies ORDER BY numMovies DESC LIMIT 5",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE a.bornIn = 'USA' RETURN a, count(m) AS numMovies NEXT RETURN a.name, a.bornIn, numMovies ORDER BY numMovies DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Article {prodName: 'KEVIN sweatpants'})-[:FROM_DEPARTMENT]->(d:Department)<-[:FROM_DEPARTMENT]-(other:Article)-[:VARIANT_OF]->(p:Product) RETURN DISTINCT p",
        "gql": "MATCH (a:Article{prodName:'KEVIN sweatpants'})-[:FROM_DEPARTMENT]->(d:Department)<-[:FROM_DEPARTMENT]-(other:Article)-[:VARIANT_OF]->(p:`Product`) RETURN DISTINCT p"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:INTERACTS_WITH]->(user:User) RETURN user.screen_name, COUNT(*) AS interactions ORDER BY interactions DESC LIMIT 5",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:INTERACTS_WITH]->(user:User) RETURN user.screen_name, COUNT(*) AS interactions ORDER BY interactions DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u1:User)-[:MODERATOR]->(u2:User) RETURN DISTINCT u1.name AS moderator_name",
        "gql": "MATCH (u1:User)-[:MODERATOR]->(u2:User) RETURN DISTINCT u1.name AS moderator_name"
    },
    {
        "cypher": "MATCH (b:Browser {name:'Safari'}) RETURN b.id, b.market_share",
        "gql": "MATCH (b:Browser {name:'Safari'}) RETURN b.id, b.market_share"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WHERE p.discontinued = true RETURN s.companyName",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) WHERE p.discontinued = true RETURN s.companyName"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN a.name LIMIT 10",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN a.name LIMIT 10"
    },
    {
        "cypher": "MATCH (a:Actor) WHERE a.age <> 20 RETURN a.Name",
        "gql": "MATCH (a:Actor) WHERE a.age <> 20 RETURN a.Name"
    },
    {
        "cypher": "MATCH (d:Document) RETURN d.document_id, d.receipt_date",
        "gql": "MATCH (d:Document) RETURN d.document_id, d.receipt_date"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) WITH pc, avg(m.revenue) AS avg_revenue ORDER BY avg_revenue DESC LIMIT 3 RETURN pc.name, avg_revenue",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) RETURN pc, avg(m.revenue) AS avg_revenue ORDER BY avg_revenue DESC LIMIT 3 NEXT RETURN pc.name, avg_revenue"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 8 OR n.cluster < 10 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 8 OR n.cluster < 10 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE d.born > date(\"1970-01-01\") RETURN m.title AS MovieTitle, m.released AS ReleaseDate ORDER BY m.released DESC LIMIT 3",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE d.born > date(\"1970-01-01\") RETURN m.title AS MovieTitle, m.released AS ReleaseDate ORDER BY m.released DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (stadium:stadium) RETURN stadium.name,stadium.capacity ORDER BY stadium.average DESC LIMIT 1",
        "gql": "MATCH (stadium:stadium) RETURN stadium.name,stadium.capacity ORDER BY stadium.average DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (u:User {id: 10251021})-[ :ASKED ]->(q:Question) RETURN q.title, q.id",
        "gql": "MATCH (u:User {id: 10251021})-[ :ASKED ]->(q:Question) RETURN q.title, q.id"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '247' RETURN n.abstract AS abstract, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '247' RETURN n.`abstract` AS `abstract`, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (a:Journal{journal_id:'d3b321ed42589ea798c241aa7de23d2d'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Journal{journal_id:'d3b321ed42589ea798c241aa7de23d2d'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Sci-Fi'}) RETURN m.title AS title, m.imdbRating AS rating ORDER BY m.imdbRating DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Sci-Fi'}) RETURN m.title AS title, m.imdbRating AS rating ORDER BY m.imdbRating DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person) RETURN p.Age ORDER BY p.Height DESC LIMIT 1",
        "gql": "MATCH (p:Person) RETURN p.Age ORDER BY p.Height DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Report) WHERE n.report_no <> 'PAM-780' RETURN DISTINCT n.report_no AS report_no",
        "gql": "MATCH (n:Report) WHERE n.report_no <> 'PAM-780' RETURN DISTINCT n.report_no AS report_no"
    },
    {
        "cypher": "MATCH (u:User)-[:FOLLOWS]->(a:User {name: 'Alice'}) RETURN u.name AS name",
        "gql": "MATCH (u:User)-[:FOLLOWS]->(a:User {name: 'Alice'}) RETURN u.name AS name"
    },
    {
        "cypher": "MATCH (q:Question) WITH q ORDER BY q.view_count DESC LIMIT 5 MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q) RETURN DISTINCT u.display_name AS user, q.title AS question_title, q.view_count AS views ORDER BY views DESC",
        "gql": "MATCH (q:Question) RETURN q ORDER BY q.view_count DESC LIMIT 5 NEXT MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q) RETURN DISTINCT u.display_name AS user, q.title AS question_title, q.view_count AS views ORDER BY views DESC"
    },
    {
        "cypher": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.name='logarithmic barrier penalty' RETURN m.label",
        "gql": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.name='logarithmic barrier penalty' RETURN m.label"
    },
    {
        "cypher": "MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE a.countries = \"Hong Kong\" RETURN e.name AS entity_name, a.address AS address",
        "gql": "MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE a.countries = \"Hong Kong\" RETURN e.name AS entity_name, a.address AS address"
    },
    {
        "cypher": "MATCH (u:User {id: 1})-[:RATED]->(m:Movie) RETURN m LIMIT 5",
        "gql": "MATCH (u:User {id: 1})-[:RATED]->(m:Movie) RETURN m LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Article{title:'Subexponential groups in 4-manifold topology'})-[*]->(d:DOI{doi_id:'46c2037fac5c38acd01bee5dde73c8e0'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Subexponential groups in 4-manifold topology'})-[]->{1,}(d:DOI{doi_id:'46c2037fac5c38acd01bee5dde73c8e0'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (t:Tag {name: 'cypher'}) MATCH (t)<-[:TAGGED]-(q:Question) MATCH (q)<-[:COMMENTED_ON]-(c:Comment) WITH avg(c.score) AS average_score RETURN average_score",
        "gql": "MATCH (t:Tag{name:'cypher'}) MATCH (t)<-[:TAGGED]-(q:Question) MATCH (q)<-[:COMMENTED_ON]-(c:Comment) RETURN avg(c.score) AS average_score NEXT RETURN average_score"
    },
    {
        "cypher": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) WITH parent, COUNT(subsidiary) AS subsidiaryCount RETURN parent.name AS organizationName, subsidiaryCount ORDER BY subsidiaryCount DESC LIMIT 3",
        "gql": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN parent, COUNT(subsidiary) AS subsidiaryCount NEXT RETURN parent.name AS organizationName, subsidiaryCount ORDER BY subsidiaryCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article {author: \"David Correa\"})-[:MENTIONS]->(o:Organization) RETURN o.name",
        "gql": "MATCH (a:Article {author: \"David Correa\"})-[:MENTIONS]->(o:Organization) RETURN o.name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.Year < 2000 RETURN avg(m.Budget_million), max(m.Budget_million), min(m.Budget_million)",
        "gql": "MATCH (m:Movie) WHERE m.`Year` < 2000 RETURN avg(m.Budget_million), max(m.Budget_million), min(m.Budget_million)"
    },
    {
        "cypher": "MATCH (c:Course) RETURN COUNT(c)",
        "gql": "MATCH (c:Course) RETURN COUNT(c)"
    },
    {
        "cypher": "MATCH (e:Entity)-[:CONCERNS]->(f:Filing) RETURN e.name, count(f) AS filings_count ORDER BY filings_count DESC LIMIT 5",
        "gql": "MATCH (e:Entity)-[:CONCERNS]->(f:Filing) RETURN e.name, count(f) AS filings_count ORDER BY filings_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Airport)<-[:LANDS_AT]-(f:Flight)-[:OPERATED_BY]->(c:OperateCompany) WHERE a.Country = \"United States\" OR a.name = \"Billund Airport\" RETURN DISTINCT f.Pilot as Pilots",
        "gql": "MATCH (a:Airport)<-[:LANDS_AT]-(f:Flight)-[:OPERATED_BY]->(c:OperateCompany) WHERE a.Country = \"United States\" OR a.name = \"Billund Airport\" RETURN DISTINCT f.Pilot as Pilots"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.origin_lat = f.beneficiary_lat RETURN f ORDER BY f.amount DESC LIMIT 3",
        "gql": "MATCH (f:Filing) WHERE f.origin_lat = f.beneficiary_lat RETURN f ORDER BY f.amount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (t:Technician) RETURN t.Starting_Year ORDER BY t.Age DESC LIMIT 1",
        "gql": "MATCH (t:Technician) RETURN t.Starting_Year ORDER BY t.Age DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie {title: \"Toy Story\"})<-[:ACTED_IN]-(a:Actor) RETURN a.name",
        "gql": "MATCH (m:Movie {title: \"Toy Story\"})<-[:ACTED_IN]-(a:Actor) RETURN a.name"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order) WITH s, o.freight AS freight WHERE freight IS NOT NULL WITH s, avg(toFloat(freight)) AS avgFreight ORDER BY avgFreight DESC LIMIT 3 RETURN s.companyName AS supplierName, avgFreight",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)<-[:ORDERS]-(o:`Order`) RETURN s, o.freight AS freight NEXT RETURN s.companyName AS supplierName, avgFreight"
    },
    {
        "cypher": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Spanish'}) RETURN m.original_title AS OriginalTitle",
        "gql": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Spanish'}) RETURN m.original_title AS OriginalTitle"
    },
    {
        "cypher": "MATCH p=(a:Article{article_id:'1071'})-[*]->(d:Report{report_no:'SPbU-IP-00-03'}) RETURN count(p)",
        "gql": "MATCH (a:Article{article_id:'1071'})-[]->{1,}(d:Report{report_no:'SPbU-IP-00-03'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:RATED]-(u:User) WITH m, COUNT(u) AS ratingCount WHERE ratingCount = 5 RETURN m.title AS movieTitle LIMIT 5",
        "gql": "MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, COUNT(u) AS ratingCount NEXT RETURN m.title AS movieTitle LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.votes IS NOT NULL RETURN m ORDER BY m.votes ASC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.votes IS NOT NULL RETURN m ORDER BY m.votes ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Candidate) RETURN c.Support_rate, c.Consider_rate, c.Oppose_rate ORDER BY c.Unsure_rate",
        "gql": "MATCH (c:Candidate) RETURN c.Support_rate, c.Consider_rate, c.Oppose_rate ORDER BY c.Unsure_rate"
    },
    {
        "cypher": "MATCH (l:Language)<-[:ORIGINAL_LANGUAGE]-(m:Movie) WITH l, count(m) AS movieCount WHERE movieCount > 10 RETURN l.name AS language ORDER BY movieCount DESC LIMIT 3",
        "gql": "MATCH (l:Language)<-[:ORIGINAL_LANGUAGE]-(m:Movie) RETURN l, count(m) AS movieCount NEXT RETURN l.name AS language ORDER BY movieCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {year : '2002'}]->(m) WHERE n.comments='Latex, xypic, and AMS packages. 53 pages, 1 figure' RETURN m.name",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2002'}]->(m) WHERE n.comments = 'Latex, xypic, and AMS packages. 53 pages, 1 figure' RETURN m.name"
    },
    {
        "cypher": "MATCH (c:Customer {customerID: 'VINET'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) RETURN p.productName",
        "gql": "MATCH (c:Customer{customerID:'VINET'})-[:PURCHASED]->(o:`Order`)-[:ORDERS]->(p:`Product`) RETURN p.productName"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WITH b, r ORDER BY r.stars ASC LIMIT 1 RETURN r.text AS reviewText",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) RETURN b, r ORDER BY r.stars ASC LIMIT 1 NEXT RETURN r.text AS reviewText"
    },
    {
        "cypher": "MATCH (o:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment < 0.3 WITH o, count(a) AS negArticleCount ORDER BY negArticleCount DESC LIMIT 3 RETURN o.name AS organization, negArticleCount",
        "gql": "MATCH (o:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment < 0.3 RETURN o, count(a) AS negArticleCount ORDER BY negArticleCount DESC LIMIT 3 NEXT RETURN o.name AS organization, negArticleCount"
    },
    {
        "cypher": "MATCH (n:Categories) WHERE n.category_id = 'b1d13c8b6874949821d038a8a71379d1' OR n.category_id IS NOT NULL RETURN DISTINCT n.category_id AS category_id",
        "gql": "MATCH (n:Categories) WHERE n.category_id = 'b1d13c8b6874949821d038a8a71379d1' OR n.category_id IS NOT NULL RETURN DISTINCT n.category_id AS category_id"
    },
    {
        "cypher": "MATCH (b:BookClub) WHERE b.Year > 1989 RETURN b.Book_Title, b.Author_or_Editor",
        "gql": "MATCH (b:BookClub) WHERE b.`Year` > 1989 RETURN b.Book_Title, b.Author_or_Editor"
    },
    {
        "cypher": "MATCH (v:Video)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN l.name AS language, count(*) AS frequency ORDER BY frequency DESC LIMIT 5",
        "gql": "MATCH (v:Video)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN l.name AS language, count(*) AS frequency ORDER BY frequency DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WITH m, count(DISTINCT l) AS language_count ORDER BY language_count DESC LIMIT 3 RETURN m.title AS movie_title, language_count",
        "gql": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN m, count(l) AS language_count ORDER BY language_count DESC LIMIT 3 NEXT RETURN m.title AS movie_title, language_count"
    },
    {
        "cypher": "MATCH p=(a:Author{first_name:'Amnon'})-[*]->(d:DOI{name:'10.1016/S0764-4442(00)00217-2'}) RETURN count(p)",
        "gql": "MATCH (a:Author{first_name:'Amnon'})-[]->{1,}(d:DOI{name:'10.1016/S0764-4442(00)00217-2'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality = 0.0 AND EXISTS ((c)-[:INTERACTS3]->()) RETURN c.name",
        "gql": "MATCH (c:Character) WHERE c.centrality = 0.0 AND EXISTS ((c)-[:INTERACTS3]->()) RETURN c.name"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) WHERE m.average_vote > 8.0 WITH c, count(m) AS movieCount ORDER BY movieCount DESC RETURN c.name AS countryName, movieCount",
        "gql": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) WHERE m.average_vote > 8.0 RETURN c, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN c.name AS countryName, movieCount"
    },
    {
        "cypher": "MATCH (m:Machine)-[:RUNS]->(a:Application) WITH a, count(m) AS instances ORDER BY instances DESC LIMIT 3 RETURN a.name, instances",
        "gql": "MATCH (m:Machine)-[:RUNS]->(a:Application) RETURN a, count(m) AS instances ORDER BY instances DESC LIMIT 3 NEXT RETURN a.name, instances"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation = 65 RETURN q.title, q.createdAt ORDER BY q.createdAt ASC LIMIT 3",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation = 65 RETURN q.title, q.createdAt ORDER BY q.createdAt ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Book) RETURN b.Writer ORDER BY b.Writer ASC",
        "gql": "MATCH (b:Book) RETURN b.Writer ORDER BY b.Writer ASC"
    },
    {
        "cypher": "MATCH (n:Author) MATCH (m:Keyword) RETURN n.first_name, m.name LIMIT 8",
        "gql": "MATCH (n:Author) MATCH (m:Keyword) RETURN n.first_name, m.name LIMIT 8"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.budget > 200000000 RETURN g.name AS genre, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.budget > 200000000 RETURN g.name AS genre, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WITH c.categoryName AS category, avg(p.unitPrice) AS avgUnitPrice ORDER BY avgUnitPrice DESC LIMIT 3 RETURN category, avgUnitPrice",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS category, avg(p.unitPrice) AS avgUnitPrice ORDER BY avgUnitPrice DESC LIMIT 3 NEXT RETURN category, avgUnitPrice"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_COMPETITOR]->(c:Organization) WITH o, count(c) AS numCompetitors ORDER BY numCompetitors DESC LIMIT 3 RETURN o.name AS organization, numCompetitors",
        "gql": "MATCH (o:Organization)-[:HAS_COMPETITOR]->(c:Organization) RETURN o, count(c) AS numCompetitors ORDER BY numCompetitors DESC LIMIT 3 NEXT RETURN o.name AS organization, numCompetitors"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.tagline IS NOT NULL RETURN m.title, m.tagline ORDER BY m.tagline DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.tagline IS NOT NULL RETURN m.title, m.tagline ORDER BY m.tagline DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Main_Industry = 'Banking' RETURN c.Rank, c.Company, c.Market_Value ORDER BY c.Sales_billion, c.Profits_billion",
        "gql": "MATCH (c:Company) WHERE c.Main_Industry = 'Banking' RETURN c.Rank, c.Company, c.Market_Value ORDER BY c.Sales_billion, c.Profits_billion"
    },
    {
        "cypher": "MATCH (a:Journal{name:'Constructive Approximation'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Journal{name:'Constructive Approximation'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:RT_MENTIONS]->(user:User) RETURN user.screen_name AS user, count(*) AS mentions ORDER BY mentions DESC LIMIT 3",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:RT_MENTIONS]->(user:User) RETURN user.screen_name AS user, count(*) AS mentions ORDER BY mentions DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.louvain >= 0 AND c.louvain <= 5 AND c.pagerank > 0.5 RETURN c",
        "gql": "MATCH (c:Character) WHERE c.louvain >= 0 AND c.louvain <= 5 AND c.pagerank > 0.5 RETURN c"
    },
    {
        "cypher": "MATCH (n:Categories {category_id:'4b7053a7def1fb0250a0e83ebd2f9a7b'}) RETURN n",
        "gql": "MATCH (n:Categories {category_id:'4b7053a7def1fb0250a0e83ebd2f9a7b'}) RETURN n"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.imdbRating >= 6 WITH d, count(m) AS moviesCount ORDER BY moviesCount DESC LIMIT 5 RETURN d.name, moviesCount",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.imdbRating >= 6 RETURN d, count(m) AS moviesCount ORDER BY moviesCount DESC LIMIT 5 NEXT RETURN d.name, moviesCount"
    },
    {
        "cypher": "MATCH (s:Switch)-[:HOLDS]->(r:Rack {zone: 4}) RETURN s.ip AS SwitchIP ORDER BY s.ip LIMIT 5",
        "gql": "MATCH (s:Switch)-[:HOLDS]->(r:Rack {zone: 4}) RETURN s.ip AS SwitchIP ORDER BY s.ip LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (highschooler:Highschooler) RETURN highschooler.grade",
        "gql": "MATCH (highschooler:Highschooler) RETURN highschooler.grade"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1063 OR n.article_id < 1013 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1063 OR n.article_id < 1013 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.Headquarters, COUNT(c)",
        "gql": "MATCH (c:Company) RETURN c.Headquarters, COUNT(c)"
    },
    {
        "cypher": "MATCH (d:Department) WHERE d.Division = \"AS\" RETURN count(d)",
        "gql": "MATCH (d:Department) WHERE d.Division = \"AS\" RETURN count(d)"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'}) RETURN s.name AS stream_name, s.url AS stream_url",
        "gql": "MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'}) RETURN s.name AS stream_name, s.url AS stream_url"
    },
    {
        "cypher": "MATCH (v:Video {title: 'Jonah: A VeggieTales Movie'}) RETURN v.homepage",
        "gql": "MATCH (v:Video {title: 'Jonah: A VeggieTales Movie'}) RETURN v.homepage"
    },
    {
        "cypher": "MATCH (cars_data:cars_data) WHERE cars_data.Cylinders > 4 RETURN count(*)",
        "gql": "MATCH (cars_data:cars_data) WHERE cars_data.Cylinders > 4 RETURN count(*)"
    },
    {
        "cypher": "MATCH (v:Video) WHERE v.revenue = 0 RETURN v.title, v.popularity ORDER BY v.popularity DESC LIMIT 3",
        "gql": "MATCH (v:Video) WHERE v.revenue = 0 RETURN v.title, v.popularity ORDER BY v.popularity DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.comments='26 pages; final version; to appear in Numerische Mathematik' RETURN m.specifications",
        "gql": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.comments='26 pages; final version; to appear in Numerische Mathematik' RETURN m.specifications"
    },
    {
        "cypher": "MATCH (a:Article{comments:'22 pages, to appear in Topology. http://jdc.math.uwo.ca Lots of minor   revisions. This version should closely match the published version'})-[*]->(d:Categories{category_id:'eea477d68b70c3a05be12567240033ef'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Article{comments:'22 pages, to appear in Topology. http://jdc.math.uwo.ca Lots of minor   revisions. This version should closely match the published version'})-[]->{1,}(d:Categories{category_id:'eea477d68b70c3a05be12567240033ef'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget > 50000000 RETURN m.title, m.budget",
        "gql": "MATCH (m:Movie) WHERE m.budget > 50000000 RETURN m.title, m.budget"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality IS NOT NULL RETURN c.name, c.centrality ORDER BY c.centrality DESC LIMIT 3",
        "gql": "MATCH (c:Character) WHERE c.centrality IS NOT NULL RETURN c.name, c.centrality ORDER BY c.centrality DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(t:Team) WITH s, t ORDER BY t.createdAt RETURN s LIMIT 3",
        "gql": "MATCH (s:Stream)-[:HAS_TEAM]->(t:Team) RETURN s, t ORDER BY t.createdAt NEXT RETURN s LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Address {address: \"ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.\"})-[:similar]->(similarAddress:Address) RETURN similarAddress",
        "gql": "MATCH (a:Address {address: \"ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.\"})-[:similar]->(similarAddress:Address) RETURN similarAddress"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CEO]->(p:Person) WHERE o.nbrEmployees IS NOT NULL RETURN o.name AS Organization, p.name AS CEO ORDER BY o.nbrEmployees DESC LIMIT 5",
        "gql": "MATCH (o:Organization)-[:HAS_CEO]->(p:Person) WHERE o.nbrEmployees IS NOT NULL RETURN o.name AS Organization, p.name AS CEO ORDER BY o.nbrEmployees DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[r:CREATED]->(c:Comment) WHERE date(r.timestamp).week = 4 RETURN count(c) AS count_Comment_",
        "gql": "MATCH (u:User)-[r:CREATED]->(c:Comment) WHERE r.`timestamp` = 4 RETURN count(c) AS count_Comment_"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q ORDER BY q.favorites DESC LIMIT 5",
        "gql": "MATCH (q:Question) RETURN q ORDER BY q.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person) WHERE p.Sex = 'M' RETURN AVG(p.Height), AVG(p.Weight)",
        "gql": "MATCH (p:Person) WHERE p.Sex = 'M' RETURN AVG(p.Height), AVG(p.Weight)"
    },
    {
        "cypher": "MATCH (o:Organization) RETURN o.name LIMIT 5",
        "gql": "MATCH (o:Organization) RETURN o.name LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Publication) WHERE p.Publisher = \"Person\" OR p.Publisher = \"Wiley\" RETURN p.Price",
        "gql": "MATCH (p:Publication) WHERE p.Publisher = \"Person\" OR p.Publisher = \"Wiley\" RETURN p.Price"
    },
    {
        "cypher": "MATCH (t1:CatalogContent) MATCH (t2:CatalogStructure) WHERE t1.catalog_level_number = t2.catalog_level_number RETURN t2.catalog_level_name ORDER BY t1.price_in_dollars ASC LIMIT 1",
        "gql": "MATCH (t1:CatalogContent) MATCH (t2:CatalogStructure) WHERE t1.catalog_level_number = t2.catalog_level_number RETURN t2.catalog_level_name ORDER BY t1.price_in_dollars ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (j:Journal)-[r:EDited_BY]->(e:Editor) RETURN e.Name, e.Age, j.Theme ORDER BY j.Theme ASC",
        "gql": "MATCH (j:Journal)-[r:EDited_BY]->(e:Editor) RETURN e.Name, e.Age, j.Theme ORDER BY j.Theme ASC"
    },
    {
        "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(competitor:Organization) <-[:HAS_SUPPLIER]-(supplier:Organization) RETURN DISTINCT supplier.name",
        "gql": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(competitor:Organization) <-[:HAS_SUPPLIER]-(supplier:Organization) RETURN DISTINCT supplier.name"
    },
    {
        "cypher": "MATCH (n:UpdateDate) WHERE n.update_date <> '2010-06-18' RETURN DISTINCT n.update_date AS update_date",
        "gql": "MATCH (n:UpdateDate) WHERE n.update_date <> '2010-06-18' RETURN DISTINCT n.update_date AS update_date"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answered = true AND q.favorites > 3 RETURN q",
        "gql": "MATCH (q:Question) WHERE q.answered = true AND q.favorites > 3 RETURN q"
    },
    {
        "cypher": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) WITH p, count(DISTINCT r.roles) AS distinctRoles ORDER BY distinctRoles DESC LIMIT 3 RETURN p.name, distinctRoles",
        "gql": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN p, count(r.roles) AS distinctRoles ORDER BY distinctRoles DESC LIMIT 3 NEXT RETURN p.name, distinctRoles"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.release_date < date('1990-01-01') RETURN m.title, m.revenue ORDER BY m.revenue ASC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.release_date < date('1990-01-01') RETURN m.title, m.revenue ORDER BY m.revenue ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.vote_count > 5000 RETURN m.title AS title, m.vote_count AS vote_count",
        "gql": "MATCH (m:Movie) WHERE m.vote_count > 5000 RETURN m.title AS title, m.vote_count AS vote_count"
    },
    {
        "cypher": "MATCH (p:Port {port: 80})<-[:EXPOSES]-(i:Interface) RETURN i.ip ORDER BY i.ip LIMIT 3",
        "gql": "MATCH (p:Port {port: 80})<-[:EXPOSES]-(i:Interface) RETURN i.ip ORDER BY i.ip LIMIT 3"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet)<-[:POSTS]-(user:User) WHERE user.followers < me.followers RETURN original.text AS TweetText, user.screen_name AS OriginalUser, user.followers AS FollowerCount, original.created_at AS CreatedAt",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet)<-[:POSTS]-(user:User) WHERE user.followers < me.followers RETURN original.text AS TweetText, user.screen_name AS OriginalUser, user.followers AS FollowerCount, original.created_at AS CreatedAt"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization), (o)-[:HAS_CEO]->(ceo:Person) RETURN o.name AS organization, ceo.name AS ceo",
        "gql": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization), (o)-[:HAS_CEO]->(ceo:Person) RETURN o.name AS organization, ceo.name AS ceo"
    },
    {
        "cypher": "MATCH (b:Book) WHERE b.Writer <> \"Elaine Lee\" RETURN b.Title",
        "gql": "MATCH (b:Book) WHERE b.Writer <> \"Elaine Lee\" RETURN b.Title"
    },
    {
        "cypher": "MATCH (s:Store) RETURN s.Type, COUNT(*)",
        "gql": "MATCH (s:Store) RETURN s.Type, COUNT(*)"
    },
    {
        "cypher": "MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization) WITH p, count(o) AS orgCount WHERE orgCount > 3 RETURN p.name AS BoardMember, orgCount",
        "gql": "MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization) RETURN p, count(o) AS orgCount NEXT RETURN p.name AS BoardMember, orgCount"
    },
    {
        "cypher": "MATCH p=(a:Author{author_id:'f6bcab8e721fbec0f293fee49d73c9c4'})-[*]->(d:DOI{doi_id:'abce5ed79c520bdb8fd79a61a852648d'}) RETURN count(p)",
        "gql": "MATCH (a:Author{author_id:'f6bcab8e721fbec0f293fee49d73c9c4'})-[]->{1,}(d:DOI{doi_id:'abce5ed79c520bdb8fd79a61a852648d'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (a:Answer) WITH a, a.score AS score ORDER BY score DESC LIMIT 1 RETURN a.body_markdown",
        "gql": "MATCH (a:Answer) RETURN a, a.score AS score ORDER BY score DESC LIMIT 1 NEXT RETURN a.body_markdown"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game),       (s)-[:CHATTER]->(u:User)-[:VIP]->(s) WITH g.name AS gameName, COUNT(s) AS streamCount ORDER BY streamCount DESC LIMIT 3 RETURN gameName, streamCount",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN g.name AS gameName, COUNT(s) AS streamCount ORDER BY streamCount DESC LIMIT 3 NEXT RETURN gameName, streamCount"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.Name ORDER BY c.Sales_in_Billion ASC",
        "gql": "MATCH (c:Company) RETURN c.Name ORDER BY c.Sales_in_Billion ASC"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review) WITH u.name AS userName, avg(r.stars) AS averageRating RETURN userName, averageRating",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review) RETURN u.name AS userName, avg(r.stars) AS averageRating NEXT RETURN userName, averageRating"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.released < \"1990-01-01\" AND m.imdbRating IS NOT NULL RETURN m ORDER BY m.imdbRating DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.released < \"1990-01-01\" AND m.imdbRating IS NOT NULL RETURN m ORDER BY m.imdbRating DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:MENTIONS]->(:User {name: 'Neo4j'}) RETURN t.text AS tweet_text, t.favorites AS favorites ORDER BY favorites DESC LIMIT 3",
        "gql": "MATCH (t:Tweet)-[:MENTIONS]->(:User {name: 'Neo4j'}) RETURN t.text AS tweet_text, t.favorites AS favorites ORDER BY favorites DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WITH m, COUNT(l) AS language_count ORDER BY language_count DESC LIMIT 3 RETURN m.title AS MovieTitle, language_count AS NumberOfLanguages",
        "gql": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN m, COUNT(l) AS language_count ORDER BY language_count DESC LIMIT 3 NEXT RETURN m.title AS MovieTitle, language_count AS NumberOfLanguages"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, size(m.title) AS length ORDER BY length DESC LIMIT 1",
        "gql": "MATCH (m:Movie) RETURN m.title, size(m.title) AS length ORDER BY length DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (d:Director) WHERE d.born IS NOT NULL RETURN d.name, d.born ORDER BY d.born DESC LIMIT 5",
        "gql": "MATCH (d:Director) WHERE d.born IS NOT NULL RETURN d.name, d.born ORDER BY d.born DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(:Team) RETURN s.name, s.total_view_count ORDER BY s.total_view_count DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:HAS_TEAM]->(:Team) RETURN s.name, s.total_view_count ORDER BY s.total_view_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (t:Tweet) RETURN t.text, t.created_at ORDER BY t.created_at DESC LIMIT 5",
        "gql": "MATCH (t:Tweet) RETURN t.text, t.created_at ORDER BY t.created_at DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (aff:affiliation {name: 'Stanford University'})<-[:author_in_affiliation]-(a:author)-[:author_write_paper]->(p:paper)-[:paper_in_domain]->(:domain {name: 'Parallel Computing'}) RETURN COUNT(DISTINCT p.name)",
        "gql": "MATCH (aff:affiliation {name: 'Stanford University'})<-[:author_in_affiliation]-(a:author)-[:author_write_paper]->(p:paper)-[:paper_in_domain]->(:domain {name: 'Parallel Computing'}) RETURN COUNT(DISTINCT p.name)"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'}) WITH avg(q.favorites) AS average_favorites RETURN average_favorites",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'graphql'}) RETURN avg(q.favorites) AS average_favorites NEXT RETURN average_favorites"
    },
    {
        "cypher": "MATCH (s:Supplier {country: 'Germany'})-[:SUPPLIES]->(p:Product) RETURN p.productName, p.productID, p.unitPrice LIMIT 3",
        "gql": "MATCH (s:Supplier{country:'Germany'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName, p.productID, p.unitPrice LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WITH c.categoryName AS category, COUNT(p) AS productCount ORDER BY productCount ASC LIMIT 3 RETURN category, productCount",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS category, COUNT(p) AS productCount ORDER BY productCount ASC LIMIT 3 NEXT RETURN category, productCount"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE c.name = 'Singapore' RETURN f ORDER BY f.amount ASC LIMIT 3",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE c.name = 'Singapore' RETURN f ORDER BY f.amount ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:POSTS]->(t:Tweet) WITH u, COUNT(t) AS tweet_count ORDER BY tweet_count DESC LIMIT 3 RETURN u.screen_name AS screen_name",
        "gql": "MATCH (u:User)-[:POSTS]->(t:Tweet) RETURN u, COUNT(t) AS tweet_count ORDER BY tweet_count DESC LIMIT 3 NEXT RETURN u.screen_name AS screen_name"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Just Chatting'}) RETURN s.name AS stream_name, s.followers AS followers ORDER BY s.followers DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Just Chatting'}) RETURN s.name AS stream_name, s.followers AS followers ORDER BY s.followers DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_COLLECTION]->(:Collection) RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:IN_COLLECTION]->(:Collection) RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie {title: \"V for Vendetta\"})<-[:DIRECTED]-(p:Person) RETURN p.name",
        "gql": "MATCH (m:Movie {title: \"V for Vendetta\"})<-[:DIRECTED]-(p:Person) RETURN p.name"
    },
    {
        "cypher": "MATCH (rack:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(machine:Machine) RETURN count(machine) AS numberOfMachines",
        "gql": "MATCH (rack:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(machine:Machine) RETURN count(machine) AS numberOfMachines"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order) WITH c, size(collect(o.orderID)) AS orderCount WHERE orderCount = 1 RETURN c.customerID, c.contactName",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`) RETURN c, size(o.orderID) AS orderCount NEXT RETURN c.customerID, c.contactName"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '213'}]->(m) WHERE n.title='Hyper-K{\\\"a}hler Hierarchies and their twistor theory' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '213'}]->(m) WHERE n.title='Hyper-K{\\\"a}hler Hierarchies and their twistor theory' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.lastEditTimestamp IS NOT NULL RETURN e ORDER BY e.lastEditTimestamp DESC LIMIT 5",
        "gql": "MATCH (e:Entity) WHERE e.lastEditTimestamp IS NOT NULL RETURN e ORDER BY e.lastEditTimestamp DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank = 'CIMB Bank Berhad' RETURN f.beneficiary_bank, COUNT(*) AS transaction_count ORDER BY transaction_count DESC LIMIT 5",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank = 'CIMB Bank Berhad' RETURN f.beneficiary_bank, COUNT(*) AS transaction_count ORDER BY transaction_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.community = 795 AND c.pagerank > 0.2 RETURN c.name, c.pagerank",
        "gql": "MATCH (c:Character) WHERE c.community = 795 AND c.pagerank > 0.2 RETURN c.name, c.pagerank"
    },
    {
        "cypher": "MATCH (c:Character)-[r1:INTERACTS1]->(c1:Character) MATCH (c)-[r2:INTERACTS2]->(c2:Character) WITH c, SUM(r1.weight + r2.weight) AS totalWeight RETURN c.name AS characterName, totalWeight ORDER BY totalWeight DESC LIMIT 5",
        "gql": "MATCH (c:Character)-[r1:INTERACTS1]->(c1:Character) MATCH (c)-[r2:INTERACTS2]->(c2:Character) RETURN c, SUM(r1.weight) AS totalWeight NEXT RETURN c.name AS characterName, totalWeight ORDER BY totalWeight DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (i:Intermediary {name: \"MICHAEL PAPAGEORGE, MR.\"})-[:intermediary_of]->(e:Entity) RETURN e.name AS entity_name, e.status AS entity_status",
        "gql": "MATCH (i:Intermediary {name: \"MICHAEL PAPAGEORGE, MR.\"})-[:intermediary_of]->(e:Entity) RETURN e.name AS entity_name, e.status AS entity_status"
    },
    {
        "cypher": "MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(a:Application) RETURN a.name AS applicationName",
        "gql": "MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(a:Application) RETURN a.name AS applicationName"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WHERE p.reorderLevel < 10 RETURN c LIMIT 5",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.reorderLevel < 10 RETURN c LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing)-[:CONCERNS]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 1000000 RETURN e.name AS entity_name ORDER BY e.name LIMIT 3",
        "gql": "MATCH (f:Filing)-[:CONCERNS]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 1000000 RETURN e.name AS entity_name ORDER BY e.name LIMIT 3"
    },
    {
        "cypher": "MATCH (v1:Version {name: '7.1'})<-[:PREVIOUS]-(v2:Version) RETURN v2.name",
        "gql": "MATCH (v1:Version {name: '7.1'})<-[:PREVIOUS]-(v2:Version) RETURN v2.name"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u.display_name, u.reputation ORDER BY u.reputation ASC LIMIT 1",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u.display_name, u.reputation ORDER BY u.reputation ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.address",
        "gql": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.address"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweetedTweet:Tweet)<-[:POSTS]-(retweetedUser:User) RETURN retweetedUser.screen_name AS retweeted_user, retweetedTweet.text AS retweeted_tweet",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweetedTweet:Tweet)<-[:POSTS]-(retweetedUser:User) RETURN retweetedUser.screen_name AS retweeted_user, retweetedTweet.text AS retweeted_tweet"
    },
    {
        "cypher": "MATCH (n:Report) WHERE n.report_id IS NULL RETURN n LIMIT 8",
        "gql": "MATCH (n:Report) WHERE n.report_id IS NULL RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (f:Filing) WITH f ORDER BY f.amount ASC LIMIT 1 MATCH (f)-[:BENEFITS]->(b:Entity) RETURN b.name",
        "gql": "MATCH (f:Filing) RETURN f ORDER BY f.amount ASC LIMIT 1 NEXT MATCH (f)-[:BENEFITS]->(b:Entity) RETURN b.name"
    },
    {
        "cypher": "MATCH (o:Organization) WITH max(o.revenue) AS maxRevenue MATCH (org:Organization { revenue: maxRevenue }) MATCH (org)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN country.name",
        "gql": "MATCH (o:Organization) RETURN max(o.revenue) AS maxRevenue NEXT MATCH (org:Organization{revenue:maxRevenue}) MATCH (org)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN country.name"
    },
    {
        "cypher": "MATCH (a:Address) RETURN DISTINCT a.countries LIMIT 5",
        "gql": "MATCH (a:Address) RETURN DISTINCT a.countries LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) WITH m, avg(m.votes) AS average_votes MATCH (p:Person)-[:DIRECTED]->(m) WITH p, average_votes ORDER BY average_votes DESC RETURN p.name AS director_name, avg(average_votes) AS average_movie_votes LIMIT 3",
        "gql": "MATCH (m:Movie) MATCH (p:Person)-[:DIRECTED]->(m) RETURN m, avg(m.votes) AS average_votes NEXT RETURN p.name AS director_name, avg(average_votes) AS average_movie_votes LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question)<-[:ANSWERED]-(a:Answer) WHERE a.score < -1 RETURN DISTINCT q.uuid",
        "gql": "MATCH (q:Question)<-[:ANSWERED]-(a:Answer) WHERE a.score < -1 RETURN DISTINCT q.uuid"
    },
    {
        "cypher": "MATCH (other_available_features:Other_Available_Features) RETURN count(*)",
        "gql": "MATCH (other_available_features:Other_Available_Features) RETURN count(*)"
    },
    {
        "cypher": "MATCH (p:Person)<-[:HAS_CEO]-(o:Organization) WHERE o.isPublic = true RETURN p.name AS name, p.id AS id LIMIT 3",
        "gql": "MATCH (p:Person)<-[:HAS_CEO]-(o:Organization) WHERE o.isPublic = true RETURN p.name AS name, p.id AS id LIMIT 3"
    },
    {
        "cypher": "MATCH (b:BookClub) RETURN b.Year, b.Book_Title, b.Publisher ORDER BY b.Year DESC",
        "gql": "MATCH (b:BookClub) RETURN b.`Year`, b.Book_Title, b.Publisher ORDER BY b.`Year` DESC"
    },
    {
        "cypher": "MATCH (s:Stadium) RETURN count(s)",
        "gql": "MATCH (s:Stadium) RETURN count(s)"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.votes < 100 RETURN m.title ORDER BY m.votes LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.votes < 100 RETURN m.title ORDER BY m.votes LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article)-[:VARIANT_OF]->(p:Product {productGroupName: \"Women\"}) RETURN COUNT(a) AS numberOfItemsForWomen",
        "gql": "MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`{productGroupName:\"Women\"}) RETURN COUNT(a) AS numberOfItemsForWomen"
    },
    {
        "cypher": "MATCH (p:paper)-[:paper_in_domain]->(d:domain) WITH d, COUNT(p) AS numPapers RETURN d.name ORDER BY numPapers DESC LIMIT 1",
        "gql": "MATCH (p:paper)-[:paper_in_domain]->(d:domain) RETURN d, COUNT(p) AS numPapers NEXT RETURN d.name ORDER BY numPapers DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:author)-[:author_write_paper]->(p:paper)-[:paper_in_domain]->(d:domain {name: 'Computer Vision'}) WITH a,p MATCH (a)-[:author_write_paper]->(p)<-[:author_write_paper]-(coauthor:author) WITH a, COUNT(DISTINCT coauthor) AS CoAuthorCount RETURN a.name AS AuthorName, CoAuthorCount ORDER BY CoAuthorCount DESC LIMIT 1",
        "gql": "MATCH (a:author)-[:author_write_paper]->(p:paper)-[:paper_in_domain]->(d:domain{name:'Computer Vision'}) MATCH (a)-[:author_write_paper]->(p)<-[:author_write_paper]-(coauthor:author) RETURN a, p NEXT RETURN a.name AS AuthorName, CoAuthorCount ORDER BY CoAuthorCount DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category) WITH s, count(DISTINCT c) AS numCategories WHERE numCategories > 1 RETURN s LIMIT 3",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN s, count(c) AS numCategories NEXT RETURN s LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE m.released >= 1990 AND m.released < 2000 RETURN p.name LIMIT 3",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE m.released >= 1990 AND m.released < 2000 RETURN p.name LIMIT 3"
    },
    {
        "cypher": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Population DESC LIMIT 1",
        "gql": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Population DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) WHERE m.votes > 500 RETURN p.name LIMIT 3",
        "gql": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) WHERE m.votes > 500 RETURN p.name LIMIT 3"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.originator_bank_country = 'United Kingdom' WITH e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 3 RETURN e",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.originator_bank_country = 'United Kingdom' RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 3 NEXT RETURN e"
    },
    {
        "cypher": "MATCH (c1:Character)-[i:INTERACTS2]->(c2:Character) RETURN c1.name, c2.name, i.weight AS weight ORDER BY i.weight DESC LIMIT 3",
        "gql": "MATCH (c1:Character)-[i:INTERACTS2]->(c2:Character) RETURN c1.name, c2.name, i.weight AS weight ORDER BY i.weight DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WHERE p.unitsInStock < 10 RETURN DISTINCT c",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.unitsInStock < 10 RETURN DISTINCT c"
    },
    {
        "cypher": "MATCH (c:City) RETURN c.Status, avg(c.Population)",
        "gql": "MATCH (c:City) RETURN c.Status, avg(c.Population)"
    },
    {
        "cypher": "MATCH (e:Employee) RETURN e.name AS employee_name",
        "gql": "MATCH (e:Employee) RETURN e.name AS employee_name"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.degree = 0 RETURN c.name",
        "gql": "MATCH (c:Character) WHERE c.degree = 0 RETURN c.name"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN DISTINCT a.name",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN DISTINCT a.name"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.title='A Topology-Preserving Level Set Method for Shape Optimization' RETURN m.key_id",
        "gql": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.title='A Topology-Preserving Level Set Method for Shape Optimization' RETURN m.key_id"
    },
    {
        "cypher": "MATCH (a:Article {comments:'latex, 38 pages, typos corrected'})-[:PUBLISHED_IN {pages: '521-554'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article {comments:'latex, 38 pages, typos corrected'})-[:PUBLISHED_IN {pages: '521-554'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory) WITH cat, avg(o.revenue) AS avg_revenue ORDER BY avg_revenue DESC RETURN cat.name, avg_revenue LIMIT 1",
        "gql": "MATCH (o:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory) RETURN cat, avg(o.revenue) AS avg_revenue ORDER BY avg_revenue DESC NEXT RETURN cat.name, avg_revenue LIMIT 1"
    },
    {
        "cypher": "MATCH (actor:Actor)-[acted:ACTED_IN]->(movie:Movie) WHERE movie.title = 'Titanic' AND acted.role = 'Jack Dawson' RETURN actor.name",
        "gql": "MATCH (actor:Actor)-[acted:ACTED_IN]->(movie:Movie) WHERE movie.title = 'Titanic' AND acted.role = 'Jack Dawson' RETURN actor.name"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'}) RETURN u",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'}) RETURN u"
    },
    {
        "cypher": "MATCH (a:Author {name:'Jane Smith'})-[:WROTE]->(b:Book) RETURN b.publicationYear AS publicationYear",
        "gql": "MATCH (a:Author {name:'Jane Smith'})-[:WROTE]->(b:Book) RETURN b.publicationYear AS publicationYear"
    },
    {
        "cypher": "MATCH (p:Product) WHERE p.discontinued = false WITH p ORDER BY p.unitsOnOrder DESC LIMIT 1 RETURN p.productName, p.categoryID",
        "gql": "MATCH (p:`Product`) WHERE p.discontinued = false RETURN p ORDER BY p.unitsOnOrder DESC LIMIT 1 NEXT RETURN p.productName, p.categoryID"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.label <> 'Category theory_3' RETURN DISTINCT n.label AS label",
        "gql": "MATCH (n:Topic) WHERE n.label <> 'Category theory_3' RETURN DISTINCT n.label AS label"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Keanu Reeves\"})-[:FOLLOWS]->(followed:Person) WHERE followed.born >= 1960 AND followed.born < 1970 RETURN followed ORDER BY followed.born LIMIT 3",
        "gql": "MATCH (p:Person {name: \"Keanu Reeves\"})-[:FOLLOWS]->(followed:Person) WHERE followed.born >= 1960 AND followed.born < 1970 RETURN followed ORDER BY followed.born LIMIT 3"
    },
    {
        "cypher": "MATCH p=(a:Author{first_name:'Marco'})-[*]->(d:Article{abstract:'  I associate to a global field K a Lax-Phillips scattering which has the property of causality if and only if the Riemann Hypothesis holds for all the abelian L-functions of K. As a Hilbert space closure problem this provides an adelic variation on a theme initiated by Nyman and Beurling. The adelic aspects are related to previous work by Tate, Iwasawa and Connes. '}) RETURN count(p)",
        "gql": "MATCH (a:Author{first_name:'Marco'})-[]->{1,}(d:Article{`abstract`:'  I associate to a global field K a Lax-Phillips scattering which has the property of causality if and only if the Riemann Hypothesis holds for all the abelian L-functions of K. As a Hilbert space closure problem this provides an adelic variation on a theme initiated by Nyman and Beurling. The adelic aspects are related to previous work by Tate, Iwasawa and Connes. '}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (b:Business) WHERE b.location.latitude > 46.87 RETURN b.name",
        "gql": "MATCH (b:Business) WHERE b.location.latitude > 46.87 RETURN b.name"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:ACTED_IN]-(p:Person) WITH m, count(p) AS actorCount WHERE actorCount > 3 RETURN m.title AS MovieTitle, actorCount",
        "gql": "MATCH (m:Movie)<-[:ACTED_IN]-(p:Person) RETURN m, count(p) AS actorCount NEXT RETURN m.title AS MovieTitle, actorCount"
    },
    {
        "cypher": "MATCH (m:Machine)-[:RUNS]->(p:Process) WHERE p.startTime > 1606500000000 RETURN DISTINCT m.name",
        "gql": "MATCH (m:Machine)-[:RUNS]->(p:Process) WHERE p.startTime > 1606500000000 RETURN DISTINCT m.name"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WITH m, count(d) AS numDirectors ORDER BY numDirectors DESC RETURN m.title, numDirectors LIMIT 5",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN m, count(d) AS numDirectors ORDER BY numDirectors DESC NEXT RETURN m.title, numDirectors LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_DOI]->(m) WHERE n.comments='21 pages, AMS-LaTeX' RETURN m.name",
        "gql": "MATCH (n:Article) -[ha:HAS_DOI]->(m) WHERE n.comments='21 pages, AMS-LaTeX' RETURN m.name"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet) RETURN t.text AS tweet, t.favorites AS favorites ORDER BY t.favorites DESC LIMIT 5",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet) RETURN t.text AS tweet, t.favorites AS favorites ORDER BY t.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WITH p, r, m ORDER BY r.rating ASC LIMIT 1 RETURN p.name AS reviewer, m.title AS movie, r.rating AS rating",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN p, r, m ORDER BY r.rating ASC LIMIT 1 NEXT RETURN p.name AS reviewer, m.title AS movie, r.rating AS rating"
    },
    {
        "cypher": "MATCH (n:Journal), (:Categories {specifications: 'q-fin.RM'}) WHERE NOT (n) --> (:Categories) RETURN n.journal_id",
        "gql": "MATCH (n:Journal), (:Categories {specifications: 'q-fin.RM'}) WHERE NOT (n) --> (:Categories) RETURN n.journal_id"
    },
    {
        "cypher": "MATCH (s:Shop) RETURN s.Address ORDER BY s.Open_Year",
        "gql": "MATCH (s:Shop) RETURN s.Address ORDER BY s.Open_Year"
    },
    {
        "cypher": "MATCH (g:GasStation) WHERE g.Open_Year > 2000 WITH g.Manager_Name AS manager_name, count(g) AS num_stations ORDER BY num_stations DESC LIMIT 1 RETURN manager_name",
        "gql": "MATCH (g:GasStation) WHERE g.Open_Year > 2000 RETURN g.Manager_Name AS manager_name, count(g) AS num_stations ORDER BY num_stations DESC LIMIT 1 NEXT RETURN manager_name"
    },
    {
        "cypher": "MATCH (f:Filing {sar_id: \"3297\"})-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.code",
        "gql": "MATCH (f:Filing {sar_id: \"3297\"})-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.code"
    },
    {
        "cypher": "MATCH (tweet:Tweet)-[:MENTIONS]->(:User {screen_name: 'neo4j'}),       (tweet)-[:TAGS]->(hashtag:Hashtag) WITH hashtag,       count(DISTINCT tweet) AS tweetCount RETURN hashtag.name, tweetCount ORDER BY tweetCount DESC",
        "gql": "MATCH (tweet:Tweet)-[:MENTIONS]->(:User{screen_name:'neo4j'}) RETURN hashtag, count(tweet) AS tweetCount NEXT RETURN hashtag.name, tweetCount ORDER BY tweetCount DESC"
    },
    {
        "cypher": "MATCH (a:Article {comments:'21 pages, AMS-LaTeX'})-[:PUBLISHED_IN {pages: '479-502'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article {comments:'21 pages, AMS-LaTeX'})-[:PUBLISHED_IN {pages: '479-502'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Grand Theft Auto V'}),       (s)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN s.name AS StreamName",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Grand Theft Auto V'}),       (s)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN s.name AS StreamName"
    },
    {
        "cypher": "MATCH (book:Book), (publication:Publication)  WHERE publication.Book_ID = book.Book_ID AND publication.Price > 4000000 RETURN book.Writer as writer",
        "gql": "MATCH (book:Book), (publication:Publication)  WHERE publication.Book_ID = book.Book_ID AND publication.Price > 4000000 RETURN book.Writer as writer"
    },
    {
        "cypher": "MATCH (n:RefShippingAgent) RETURN n.shipping_agent_name",
        "gql": "MATCH (n:RefShippingAgent) RETURN n.shipping_agent_name"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product) WHERE r.discount = \"0\" WITH c, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5 RETURN c.customerID, c.companyName, orderCount",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`)-[r:ORDERS]->(p:`Product`) WHERE r.discount = \"0\" RETURN c, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5 NEXT RETURN c.customerID, c.companyName, orderCount"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE d.bornIn = \"France\" RETURN m.title AS MovieTitle, m.year AS ReleaseYear ORDER BY m.year LIMIT 3",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE d.bornIn = \"France\" RETURN m.title AS MovieTitle, m.`year` AS ReleaseYear ORDER BY m.`year` LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue IS NOT NULL RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.revenue IS NOT NULL RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Stadium) RETURN s.name ORDER BY s.Capacity DESC LIMIT 1",
        "gql": "MATCH (s:Stadium) RETURN s.name ORDER BY s.Capacity DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (r:Room) WHERE r.Unavailable = 0 RETURN DISTINCT r.BlockCode",
        "gql": "MATCH (r:Room) WHERE r.Unavailable = 0 RETURN DISTINCT r.BlockCode"
    },
    {
        "cypher": "MATCH (b:Business) WHERE b.city = 'San Mateo' RETURN b.name",
        "gql": "MATCH (b:Business) WHERE b.city = 'San Mateo' RETURN b.name"
    },
    {
        "cypher": "MATCH (c:Character) OPTIONAL MATCH (c)-[i1:INTERACTS1]->(other1) OPTIONAL MATCH (c)-[i2:INTERACTS2]->(other2) WITH c, sum(i1.weight) AS weight1, sum(i2.weight) AS weight2 RETURN c.name AS character, weight1 + weight2 AS totalWeight ORDER BY totalWeight DESC LIMIT 5",
        "gql": "MATCH (c:Character) MATCH (c)-[i1:INTERACTS1]->(other1) MATCH (c)-[i2:INTERACTS2]->(other2) RETURN c, sum(i1.weight) AS weight1, sum(i2.weight) AS weight2 NEXT RETURN c.name AS character, weight1 AS totalWeight ORDER BY totalWeight DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Machine)-[:RUNS]->(os:OS) WHERE os.startTime > 1605733619064 RETURN m.name ORDER BY os.startTime LIMIT 3",
        "gql": "MATCH (m:Machine)-[:RUNS]->(os:OS) WHERE os.startTime > 1605733619064 RETURN m.name ORDER BY os.startTime LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.imdbRating > 8.0 RETURN g.name AS genre, COUNT(m) AS movieCount ORDER BY movieCount DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.imdbRating > 8.0 RETURN g.name AS genre, COUNT(m) AS movieCount ORDER BY movieCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.answered = FALSE AND q.score < -1 RETURN u",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.answered = FALSE AND q.score < -1 RETURN u"
    },
    {
        "cypher": "MATCH (a:Article{title:'Summation and transformation formulas for elliptic hypergeometric series'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Summation and transformation formulas for elliptic hypergeometric series'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE m.released = 2012 RETURN p.name LIMIT 3",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE m.released = 2012 RETURN p.name LIMIT 3"
    },
    {
        "cypher": "MATCH (n:DOI) MATCH (m:DOI) RETURN n.doi_id, m.name LIMIT 8",
        "gql": "MATCH (n:DOI) MATCH (m:DOI) RETURN n.doi_id, m.name LIMIT 8"
    },
    {
        "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(rack:Rack {zone: 4})-[:HOLDS]->(machine:Machine)-[:RUNS]->(app:Application) RETURN app.name, COUNT(app) AS app_count ORDER BY app_count DESC LIMIT 3",
        "gql": "MATCH (dc:DataCenter)-[:CONTAINS]->(rack:Rack {zone: 4})-[:HOLDS]->(machine:Machine)-[:RUNS]->(app:Application) RETURN app.name, COUNT(app) AS app_count ORDER BY app_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie) WITH p, count(m) AS num_movies ORDER BY num_movies DESC LIMIT 5 RETURN p.name AS actor, num_movies",
        "gql": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie) RETURN p, count(m) AS num_movies ORDER BY num_movies DESC LIMIT 5 NEXT RETURN p.name AS actor, num_movies"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)<-[:MENTIONS]-(a:Article) WHERE a.sentiment > 0.5 RETURN o.name AS Organization, c.name AS City, a.title AS ArticleTitle, a.sentiment AS SentimentScore",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)<-[:MENTIONS]-(a:Article) WHERE a.sentiment > 0.5 RETURN o.name AS Organization, c.name AS City, a.title AS ArticleTitle, a.sentiment AS SentimentScore"
    },
    {
        "cypher": "MATCH (n:CatalogContent) RETURN count(n)",
        "gql": "MATCH (n:CatalogContent) RETURN count(n)"
    },
    {
        "cypher": "MATCH (f:Faculty) WHERE f.Rank = \"Professor\" RETURN f.Fname ORDER BY f.Fname",
        "gql": "MATCH (f:Faculty) WHERE f.Rank = \"Professor\" RETURN f.Fname ORDER BY f.Fname"
    },
    {
        "cypher": "MATCH (a:Appointment) RETURN count(a)",
        "gql": "MATCH (a:Appointment) RETURN count(a)"
    },
    {
        "cypher": "MATCH (p:Person)<-[:FOLLOWS]-(follower:Person) WITH p, COUNT(follower) AS followerCount ORDER BY followerCount DESC LIMIT 5 RETURN p.name AS personName, followerCount",
        "gql": "MATCH (p:Person)<-[:FOLLOWS]-(follower:Person) RETURN p, COUNT(follower) AS followerCount ORDER BY followerCount DESC LIMIT 5 NEXT RETURN p.name AS personName, followerCount"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Industry = \"Banking\" OR c.Industry = \"Conglomerate\" RETURN count(c)",
        "gql": "MATCH (c:Company) WHERE c.Industry = \"Banking\" OR c.Industry = \"Conglomerate\" RETURN count(c)"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.struck_off_date IS NOT NULL RETURN e LIMIT 5",
        "gql": "MATCH (e:Entity) WHERE e.struck_off_date IS NOT NULL RETURN e LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Character)-[:INTERACTS|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS45]->(theon:Character {name: 'Theon-Greyjoy'}) RETURN DISTINCT c.name AS CharacterName",
        "gql": "MATCH (c:Character)-[:INTERACTS|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS45]->(theon:Character {name: 'Theon-Greyjoy'}) RETURN DISTINCT c.name AS CharacterName"
    },
    {
        "cypher": "MATCH (f:Filing) WITH f.filer_org_name AS filer_org_name, avg(f.number) AS average_number ORDER BY average_number DESC LIMIT 3 RETURN filer_org_name, average_number",
        "gql": "MATCH (f:Filing) RETURN f.filer_org_name AS filer_org_name, avg(f.`number`) AS average_number ORDER BY average_number DESC LIMIT 3 NEXT RETURN filer_org_name, average_number"
    },
    {
        "cypher": "MATCH (v:Video)<-[:RATED]-(u:User) WITH v, count(u) AS userCount ORDER BY userCount DESC LIMIT 5 RETURN v.title, userCount",
        "gql": "MATCH (v:Video)<-[:RATED]-(u:User) RETURN v, count(u) AS userCount ORDER BY userCount DESC LIMIT 5 NEXT RETURN v.title, userCount"
    },
    {
        "cypher": "MATCH (pc:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) WITH pc, SUM(m.budget) AS total_budget ORDER BY total_budget DESC LIMIT 3 RETURN pc.name AS production_company, total_budget",
        "gql": "MATCH (pc:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) RETURN pc, SUM(m.budget) AS total_budget ORDER BY total_budget DESC LIMIT 3 NEXT RETURN pc.name AS production_company, total_budget"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.originator_bank = 'CIMB Bank Berhad' AND f.beneficiary_bank_country = 'United Kingdom' RETURN f.sar_id",
        "gql": "MATCH (f:Filing) WHERE f.originator_bank = 'CIMB Bank Berhad' AND f.beneficiary_bank_country = 'United Kingdom' RETURN f.sar_id"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) RETURN p.name AS director, m.title AS movie, m.released - p.born AS age_at_release ORDER BY age_at_release ASC LIMIT 1",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) RETURN p.name AS director, m.title AS movie, m.released - p.born AS age_at_release ORDER BY age_at_release ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WITH p, count(m) AS movies_reviewed WHERE movies_reviewed > 1 RETURN p LIMIT 3",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN p, count(m) AS movies_reviewed NEXT RETURN p LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business {name: 'Missoula Public Library'})-[:IN_CATEGORY]->(c:Category) RETURN c.name AS category",
        "gql": "MATCH (b:Business {name: 'Missoula Public Library'})-[:IN_CATEGORY]->(c:Category) RETURN c.name AS category"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = \"en\" MATCH (s)<-[:MODERATOR]-(u:User)-[:HAS_TEAM]->(:Team) MATCH (u)-[:VIP]->(otherStream:Stream)<-[:CHATTER]-(u) WITH DISTINCT s, s.total_view_count AS viewCount RETURN avg(viewCount) AS average_view_count",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = \"en\" MATCH (s)<-[:MODERATOR]-(u:User)-[:HAS_TEAM]->(:Team) MATCH (u)-[:VIP]->(otherStream:Stream)<-[:CHATTER]-(u) RETURN DISTINCT s, s.total_view_count AS viewCount NEXT RETURN avg(viewCount) AS average_view_count"
    },
    {
        "cypher": "MATCH (a:Adult)-[:PRODUCED_BY]->(pc:ProductionCompany),       (a)-[:PRODUCED_IN_COUNTRY]->(c:Country) WHERE c.name <> 'United States of America' RETURN a.title AS AdultFilmTitle, pc.name AS ProductionCompany, c.name AS Country",
        "gql": "MATCH (a:Adult)-[:PRODUCED_BY]->(pc:ProductionCompany),       (a)-[:PRODUCED_IN_COUNTRY]->(c:Country) WHERE c.name <> 'United States of America' RETURN a.title AS AdultFilmTitle, pc.name AS ProductionCompany, c.name AS Country"
    },
    {
        "cypher": "MATCH (u:User)-[:VIP]->(s:Stream) WITH u, count(DISTINCT s) AS streams_count WHERE streams_count >= 2 RETURN u.name, streams_count",
        "gql": "MATCH (u:User)-[:VIP]->(s:Stream) RETURN u, count(s) AS streams_count NEXT RETURN u.name, streams_count"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(originator:Entity)-[:COUNTRY]->(originatorCountry:Country),       (f)-[:BENEFITS]->(beneficiary:Entity)-[:COUNTRY]->(beneficiaryCountry:Country) WHERE originatorCountry.code = beneficiaryCountry.code   AND originator.location <> beneficiary.location RETURN f.sar_id",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(originator:Entity)-[:COUNTRY]->(originatorCountry:Country),       (f)-[:BENEFITS]->(beneficiary:Entity)-[:COUNTRY]->(beneficiaryCountry:Country) WHERE originatorCountry.code = beneficiaryCountry.code   AND originator.location <> beneficiary.location RETURN f.sar_id"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WITH c.categoryName AS CategoryName, AVG(p.unitPrice) AS AvgUnitPrice ORDER BY AvgUnitPrice DESC RETURN CategoryName, AvgUnitPrice LIMIT 3",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS CategoryName, AVG(p.unitPrice) AS AvgUnitPrice ORDER BY AvgUnitPrice DESC NEXT RETURN CategoryName, AvgUnitPrice LIMIT 3"
    },
    {
        "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) WHERE r.zone = 1 WITH r, count(DISTINCT t) AS typeCount WHERE typeCount > 1 RETURN r.name AS rackName",
        "gql": "MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) WHERE r.zone = 1 RETURN r, count(t) AS typeCount NEXT RETURN r.name AS rackName"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WHERE p.unitsOnOrder > 50 RETURN DISTINCT c.categoryName",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.unitsOnOrder > 50 RETURN DISTINCT c.categoryName"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.nbrEmployees > 500 RETURN DISTINCT c.name",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.nbrEmployees > 500 RETURN DISTINCT c.name"
    },
    {
        "cypher": "MATCH (c:Category {categoryName: 'Seafood'})<-[:PART_OF]-(p:Product) RETURN MIN(p.reorderLevel) AS minReorderLevel",
        "gql": "MATCH (c:Category{categoryName:'Seafood'})<-[:PART_OF]-(p:`Product`) RETURN MIN(p.reorderLevel) AS minReorderLevel"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Tom Hanks\"})-[:CAST_FOR]->(m:Movie) RETURN m",
        "gql": "MATCH (p:Person {name: \"Tom Hanks\"})-[:CAST_FOR]->(m:Movie) RETURN m"
    },
    {
        "cypher": "MATCH (o:Order)-[r:ORDERS]->(p:Product) RETURN o.orderID AS orderID, SUM(r.quantity) AS totalUnitsOrdered ORDER BY totalUnitsOrdered DESC LIMIT 5",
        "gql": "MATCH (o:`Order`)-[r:ORDERS]->(p:`Product`) RETURN o.orderID AS orderID, SUM(r.quantity) AS totalUnitsOrdered ORDER BY totalUnitsOrdered DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:DOI) WHERE n.name = '10.1142/S0219061301000077' RETURN n",
        "gql": "MATCH (n:DOI) WHERE n.name = '10.1142/S0219061301000077' RETURN n"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue > m.budget RETURN m.title, m.revenue, m.budget ORDER BY m.released LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.revenue > m.budget RETURN m.title, m.revenue, m.budget ORDER BY m.released LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Keyword) WHERE n.key_id = '468e440686a5984c9dbaefb5ac25d127' OR n.name IS NOT NULL RETURN DISTINCT n.name AS name",
        "gql": "MATCH (n:Keyword) WHERE n.key_id = '468e440686a5984c9dbaefb5ac25d127' OR n.name IS NOT NULL RETURN DISTINCT n.name AS name"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Breweries'}) WHERE b.city = 'Missoula' MATCH (r:Review)-[:REVIEWS]->(b) RETURN b.name AS BusinessName, r.text AS ReviewText",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Breweries'}) WHERE b.city = 'Missoula' MATCH (r:Review)-[:REVIEWS]->(b) RETURN b.name AS BusinessName, r.text AS ReviewText"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.revenue > 1.0E9 RETURN o.name, o.revenue",
        "gql": "MATCH (o:Organization) WHERE o.revenue > 1.0E9 RETURN o.name, o.revenue"
    },
    {
        "cypher": "MATCH (o:Officer) WHERE o.note <> \"\" MATCH (e:Entity) WHERE e.struck_off_date IS NOT NULL MATCH (o)-[:officer_of]->(e) RETURN o.name",
        "gql": "MATCH (o:Officer) WHERE o.note <> \"\" MATCH (e:Entity) WHERE e.struck_off_date IS NOT NULL MATCH (o)-[:officer_of]->(e) RETURN o.name"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN count(*)",
        "gql": "MATCH (singer:singer) RETURN count(*)"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Industry = \"Banking\" OR c.Industry = \"Retailing\" RETURN c.Name",
        "gql": "MATCH (c:Company) WHERE c.Industry = \"Banking\" OR c.Industry = \"Retailing\" RETURN c.Name"
    },
    {
        "cypher": "MATCH (a:Adult)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WITH l.name AS language, COUNT(a) AS film_count ORDER BY film_count DESC LIMIT 3 RETURN language, film_count",
        "gql": "MATCH (a:Adult)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN l.name AS language, COUNT(a) AS film_count ORDER BY film_count DESC LIMIT 3 NEXT RETURN language, film_count"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN s.name, s.total_view_count ORDER BY s.total_view_count DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN s.name, s.total_view_count ORDER BY s.total_view_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (o:Order) RETURN o ORDER BY o.freight DESC LIMIT 3",
        "gql": "MATCH (o:`Order`) RETURN o ORDER BY o.freight DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.abstract='  We consider a finite sequence of random points in a finite domain of a finite-dimensional Euclidean space. The points are sequentially allocated in the domain according to a model of cooperative sequential adsorption. The main peculiarity of the model is that the probability distribution of a point depends on previously allocated points. We assume that the dependence vanishes as the concentration of points tends to infinity. Under this assumption the law of large numbers, the central limit theorem and Poisson approximation are proved for the generated sequence of random point measures. ' RETURN m.name",
        "gql": "MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.`abstract` = '  We consider a finite sequence of random points in a finite domain of a finite-dimensional Euclidean space. The points are sequentially allocated in the domain according to a model of cooperative sequential adsorption. The main peculiarity of the model is that the probability distribution of a point depends on previously allocated points. We assume that the dependence vanishes as the concentration of points tends to infinity. Under this assumption the law of large numbers, the central limit theorem and Poisson approximation are proved for the generated sequence of random point measures. ' RETURN m.name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.imdbRating > 6.0 AND m.runtime IS NOT NULL RETURN m ORDER BY m.runtime ASC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.imdbRating > 6.0 AND m.runtime IS NOT NULL RETURN m ORDER BY m.runtime ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Journal), (:Categories {category_id: '978aee6db23fc939cec71ac05eb15b7a'}) WHERE NOT (n) --> (:Categories) RETURN n.journal_id",
        "gql": "MATCH (n:Journal), (:Categories {category_id: '978aee6db23fc939cec71ac05eb15b7a'}) WHERE NOT (n) --> (:Categories) RETURN n.journal_id"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.score < -3 RETURN q.title, q.text, q.link, q.createdAt ORDER BY q.createdAt DESC LIMIT 5",
        "gql": "MATCH (q:Question) WHERE q.score < -3 RETURN q.title, q.text, q.link, q.createdAt ORDER BY q.createdAt DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) MATCH (m)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN l.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) MATCH (m)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN l.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(:User {name: 'Neo4j'}) RETURN u.name AS user, count(t) AS mentions ORDER BY mentions DESC LIMIT 10",
        "gql": "MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(:User {name: 'Neo4j'}) RETURN u.name AS user, count(t) AS mentions ORDER BY mentions DESC LIMIT 10"
    },
    {
        "cypher": "MATCH (r:Restaurant {ResName:\"Subway\"}) RETURN r.Rating",
        "gql": "MATCH (r:Restaurant {ResName:\"Subway\"}) RETURN r.Rating"
    },
    {
        "cypher": "MATCH (n:Network {ip: '10.2'})-[:ROUTES]->(i:Interface) RETURN count(i)",
        "gql": "MATCH (n:Network {ip: '10.2'})-[:ROUTES]->(i:Interface) RETURN count(i)"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 4 OR n.cluster < 5 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 4 OR n.cluster < 5 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN singer.Song_Name,singer.Song_release_year ORDER BY singer.Age LIMIT 1",
        "gql": "MATCH (singer:singer) RETURN singer.Song_Name,singer.Song_release_year ORDER BY singer.Age LIMIT 1"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review) WITH u, AVG(r.stars) AS avg_stars ORDER BY avg_stars ASC LIMIT 3 RETURN u.name AS user, avg_stars",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review) RETURN u, AVG(r.stars) AS avg_stars ORDER BY avg_stars ASC LIMIT 3 NEXT RETURN u.name AS user, avg_stars"
    },
    {
        "cypher": "MATCH (catelyn:Character {name: \"Catelyn-Stark\"})-[:INTERACTS]->(catelyn_interaction) WITH catelyn, count(DISTINCT catelyn_interaction) AS catelyn_interactions MATCH (cersei:Character {name: \"Cersei-Lannister\"})-[:INTERACTS]->(cersei_interaction) WITH catelyn, cersei,  catelyn_interactions, count(DISTINCT cersei_interaction) AS cersei_interactions MATCH (catelyn)-[:INTERACTS]->(common_interaction)<-[:INTERACTS]-(cersei) RETURN DISTINCT common_interaction.name",
        "gql": "MATCH (catelyn:Character{name:\"Catelyn-Stark\"})-[:INTERACTS]->(catelyn_interaction) MATCH (cersei:Character{name:\"Cersei-Lannister\"})-[:INTERACTS]->(cersei_interaction) RETURN catelyn, count(catelyn_interaction) AS catelyn_interactions NEXT MATCH (catelyn)-[:INTERACTS]->(common_interaction)<-[:INTERACTS]-(cersei) RETURN DISTINCT common_interaction.name"
    },
    {
        "cypher": "MATCH (t:Tag {name: 'neo4j'})<-[:TAGGED]-(q:Question)<-[:ASKED]-(u:User) RETURN DISTINCT u.display_name",
        "gql": "MATCH (t:Tag {name: 'neo4j'})<-[:TAGGED]-(q:Question)<-[:ASKED]-(u:User) RETURN DISTINCT u.display_name"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount > 1000000 WITH e, count(f) AS filingCount RETURN e.name AS entityName, filingCount ORDER BY filingCount DESC LIMIT 3",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount > 1000000 RETURN e, count(f) AS filingCount NEXT RETURN e.name AS entityName, filingCount ORDER BY filingCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category {description: 'Desserts, candies, and sweet breads'}) WHERE p.reorderLevel > 15 RETURN p",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category{description:'Desserts, candies, and sweet breads'}) WHERE p.reorderLevel > 15 RETURN p"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) RETURN c1.name AS Character, r.weight AS Weight ORDER BY r.weight DESC LIMIT 3",
        "gql": "MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) RETURN c1.name AS Character, r.weight AS Weight ORDER BY r.weight DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.city = 'Burlingame' RETURN u.name",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.city = 'Burlingame' RETURN u.name"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing {originator_bank_country: 'Singapore'}) RETURN DISTINCT e.name AS EntityName",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing {originator_bank_country: 'Singapore'}) RETURN DISTINCT e.name AS EntityName"
    },
    {
        "cypher": "MATCH (ceo:Person {name: \"Julie Spellman Sweet\"})<-[:HAS_CEO]-(org:Organization)<-[:MENTIONS]-(article:Article) WHERE article.sentiment < 0.5 RETURN article.title, article.date, article.sentiment ORDER BY article.date DESC LIMIT 3",
        "gql": "MATCH (ceo:Person{name:\"Julie Spellman Sweet\"})<-[:HAS_CEO]-(org:Organization)<-[:MENTIONS]-(article:Article) WHERE article.sentiment < 0.5 RETURN article.title, article.`date`, article.sentiment ORDER BY article.`date` DESC LIMIT 3"
    },
    {
        "cypher": "MATCH p=(a:Article{comments:'20 pages'})-[*]->(d:DOI{doi_id:'673313cb2dcde5d215a7e7ec2788f676'}) RETURN count(p)",
        "gql": "MATCH (a:Article{comments:'20 pages'})-[]->{1,}(d:DOI{doi_id:'673313cb2dcde5d215a7e7ec2788f676'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) RETURN p.name, COUNT(m) AS movies_count ORDER BY movies_count DESC LIMIT 10",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) RETURN p.name, COUNT(m) AS movies_count ORDER BY movies_count DESC LIMIT 10"
    },
    {
        "cypher": "MATCH (n:Employee) RETURN count(*)",
        "gql": "MATCH (n:Employee) RETURN count(*)"
    },
    {
        "cypher": "MATCH (c:Company) RETURN DISTINCT c.Main_Industry",
        "gql": "MATCH (c:Company) RETURN DISTINCT c.Main_Industry"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) WHERE m.runtime > 150 WITH pc, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 5 RETURN pc.name, movies_count",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) WHERE m.runtime > 150 RETURN pc, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 5 NEXT RETURN pc.name, movies_count"
    },
    {
        "cypher": "MATCH (m:Movie {released: 2003})<-[r:REVIEWED]-() WITH avg(r.rating) AS averageRating RETURN averageRating",
        "gql": "MATCH (m:Movie{released:2003})<-[r:REVIEWED]-() RETURN avg(r.rating) AS averageRating NEXT RETURN averageRating"
    },
    {
        "cypher": "MATCH (role:Role {Role_Code:\"MG\"}) RETURN role.Role_Name, role.Role_Description",
        "gql": "MATCH (role:Role {Role_Code:\"MG\"}) RETURN role.Role_Name, role.Role_Description"
    },
    {
        "cypher": "MATCH (f:Faculty) WHERE f.Sex = \"M\" AND f.Building = \"NEB\" RETURN f.Fname, f.Lname",
        "gql": "MATCH (f:Faculty) WHERE f.Sex = \"M\" AND f.Building = \"NEB\" RETURN f.Fname, f.Lname"
    },
    {
        "cypher": "MATCH (d:Document) WHERE d.document_id = 2 RETURN d.document_type_code",
        "gql": "MATCH (d:Document) WHERE d.document_id = 2 RETURN d.document_type_code"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_COMPETITOR]->(c:Organization {name: 'Apple'}) RETURN o.name AS organization ORDER BY o.name LIMIT 3",
        "gql": "MATCH (o:Organization)-[:HAS_COMPETITOR]->(c:Organization {name: 'Apple'}) RETURN o.name AS organization ORDER BY o.name LIMIT 3"
    },
    {
        "cypher": "MATCH p=(a:Keyword{name:'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-'})-[*]->(d:Categories{specifications:'cs.NI'}) RETURN count(p)",
        "gql": "MATCH (a:Keyword{name:'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-'})-[]->{1,}(d:Categories{specifications:'cs.NI'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (c:Character) RETURN min(c.book1BetweennessCentrality) AS min_centrality",
        "gql": "MATCH (c:Character) RETURN min(c.book1BetweennessCentrality) AS min_centrality"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.Title, m.Year, m.Director ORDER BY m.Budget_million",
        "gql": "MATCH (m:Movie) RETURN m.Title, m.`Year`, m.Director ORDER BY m.Budget_million"
    },
    {
        "cypher": "MATCH (q:Question) WITH sum(q.upVotes) AS totalUpvotes RETURN totalUpvotes",
        "gql": "MATCH (q:Question) RETURN sum(q.upVotes) AS totalUpvotes NEXT RETURN totalUpvotes"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q ORDER BY q.downVotes DESC LIMIT 3",
        "gql": "MATCH (q:Question) RETURN q ORDER BY q.downVotes DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answer_count = 0 RETURN q ORDER BY q.view_count DESC LIMIT 3",
        "gql": "MATCH (q:Question) WHERE q.answer_count = 0 RETURN q ORDER BY q.view_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character)-[:INTERACTS2]->(c2:Character) WHERE c.louvain > 3 RETURN DISTINCT c.name",
        "gql": "MATCH (c:Character)-[:INTERACTS2]->(c2:Character) WHERE c.louvain > 3 RETURN DISTINCT c.name"
    },
    {
        "cypher": "MATCH (t:Technician) RETURN t.Team, COUNT(*)",
        "gql": "MATCH (t:Technician) RETURN t.Team, COUNT(*)"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.release_date.year % 4 = 0 RETURN m.title",
        "gql": "MATCH (m:Movie) WHERE m.release_date = 0 RETURN m.title"
    },
    {
        "cypher": "MATCH (u:User)-[:PROVIDED]->(a:Answer) WITH u, count(a) AS provided_answer_count ORDER BY provided_answer_count DESC LIMIT 1 MATCH (u)-[:PROVIDED]->(answer:Answer)-[:ANSWERED]->(q:Question) MATCH (q)<-[:COMMENTED_ON]-(c:Comment)<-[:COMMENTED]-(commenter:User) MATCH (commenter)-[:COMMENTED]->(comment:Comment)-[:COMMENTED_ON]->(target_question:Question) WHERE target_question.view_count > 50 MATCH (target_question)<-[:ANSWERED]-(final_answer:Answer) RETURN final_answer.body_markdown",
        "gql": "MATCH (u:User)-[:PROVIDED]->(a:Answer) RETURN u, count(a) AS provided_answer_count ORDER BY provided_answer_count DESC LIMIT 1 NEXT MATCH (u)-[:PROVIDED]->(answer:Answer)-[:ANSWERED]->(q:Question) MATCH (q)<-[:COMMENTED_ON]-(c:Comment)<-[:COMMENTED]-(commenter:User) MATCH (commenter)-[:COMMENTED]->(comment:Comment)-[:COMMENTED_ON]->(target_question:Question) WHERE target_question.view_count > 50 MATCH (target_question)<-[:ANSWERED]-(final_answer:Answer) RETURN final_answer.body_markdown"
    },
    {
        "cypher": "MATCH (b:Building) WHERE b.Status = \"on-hold\" RETURN b.name ORDER BY b.Stories ASC",
        "gql": "MATCH (b:Building) WHERE b.Status = \"on-hold\" RETURN b.name ORDER BY b.Stories ASC"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q.title, q.createdAt ORDER BY q.createdAt DESC LIMIT 3",
        "gql": "MATCH (q:Question) RETURN q.title, q.createdAt ORDER BY q.createdAt DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s1:Software)-[:DEPENDS_ON]->(s2:Software)-[:VERSION]->(v:Version) WITH s2, size(collect(DISTINCT v)) AS versionCount ORDER BY versionCount DESC LIMIT 1 RETURN s2.name, versionCount",
        "gql": "MATCH (s1:Software)-[:DEPENDS_ON]->(s2:Software)-[:VERSION]->(v:Version) RETURN s2, size(v) AS versionCount ORDER BY versionCount DESC LIMIT 1 NEXT RETURN s2.name, versionCount"
    },
    {
        "cypher": "MATCH (n:Author {first_name:'Alexander'}) RETURN n",
        "gql": "MATCH (n:Author {first_name:'Alexander'}) RETURN n"
    },
    {
        "cypher": "MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(p:Process) RETURN p.name, p.startTime, p.pid ORDER BY p.startTime DESC LIMIT 5",
        "gql": "MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(p:Process) RETURN p.name, p.startTime, p.pid ORDER BY p.startTime DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Character)-[r:INTERACTS]->(:Character) RETURN c.name, SUM(r.weight) as totalInteractions ORDER BY totalInteractions DESC LIMIT 1",
        "gql": "MATCH (c:Character)-[r:INTERACTS]->(:Character) RETURN c.name, SUM(r.weight) as totalInteractions ORDER BY totalInteractions DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (p:Product) WHERE p.reorderLevel > 20 RETURN p.productName, p.reorderLevel ORDER BY p.reorderLevel DESC LIMIT 5",
        "gql": "MATCH (p:`Product`) WHERE p.reorderLevel > 20 RETURN p.productName, p.reorderLevel ORDER BY p.reorderLevel DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(:Genre {name: 'Comedy'}) WITH m MATCH (a:Actor)-[:ACTED_IN]->(m)<-[r:RATED]-(:User) WITH a, avg(r.rating) AS average_rating ORDER BY average_rating DESC RETURN a.name AS actor_name, average_rating LIMIT 1",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(:Genre{name:'Comedy'}) MATCH (a:Actor)-[:ACTED_IN]->(m)<-[r:RATED]-(:User) RETURN m NEXT RETURN a.name AS actor_name, average_rating LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.followers > 10000 RETURN l.name AS language, COUNT(s) AS stream_count ORDER BY stream_count DESC LIMIT 3",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.followers > 10000 RETURN l.name AS language, COUNT(s) AS stream_count ORDER BY stream_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.name AS Country, sum(f.amount) AS TotalAmountTransferred ORDER BY TotalAmountTransferred DESC LIMIT 3",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.name AS Country, sum(f.amount) AS TotalAmountTransferred ORDER BY TotalAmountTransferred DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WITH g, count(m) AS movieCount ORDER BY movieCount DESC RETURN g.name AS genre, movieCount",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN g.name AS genre, movieCount"
    },
    {
        "cypher": "MATCH (n:Topic) MATCH (m:Categories) RETURN n.cluster, m.specifications LIMIT 8",
        "gql": "MATCH (n:Topic) MATCH (m:Categories) RETURN n.cluster, m.specifications LIMIT 8"
    },
    {
        "cypher": "MATCH (n:Report), (:Author {last_name: 'Chakrabarti'}) WHERE NOT (n) --> (:Author) RETURN n.report_no",
        "gql": "MATCH (n:Report), (:Author {last_name: 'Chakrabarti'}) WHERE NOT (n) --> (:Author) RETURN n.report_no"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {title: \"GoldenEye\"}) RETURN a.name",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {title: \"GoldenEye\"}) RETURN a.name"
    },
    {
        "cypher": "MATCH (p:Port {port: 80})<-[:LISTENS]-(s:Service) RETURN s.name",
        "gql": "MATCH (p:Port {port: 80})<-[:LISTENS]-(s:Service) RETURN s.name"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_DOI]->(m) WHERE n.title='Solutions to congruences using sets with the property of Baire' RETURN m.doi_id",
        "gql": "MATCH (n:Article) -[ha:HAS_DOI]->(m) WHERE n.title='Solutions to congruences using sets with the property of Baire' RETURN m.doi_id"
    },
    {
        "cypher": "MATCH (c1:Character)-[:INTERACTS]-(c2:Character) WHERE c1.community = c2.community RETURN c1.name AS character1, c2.name AS character2",
        "gql": "MATCH (c1:Character)-[:INTERACTS]-(c2:Character) WHERE c1.community = c2.community RETURN c1.name AS character1, c2.name AS character2"
    },
    {
        "cypher": "MATCH (r:RestaurantType) RETURN r.ResTypeName",
        "gql": "MATCH (r:RestaurantType) RETURN r.ResTypeName"
    },
    {
        "cypher": "MATCH (n:Journal) WHERE n.name <> 'Commun.Math.Phys' RETURN DISTINCT n.name AS name",
        "gql": "MATCH (n:Journal) WHERE n.name <> 'Commun.Math.Phys' RETURN DISTINCT n.name AS name"
    },
    {
        "cypher": "MATCH (me:Me {name: 'Neo4j'})<-[s:SIMILAR_TO]-(u:User) RETURN u.screen_name AS user, s.score AS similarity ORDER BY similarity DESC LIMIT 5",
        "gql": "MATCH (me:Me {name: 'Neo4j'})<-[s:SIMILAR_TO]-(u:User) RETURN u.screen_name AS user, s.score AS similarity ORDER BY similarity DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 8 OR n.cluster < 7 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 8 OR n.cluster < 7 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (u:User)-[:FOLLOWS]->(me:Me {screen_name: 'neo4j'}) RETURN u.screen_name, u.name ORDER BY u.following DESC LIMIT 5",
        "gql": "MATCH (u:User)-[:FOLLOWS]->(me:Me {screen_name: 'neo4j'}) RETURN u.screen_name, u.name ORDER BY u.following DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.originator_bank_country IS NOT NULL RETURN f.originator_bank_country AS Country, count(f) AS FilingsCount ORDER BY FilingsCount DESC LIMIT 3",
        "gql": "MATCH (f:Filing) WHERE f.originator_bank_country IS NOT NULL RETURN f.originator_bank_country AS Country, count(f) AS FilingsCount ORDER BY FilingsCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.vote_count ORDER BY m.vote_count DESC LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.vote_count ORDER BY m.vote_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.imdbRating IS NOT NULL RETURN m ORDER BY m.imdbRating DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.imdbRating IS NOT NULL RETURN m ORDER BY m.imdbRating DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet) RETURN t.text AS TweetText, t.favorites AS Favorites ORDER BY t.favorites DESC LIMIT 1",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet) RETURN t.text AS TweetText, t.favorites AS Favorites ORDER BY t.favorites DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: 'Seafood'}) WITH c, SUM(o.quantity) AS totalProducts ORDER BY totalProducts DESC LIMIT 3 RETURN c.companyName AS customerName, totalProducts",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`)-[:ORDERS]->(p:`Product`)-[:PART_OF]->(cat:Category{categoryName:'Seafood'}) RETURN c, SUM(o.quantity) AS totalProducts ORDER BY totalProducts DESC LIMIT 3 NEXT RETURN c.companyName AS customerName, totalProducts"
    },
    {
        "cypher": "MATCH (c:Category) WHERE c.categoryName = \"Dairy Products\" MATCH (c)<-[:PART_OF]-(p:Product) WITH p LIMIT 3 RETURN p.productName, p.unitsInStock",
        "gql": "MATCH (c:Category) WHERE c.categoryName = \"Dairy Products\" MATCH (c)<-[:PART_OF]-(p:`Product`) RETURN p LIMIT 3 NEXT RETURN p.productName, p.unitsInStock"
    },
    {
        "cypher": "MATCH (a:Categories{category_id:'994d468c3f0dd780baf58c6d7f205afd'})-[*]->(d:Author{affiliation:'Ohio State University'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Categories{category_id:'994d468c3f0dd780baf58c6d7f205afd'})-[]->{1,}(d:Author{affiliation:'Ohio State University'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (a:AttributeDefinition {attribute_name:\"Green\"}) RETURN a.attribute_data_type",
        "gql": "MATCH (a:AttributeDefinition {attribute_name:\"Green\"}) RETURN a.attribute_data_type"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.Year <= 2000 RETURN m.Title, m.Director ORDER BY m.Gross_worldwide DESC LIMIT 1",
        "gql": "MATCH (m:Movie) WHERE m.`Year` <= 2000 RETURN m.Title, m.Director ORDER BY m.Gross_worldwide DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '263-281'}]->(m) WHERE n.article_id='1139' RETURN m.name",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '263-281'}]->(m) WHERE n.article_id='1139' RETURN m.name"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR|:BENEFITS]->(e:Entity) WITH f, COUNT(DISTINCT e) AS entityCount ORDER BY entityCount DESC LIMIT 3 RETURN f.sar_id AS filing_id, entityCount",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) RETURN f, COUNT(e) AS entityCount ORDER BY entityCount DESC LIMIT 3 NEXT RETURN f.sar_id AS filing_id, entityCount"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.degree > 100 RETURN c",
        "gql": "MATCH (c:Character) WHERE c.degree > 100 RETURN c"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN r.date AS reviewDate, r.text AS reviewText, r.stars AS reviewStars, u.name AS userName, b.name AS businessName ORDER BY r.date DESC LIMIT 5",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN r.`date` AS reviewDate, r.text AS reviewText, r.stars AS reviewStars, u.name AS userName, b.name AS businessName ORDER BY r.`date` DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 6 OR n.cluster < 11 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 6 OR n.cluster < 11 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'}) WITH avg(t.favorites) AS average_favorites RETURN average_favorites",
        "gql": "MATCH (t:Tweet)-[:TAGS]->(h:Hashtag{name:'education'}) RETURN avg(t.favorites) AS average_favorites NEXT RETURN average_favorites"
    },
    {
        "cypher": "MATCH (s:Supplier) WHERE s.country = 'UK' RETURN s.companyName, s.contactName, s.contactTitle, s.phone, s.fax, s.address, s.city, s.postalCode, s.region, s.homePage",
        "gql": "MATCH (s:Supplier) WHERE s.country = 'UK' RETURN s.companyName, s.contactName, s.contactTitle, s.phone, s.fax, s.address, s.city, s.postalCode, s.region, s.homePage"
    },
    {
        "cypher": "MATCH (n:Topic), (:Categories {specifications: 'math.GT'}) WHERE NOT (n) --> (:Categories) RETURN n.label",
        "gql": "MATCH (n:Topic), (:Categories {specifications: 'math.GT'}) WHERE NOT (n) --> (:Categories) RETURN n.label"
    },
    {
        "cypher": "MATCH (a:author {name: 'Daphne Koller'})-[:author_write_paper]->(p:paper)-[:paper_in_venue]->(c:conference {name: 'ICML'}) MATCH (p)<-[:author_write_paper]-(coa:author) WHERE coa.name <> a.name RETURN coa.name, COUNT(p) AS countCollaborations ORDER BY countCollaborations DESC",
        "gql": "MATCH (a:author {name: 'Daphne Koller'})-[:author_write_paper]->(p:paper)-[:paper_in_venue]->(c:conference {name: 'ICML'}) MATCH (p)<-[:author_write_paper]-(coa:author) WHERE coa.name <> a.name RETURN coa.name, COUNT(p) AS countCollaborations ORDER BY countCollaborations DESC"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title = 'The Gervais-Neveu-Felder equation for the Jordanian quasi-Hopf   U_{h;y}(sl(2)) algebra' OR n.title IS NOT NULL RETURN DISTINCT n.title AS title",
        "gql": "MATCH (n:Article) WHERE n.title = 'The Gervais-Neveu-Felder equation for the Jordanian quasi-Hopf   U_{h;y}(sl(2)) algebra' OR n.title IS NOT NULL RETURN DISTINCT n.title AS title"
    },
    {
        "cypher": "MATCH (u:User)-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link) WHERE u.followers > 10000 RETURN DISTINCT u.screen_name",
        "gql": "MATCH (u:User)-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link) WHERE u.followers > 10000 RETURN DISTINCT u.screen_name"
    },
    {
        "cypher": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WHERE m.status = 'In Production' RETURN l.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WHERE m.status = 'In Production' RETURN l.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.creation_date >= 1609459200 AND q.creation_date < 1640995200 RETURN q ORDER BY q.creation_date ASC LIMIT 5",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.creation_date >= 1609459200 AND q.creation_date < 1640995200 RETURN q ORDER BY q.creation_date ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (visitor:visitor) WHERE visitor.Level_of_membership <= 4 RETURN avg(visitor.Age)",
        "gql": "MATCH (visitor:visitor) WHERE visitor.Level_of_membership <= 4 RETURN avg(visitor.Age)"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN m.title AS movie, p.name AS person",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN m.title AS movie, p.name AS person"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.article_id='603382' RETURN m.key_id",
        "gql": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.article_id='603382' RETURN m.key_id"
    },
    {
        "cypher": "MATCH (n:Categories) MATCH (m:Author) RETURN n.specifications, m.author_id LIMIT 8",
        "gql": "MATCH (n:Categories) MATCH (m:Author) RETURN n.specifications, m.author_id LIMIT 8"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.isDissolved = true AND o.revenue IS NOT NULL RETURN o.name AS organization, o.revenue AS revenue ORDER BY o.revenue DESC LIMIT 3",
        "gql": "MATCH (o:Organization) WHERE o.isDissolved = true AND o.revenue IS NOT NULL RETURN o.name AS organization, o.revenue AS revenue ORDER BY o.revenue DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:Undergo) RETURN u.Patient ORDER BY u.DateUndergo LIMIT 1",
        "gql": "MATCH (u:Undergo) RETURN u.Patient ORDER BY u.DateUndergo LIMIT 1"
    },
    {
        "cypher": "MATCH (u:User {display_name: 'Christopher'})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) WITH q, t ORDER BY q.createdAt LIMIT 3 RETURN t.name AS tag",
        "gql": "MATCH (u:User{display_name:'Christopher'})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) RETURN q, t ORDER BY q.createdAt LIMIT 3 NEXT RETURN t.name AS tag"
    },
    {
        "cypher": "MATCH (p:Person) RETURN p.name, p.born ORDER BY p.born ASC LIMIT 3",
        "gql": "MATCH (p:Person) RETURN p.name, p.born ORDER BY p.born ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(s:Switch) RETURN COUNT(DISTINCT s.ip) AS distinctSwitchTypes",
        "gql": "MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(s:Switch) RETURN COUNT(DISTINCT s.ip) AS distinctSwitchTypes"
    },
    {
        "cypher": "MATCH (u:User)-[:RATED]->(m:Movie)<-[:ACTED_IN]-(a:Actor) WITH u, count(distinct a) AS numActors ORDER BY numActors DESC LIMIT 3 RETURN u.name AS user, numActors",
        "gql": "MATCH (u:User)-[:RATED]->(m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN u, count(a) AS numActors ORDER BY numActors DESC LIMIT 3 NEXT RETURN u.name AS user, numActors"
    },
    {
        "cypher": "MATCH (b1:Business {name: 'Imagine Nation Brewing'})-[:IN_CATEGORY]->(c:Category) MATCH (b2:Business)-[:IN_CATEGORY]->(c) WHERE b1 <> b2 RETURN DISTINCT b2.name",
        "gql": "MATCH (b1:Business {name: 'Imagine Nation Brewing'})-[:IN_CATEGORY]->(c:Category) MATCH (b2:Business)-[:IN_CATEGORY]->(c) WHERE b1 <> b2 RETURN DISTINCT b2.name"
    },
    {
        "cypher": "MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version) RETURN v.name AS Version",
        "gql": "MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version) RETURN v.name AS Version"
    },
    {
        "cypher": "MATCH (u:User)-[:FOLLOWS]->(neo:User {screen_name: 'neo4j'}),       (u)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(neo) RETURN u LIMIT 3",
        "gql": "MATCH (u:User)-[:FOLLOWS]->(neo:User {screen_name: 'neo4j'}),       (u)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(neo) RETURN u LIMIT 3"
    },
    {
        "cypher": "MATCH (u1:User)-[r:INTERACTED]->(u2:User) WHERE u1.color = \"#1E90FF\" RETURN u2.label AS user, COUNT(r) AS interactions ORDER BY interactions DESC LIMIT 5",
        "gql": "MATCH (u1:User)-[r:INTERACTED]->(u2:User) WHERE u1.color = \"#1E90FF\" RETURN u2.label AS user, COUNT(r) AS interactions ORDER BY interactions DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person) RETURN avg(p.Weight), min(p.Weight), p.Sex",
        "gql": "MATCH (p:Person) RETURN avg(p.Weight), min(p.Weight), p.Sex"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) WITH ic, count(o) AS orgCount ORDER BY orgCount ASC LIMIT 1 RETURN ic.name AS industryName",
        "gql": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) RETURN ic, count(o) AS orgCount ORDER BY orgCount ASC LIMIT 1 NEXT RETURN ic.name AS industryName"
    },
    {
        "cypher": "MATCH (app:Application {name: 'webapp'})-[:LISTENS]->(port:Port) RETURN port.port",
        "gql": "MATCH (app:Application {name: 'webapp'})-[:LISTENS]->(port:Port) RETURN port.port"
    },
    {
        "cypher": "MATCH (n:List) RETURN DISTINCT n.FirstName AS firstname, n.LastName AS lastname",
        "gql": "MATCH (n:`List`) RETURN DISTINCT n.FirstName AS firstname, n.LastName AS lastname"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN p.name, m.title",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN p.name, m.title"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(:Genre {name: 'Drama'}) WHERE m.budget < 10000000 RETURN m.title LIMIT 3",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(:Genre {name: 'Drama'}) WHERE m.budget < 10000000 RETURN m.title LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages='45-96' WITH DISTINCT n, m RETURN n.comments AS comments, count(m) AS count LIMIT 20",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '45-96' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` LIMIT 20"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released ASC LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Actor) RETURN a.Name ORDER BY a.Name ASC",
        "gql": "MATCH (a:Actor) RETURN a.Name ORDER BY a.Name ASC"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity) WITH o.name AS originator_bank, sum(f.amount) AS total_amount ORDER BY total_amount DESC LIMIT 10 RETURN originator_bank, total_amount",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity) RETURN o.name AS originator_bank, sum(f.amount) AS total_amount ORDER BY total_amount DESC LIMIT 10 NEXT RETURN originator_bank, total_amount"
    },
    {
        "cypher": "MATCH (c:Category)<-[:PART_OF]-(p:Product) WHERE p.unitsOnOrder > 0 RETURN c.categoryName, COUNT(p) AS productCount ORDER BY productCount ASC LIMIT 1",
        "gql": "MATCH (c:Category)<-[:PART_OF]-(p:`Product`) WHERE p.unitsOnOrder > 0 RETURN c.categoryName, COUNT(p) AS productCount ORDER BY productCount ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.vote_count > 1000 RETURN m.title, m.vote_count ORDER BY m.vote_count DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.vote_count > 1000 RETURN m.title, m.vote_count ORDER BY m.vote_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Horror' RETURN avg(m.runtime) AS average_runtime",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Horror' RETURN avg(m.runtime) AS average_runtime"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.nbrEmployees > 1000 AND o.isPublic = false RETURN o.name, o.nbrEmployees",
        "gql": "MATCH (o:Organization) WHERE o.nbrEmployees > 1000 AND o.isPublic = false RETURN o.name, o.nbrEmployees"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:FOLLOWS]->(u:User) WHERE u.followers > 1000 RETURN u.screen_name, u.followers",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:FOLLOWS]->(u:User) WHERE u.followers > 1000 RETURN u.screen_name, u.followers"
    },
    {
        "cypher": "MATCH (n:Categories), (:Keyword {key_id: 'a87e17d3c9befeb236f46bf77da29d6d'}) WHERE NOT (n) --> (:Keyword) RETURN n.category_id",
        "gql": "MATCH (n:Categories), (:Keyword {key_id: 'a87e17d3c9befeb236f46bf77da29d6d'}) WHERE NOT (n) --> (:Keyword) RETURN n.category_id"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.year = 1995 RETURN m.title",
        "gql": "MATCH (m:Movie) WHERE m.`year` = 1995 RETURN m.title"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.community = 579 MATCH (c)-[r:INTERACTS]->() WITH avg(r.weight) AS average_weight RETURN average_weight",
        "gql": "MATCH (c:Character) WHERE c.community = 579 MATCH (c)-[r:INTERACTS]->() RETURN avg(r.weight) AS average_weight NEXT RETURN average_weight"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.amount = 1000000 RETURN f ORDER BY f.amount DESC LIMIT 3",
        "gql": "MATCH (f:Filing) WHERE f.amount = 1000000 RETURN f ORDER BY f.amount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars >= 4.0 RETURN DISTINCT b.name AS businessName",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars >= 4.0 RETURN DISTINCT b.name AS businessName"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes DESC LIMIT 5",
        "gql": "MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (q:Question)<-[:ANSWERED]-(a:Answer) WITH q, SUM(a.score) AS totalAnswerScore ORDER BY totalAnswerScore DESC LIMIT 3 RETURN q.title AS questionTitle, totalAnswerScore",
        "gql": "MATCH (q:Question)<-[:ANSWERED]-(a:Answer) RETURN q, SUM(a.score) AS totalAnswerScore ORDER BY totalAnswerScore DESC LIMIT 3 NEXT RETURN q.title AS questionTitle, totalAnswerScore"
    },
    {
        "cypher": "MATCH (c:Company)-[sc:OWNS]->(gs:GasStation) WHERE c.Company = 'ExxonMobil' RETURN gs.Manager_Name",
        "gql": "MATCH (c:Company)-[sc:OWNS]->(gs:GasStation) WHERE c.Company = 'ExxonMobil' RETURN gs.Manager_Name"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization) WHERE o.isDissolved = false RETURN o.name",
        "gql": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization) WHERE o.isDissolved = false RETURN o.name"
    },
    {
        "cypher": "MATCH (people:people) RETURN people.Name,people.Birth_Date ORDER BY people.Name ASC",
        "gql": "MATCH (people:people) RETURN people.Name,people.Birth_Date ORDER BY people.Name ASC"
    },
    {
        "cypher": "MATCH (c:City)<-[:IN_CITY]-(o:Organization) WITH c, count(o) AS orgCount ORDER BY orgCount DESC LIMIT 5 RETURN c.name AS city, orgCount",
        "gql": "MATCH (c:City)<-[:IN_CITY]-(o:Organization) RETURN c, count(o) AS orgCount ORDER BY orgCount DESC LIMIT 5 NEXT RETURN c.name AS city, orgCount"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'}) WITH q ORDER BY q.score DESC LIMIT 5 RETURN q",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'graphql'}) RETURN q ORDER BY q.score DESC LIMIT 5 NEXT RETURN q"
    },
    {
        "cypher": "MATCH (a:Author {fname: \"Amal\"}) RETURN a.lname",
        "gql": "MATCH (a:Author {fname: \"Amal\"}) RETURN a.lname"
    },
    {
        "cypher": "MATCH (parentOrg:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) WHERE subsidiary.isDissolved = true RETURN parentOrg.name AS ParentOrganization, subsidiary.name AS DissolvedSubsidiary",
        "gql": "MATCH (parentOrg:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) WHERE subsidiary.isDissolved = true RETURN parentOrg.name AS ParentOrganization, subsidiary.name AS DissolvedSubsidiary"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.jurisdiction_description = \"Samoa\" MATCH (e)-[:same_name_as]->(other) RETURN DISTINCT e.name",
        "gql": "MATCH (e:Entity) WHERE e.jurisdiction_description = \"Samoa\" MATCH (e)-[:same_name_as]->(other) RETURN DISTINCT e.name"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1PageRank > 0.5 RETURN c.name, c.degree ORDER BY c.degree DESC LIMIT 3",
        "gql": "MATCH (c:Character) WHERE c.book1PageRank > 0.5 RETURN c.name, c.degree ORDER BY c.degree DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Storm)-[:AFFECTS]->(r:Region) WHERE r.Region_name = 'Denmark' RETURN s.Name",
        "gql": "MATCH (s:Storm)-[:AFFECTS]->(r:Region) WHERE r.Region_name = 'Denmark' RETURN s.Name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget > 100000 AND m.vote_count = 10 RETURN m.title, m.budget, m.vote_count LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.budget > 100000 AND m.vote_count = 10 RETURN m.title, m.budget, m.vote_count LIMIT 3"
    },
    {
        "cypher": "MATCH (r:Resident) RETURN max(r.date_moved_in)",
        "gql": "MATCH (r:Resident) RETURN max(r.date_moved_in)"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.beneficiary_bank_country = \"United States\" WITH e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 5 RETURN e.name, filingsCount",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.beneficiary_bank_country = \"United States\" RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 5 NEXT RETURN e.name, filingsCount"
    },
    {
        "cypher": "MATCH (a:Article {prodName: \"IRIS JKT w pile\"})-[:VARIANT_OF]->(p:Product) RETURN p.detailDesc",
        "gql": "MATCH (a:Article{prodName:\"IRIS JKT w pile\"})-[:VARIANT_OF]->(p:`Product`) RETURN p.detailDesc"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue < 1000 RETURN m.title, m.revenue ORDER BY m.released LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.revenue < 1000 RETURN m.title, m.revenue ORDER BY m.released LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CEO]->(:Person {name: \"Julie Spellman Sweet\"})<-[:MENTIONS]-(a:Article) RETURN a LIMIT 5",
        "gql": "MATCH (o:Organization)-[:HAS_CEO]->(:Person {name: \"Julie Spellman Sweet\"})<-[:MENTIONS]-(a:Article) RETURN a LIMIT 5"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.answered = true AND q.score > 10 RETURN q.createdAt",
        "gql": "MATCH (q:Question) WHERE q.answered = true AND q.score > 10 RETURN q.createdAt"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN h.name AS hashtag_name",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN h.name AS hashtag_name"
    },
    {
        "cypher": "MATCH (tv_series:TV_series) WHERE tv_series.Episode = 'A Love of a Lifetime' RETURN tv_series.Air_Date",
        "gql": "MATCH (tv_series:TV_series) WHERE tv_series.Episode = 'A Love of a Lifetime' RETURN tv_series.Air_Date"
    },
    {
        "cypher": "MATCH (b:Branch) RETURN b.Name, b.Address_road, b.City ORDER BY b.Open_year",
        "gql": "MATCH (b:Branch) RETURN b.Name, b.Address_road, b.City ORDER BY b.Open_year"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WITH b.city AS city, r.stars AS stars RETURN city, avg(stars) AS averageRating",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.city AS city, r.stars AS stars NEXT RETURN city, avg(stars) AS averageRating"
    },
    {
        "cypher": "MATCH (n:Network {ip: '10.2'}) RETURN n.size",
        "gql": "MATCH (n:Network{ip:'10.2'}) RETURN n.`size`"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}) WHERE s.followers > 10000 RETURN s.id, s.name, s.url, s.followers",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}) WHERE s.followers > 10000 RETURN s.id, s.name, s.url, s.followers"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'}) RETURN t LIMIT 3",
        "gql": "MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'}) RETURN t LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie {tagline: 'Welcome to the Real World'}) RETURN m.title",
        "gql": "MATCH (m:Movie {tagline: 'Welcome to the Real World'}) RETURN m.title"
    },
    {
        "cypher": "MATCH (o:Officer) RETURN o.name, o.lastEditTimestamp ORDER BY o.lastEditTimestamp DESC LIMIT 5",
        "gql": "MATCH (o:Officer) RETURN o.name, o.lastEditTimestamp ORDER BY o.lastEditTimestamp DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (rack:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(machine:Machine)-[:RUNS]->(application:Application) RETURN application.name LIMIT 3",
        "gql": "MATCH (rack:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(machine:Machine)-[:RUNS]->(application:Application) RETURN application.name LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Storm) RETURN s.Name, s.Damage_millions_USD ORDER BY s.Max_speed DESC",
        "gql": "MATCH (s:Storm) RETURN s.Name, s.Damage_millions_USD ORDER BY s.Max_speed DESC"
    },
    {
        "cypher": "MATCH (c:Comment)-[:COMMENTED_ON]->(q:Question) WHERE q.view_count > 100 RETURN c ORDER BY c.score DESC LIMIT 5",
        "gql": "MATCH (c:Comment)-[:COMMENTED_ON]->(q:Question) WHERE q.view_count > 100 RETURN c ORDER BY c.score DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Company)-[:OWNS]->(g:GasStation) RETURN g.Location, g.Representative_Name ORDER BY c.Assets_billion DESC LIMIT 3",
        "gql": "MATCH (c:Company)-[:OWNS]->(g:GasStation) RETURN g.Location, g.Representative_Name ORDER BY c.Assets_billion DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c1:Character)-[i:INTERACTS45]->(c2:Character) WHERE i.weight > 90 RETURN c1.name AS character1, c2.name AS character2, i.weight AS weight",
        "gql": "MATCH (c1:Character)-[i:INTERACTS45]->(c2:Character) WHERE i.weight > 90 RETURN c1.name AS character1, c2.name AS character2, i.weight AS weight"
    },
    {
        "cypher": "MATCH (e:Editor) RETURN e.Name ORDER BY e.Age LIMIT 1",
        "gql": "MATCH (e:Editor) RETURN e.Name ORDER BY e.Age LIMIT 1"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.state = 'CA' RETURN DISTINCT u.name",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.state = 'CA' RETURN DISTINCT u.name"
    },
    {
        "cypher": "MATCH (r:Restaurant) RETURN r.ResName",
        "gql": "MATCH (r:Restaurant) RETURN r.ResName"
    },
    {
        "cypher": "MATCH (t:Teacher) RETURN t.first_name, t.last_name ORDER BY t.last_name",
        "gql": "MATCH (t:Teacher) RETURN t.first_name, t.last_name ORDER BY t.last_name"
    },
    {
        "cypher": "MATCH (app:Application {name: 'logstash'})<-[:RUNS]-(machine:Machine)<-[:HOLDS]-(rack:Rack) RETURN DISTINCT rack.name AS rack_name",
        "gql": "MATCH (app:Application {name: 'logstash'})<-[:RUNS]-(machine:Machine)<-[:HOLDS]-(rack:Rack) RETURN DISTINCT rack.name AS rack_name"
    },
    {
        "cypher": "MATCH (a:Application) RETURN a.name AS application, a.pid AS pid ORDER BY pid DESC LIMIT 3",
        "gql": "MATCH (a:Application) RETURN a.name AS application, a.pid AS pid ORDER BY pid DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question) WITH q, q.downVotes AS num_downvotes ORDER BY num_downvotes DESC LIMIT 1 RETURN q.title",
        "gql": "MATCH (q:Question) RETURN q, q.downVotes AS num_downvotes ORDER BY num_downvotes DESC LIMIT 1 NEXT RETURN q.title"
    },
    {
        "cypher": "MATCH (m:Movie {title: 'Toy Story'})<-[:CREW_FOR]-(p:Person) RETURN DISTINCT p.job AS job",
        "gql": "MATCH (m:Movie {title: 'Toy Story'})<-[:CREW_FOR]-(p:Person) RETURN DISTINCT p.job AS job"
    },
    {
        "cypher": "MATCH (city:City {name: \"Seattle\"})<-[:IN_CITY]-(org:Organization)<-[:MENTIONS]-(article:Article) WITH article ORDER BY article.date ASC LIMIT 5 RETURN article.author",
        "gql": "MATCH (city:City{name:\"Seattle\"})<-[:IN_CITY]-(org:Organization)<-[:MENTIONS]-(article:Article) RETURN article ORDER BY article.`date` ASC LIMIT 5 NEXT RETURN article.author"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WITH c.categoryName AS categoryName, avg(p.unitsInStock) AS averageUnitsInStock RETURN categoryName, averageUnitsInStock",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS categoryName, avg(p.unitsInStock) AS averageUnitsInStock NEXT RETURN categoryName, averageUnitsInStock"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany {name: 'Universal Pictures'}) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany {name: 'Universal Pictures'}) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream) WHERE s.total_view_count > 500000 RETURN u ORDER BY s.createdAt LIMIT 3",
        "gql": "MATCH (u:User)-[:MODERATOR]->(s:Stream) WHERE s.total_view_count > 500000 RETURN u ORDER BY s.createdAt LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.note IS NOT NULL RETURN e",
        "gql": "MATCH (e:Entity) WHERE e.note IS NOT NULL RETURN e"
    },
    {
        "cypher": "MATCH (n:Article), (:Author {first_name: 'Jean-Francois'}) WHERE NOT (n) --> (:Author) RETURN n.article_id",
        "gql": "MATCH (n:Article), (:Author {first_name: 'Jean-Francois'}) WHERE NOT (n) --> (:Author) RETURN n.article_id"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'adventure'}) WHERE m.popularity > 15 RETURN m",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'adventure'}) WHERE m.popularity > 15 RETURN m"
    },
    {
        "cypher": "MATCH (o:Organization)<-[:HAS_INVESTOR]-(investor:Organization {name: \"Apple\"}) WITH o MATCH (o)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) RETURN DISTINCT country.name",
        "gql": "MATCH (o:Organization)<-[:HAS_INVESTOR]-(investor:Organization{name:\"Apple\"}) RETURN o NEXT MATCH (o)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) RETURN DISTINCT country.name"
    },
    {
        "cypher": "MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(p:Process)<-[:RUNS]-(m:Machine) RETURN m.name AS machine_name",
        "gql": "MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(p:Process)<-[:RUNS]-(m:Machine) RETURN m.name AS machine_name"
    },
    {
        "cypher": "MATCH (c:Company)-[:OWNS]->(gs:GasStation) WHERE c.Market_Value > 100 RETURN gs.Location",
        "gql": "MATCH (c:Company)-[:OWNS]->(gs:GasStation) WHERE c.Market_Value > 100 RETURN gs.Location"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '225'}]->(m) WHERE n.comments='43 pages, 1 figure. Revised August 2001 to cut page length (eg   deleted appendix) for publication in CMP. Also fleshed out ex. of q-Killing   metric for q-SU_2 previously mentioned (no significant additions)' RETURN m.name",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '225'}]->(m) WHERE n.comments='43 pages, 1 figure. Revised August 2001 to cut page length (eg   deleted appendix) for publication in CMP. Also fleshed out ex. of q-Killing   metric for q-SU_2 previously mentioned (no significant additions)' RETURN m.name"
    },
    {
        "cypher": "MATCH (u:User) RETURN u ORDER BY u.size DESC LIMIT 3",
        "gql": "MATCH (u:User) RETURN u ORDER BY u.`size` DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.degree = 300.0 RETURN c.name",
        "gql": "MATCH (c:Character) WHERE c.degree = 300.0 RETURN c.name"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name, c.pagerank ORDER BY c.pagerank DESC LIMIT 3",
        "gql": "MATCH (c:Character) RETURN c.name, c.pagerank ORDER BY c.pagerank DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (timAllen:Person {name: \"Tim Allen\"})-[:CAST_FOR]->(m:Movie)<-[:CAST_FOR]-(coWorkers:Person) WHERE m.release_date >= date(\"2015-01-01\") AND m.release_date <= date(\"2015-12-31\") RETURN DISTINCT coWorkers.name",
        "gql": "MATCH (timAllen:Person {name: \"Tim Allen\"})-[:CAST_FOR]->(m:Movie)<-[:CAST_FOR]-(coWorkers:Person) WHERE m.release_date >= date(\"2015-01-01\") AND m.release_date <= date(\"2015-12-31\") RETURN DISTINCT coWorkers.name"
    },
    {
        "cypher": "MATCH (c:City) WHERE c.Population > 1000 MATCH (fc:Farm_competition)-[:TAKES_PLACE_IN]->(c) RETURN fc.Theme",
        "gql": "MATCH (c:City) WHERE c.Population > 1000 MATCH (fc:Farm_competition)-[:TAKES_PLACE_IN]->(c) RETURN fc.Theme"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) WITH m, count(c) AS numCountries WHERE numCountries > 1 RETURN m.title AS movie, numCountries ORDER BY numCountries DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN m, count(c) AS numCountries NEXT RETURN m.title AS movie, numCountries ORDER BY numCountries DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User) RETURN u.screen_name, u.followers ORDER BY u.followers DESC LIMIT 3",
        "gql": "MATCH (u:User) RETURN u.screen_name, u.followers ORDER BY u.followers DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:PRODUCED]-(p) RETURN m.title AS movie",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:PRODUCED]-(p) RETURN m.title AS movie"
    },
    {
        "cypher": "MATCH (n:CsuFee) WHERE n.Year = 2005 RETURN avg(n.CampusFee)",
        "gql": "MATCH (n:CsuFee) WHERE n.`Year` = 2005 RETURN avg(n.CampusFee)"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE o.shipCountry = 'France' RETURN DISTINCT c.companyName AS CustomerName, c.contactName AS ContactName, c.contactTitle AS ContactTitle, c.city AS City, c.country AS Country",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`)-[:ORDERS]->(p:`Product`) WHERE o.shipCountry = 'France' RETURN DISTINCT c.companyName AS CustomerName, c.contactName AS ContactName, c.contactTitle AS ContactTitle, c.city AS City, c.country AS Country"
    },
    {
        "cypher": "MATCH (n:Topic) MATCH (m:Report) RETURN n.label, m.report_no LIMIT 8",
        "gql": "MATCH (n:Topic) MATCH (m:Report) RETURN n.label, m.report_no LIMIT 8"
    },
    {
        "cypher": "MATCH (flights:flights) WHERE flights.SourceAirport = 'APG' RETURN count(*)",
        "gql": "MATCH (flights:flights) WHERE flights.SourceAirport = 'APG' RETURN count(*)"
    },
    {
        "cypher": "MATCH (o:Organization {isDissolved: true})<-[:MENTIONS]-(a:Article) RETURN a.title",
        "gql": "MATCH (o:Organization {isDissolved: true})<-[:MENTIONS]-(a:Article) RETURN a.title"
    },
    {
        "cypher": "MATCH (T1:people)-[]-(T2:poker_player) WHERE T2.Earnings > 300000 RETURN T1.Name",
        "gql": "MATCH (T1:people)-[]-(T2:poker_player) WHERE T2.Earnings > 300000 RETURN T1.Name"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WHERE p.unitsInStock > 50 RETURN s.companyName LIMIT 3",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) WHERE p.unitsInStock > 50 RETURN s.companyName LIMIT 3"
    },
    {
        "cypher": "MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) WITH t, count(s) AS streamCount ORDER BY streamCount DESC LIMIT 3 RETURN t.name, streamCount",
        "gql": "MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) RETURN t, count(s) AS streamCount ORDER BY streamCount DESC LIMIT 3 NEXT RETURN t.name, streamCount"
    },
    {
        "cypher": "MATCH (m:Movie) WITH m ORDER BY m.imdbRating ASC LIMIT 1 WITH m.year AS lowestRatedYear MATCH (movie:Movie {year: lowestRatedYear}) RETURN movie.title",
        "gql": "MATCH (m:Movie) RETURN m ORDER BY m.imdbRating ASC LIMIT 1 NEXT MATCH (movie:Movie{`year`:lowestRatedYear}) RETURN movie.title"
    },
    {
        "cypher": "MATCH (s:Supplier {companyName: \"Exotic Liquids\"})-[:SUPPLIES]->(p:Product) RETURN p",
        "gql": "MATCH (s:Supplier{companyName:\"Exotic Liquids\"})-[:SUPPLIES]->(p:`Product`) RETURN p"
    },
    {
        "cypher": "MATCH (s:Stream)-[:VIP]->(u:User)-[:VIP]->(otherStream:Stream) WITH s, COUNT(DISTINCT otherStream) AS vipCount WHERE vipCount > 1 RETURN s.name AS streamName, s.url AS streamUrl, vipCount ORDER BY vipCount DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:VIP]->(u:User)-[:VIP]->(otherStream:Stream) RETURN s, COUNT(otherStream) AS vipCount NEXT RETURN s.name AS streamName, s.url AS streamUrl, vipCount ORDER BY vipCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (tv_channel:TV_Channel) RETURN tv_channel.Language,count(*) ORDER BY tv_channel.Language ASC LIMIT 1",
        "gql": "MATCH (tv_channel:TV_Channel) RETURN tv_channel.Language,count(*) ORDER BY tv_channel.Language ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = \"en\" RETURN avg(s.followers)",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = \"en\" RETURN avg(s.followers)"
    },
    {
        "cypher": "MATCH (c:Character)-[r:INTERACTS3]->(c2:Character) RETURN c.name AS character, r.weight AS weight ORDER BY r.weight ASC LIMIT 5",
        "gql": "MATCH (c:Character)-[r:INTERACTS3]->(c2:Character) RETURN c.name AS character, r.weight AS weight ORDER BY r.weight ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:UpdateDate) MATCH (m:Keyword) RETURN n.update_date, m.key_id LIMIT 8",
        "gql": "MATCH (n:UpdateDate) MATCH (m:Keyword) RETURN n.update_date, m.key_id LIMIT 8"
    },
    {
        "cypher": "MATCH (employee:employee) RETURN employee.Name ORDER BY employee.Age",
        "gql": "MATCH (employee:employee) RETURN employee.Name ORDER BY employee.Age"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_COMPETITOR]->(:Organization {name: \"Apple\"}) RETURN o.name AS OrganizationName LIMIT 3",
        "gql": "MATCH (o:Organization)-[:HAS_COMPETITOR]->(:Organization {name: \"Apple\"}) RETURN o.name AS OrganizationName LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article)-[:VARIANT_OF]->(p:Product) WHERE a.prodName = 'Benny Shorts' RETURN p.productTypeName",
        "gql": "MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`) WHERE a.prodName = 'Benny Shorts' RETURN p.productTypeName"
    },
    {
        "cypher": "MATCH (t:Teacher) RETURN DISTINCT t.FirstName, t.LastName",
        "gql": "MATCH (t:Teacher) RETURN DISTINCT t.FirstName, t.LastName"
    },
    {
        "cypher": "MATCH (t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 5",
        "gql": "MATCH (t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Product) WHERE p.reorderLevel = 30 RETURN p LIMIT 5",
        "gql": "MATCH (p:`Product`) WHERE p.reorderLevel = 30 RETURN p LIMIT 5"
    },
    {
        "cypher": "MATCH (g:Genre {name: 'Children'})<-[:IN_GENRE]-(m:Movie) WITH avg(m.imdbRating) AS average_rating RETURN average_rating",
        "gql": "MATCH (g:Genre{name:'Children'})<-[:IN_GENRE]-(m:Movie) RETURN avg(m.imdbRating) AS average_rating NEXT RETURN average_rating"
    },
    {
        "cypher": "MATCH (c:City) RETURN COUNT(DISTINCT c.Status)",
        "gql": "MATCH (c:City) RETURN COUNT(DISTINCT c.Status)"
    },
    {
        "cypher": "MATCH (s:Swimmer) RETURN s.name ORDER BY s.meter_100",
        "gql": "MATCH (s:Swimmer) RETURN s.name ORDER BY s.meter_100"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_DOI]->(m) WHERE n.abstract='  Using matrix inversion and determinant evaluation techniques we prove several summation and transformation formulas for terminating, balanced, very-well-poised, elliptic hypergeometric series. ' RETURN m.name",
        "gql": "MATCH (n:Article)-[ha:HAS_DOI]->(m) WHERE n.`abstract` = '  Using matrix inversion and determinant evaluation techniques we prove several summation and transformation formulas for terminating, balanced, very-well-poised, elliptic hypergeometric series. ' RETURN m.name"
    },
    {
        "cypher": "MATCH (e:Entity { service_provider: 'Mossack Fonseca' }) MATCH (e)-[:registered_address]->(a:Address { countries: 'Samoa' }) RETURN e.name",
        "gql": "MATCH (e:Entity { service_provider: 'Mossack Fonseca' }) MATCH (e)-[:registered_address]->(a:Address { countries: 'Samoa' }) RETURN e.name"
    },
    {
        "cypher": "MATCH (c:Course) RETURN c.CName ORDER BY c.Credits",
        "gql": "MATCH (c:Course) RETURN c.CName ORDER BY c.Credits"
    },
    {
        "cypher": "MATCH (e:Entity {type: 'FOREIGN FORMED CORPORATION'}) RETURN e",
        "gql": "MATCH (e:Entity {type: 'FOREIGN FORMED CORPORATION'}) RETURN e"
    },
    {
        "cypher": "MATCH (p:Property)<-[:LIVES_IN]-(r:Resident) RETURN p.property_id, count(*)",
        "gql": "MATCH (p:Property)<-[:LIVES_IN]-(r:Resident) RETURN p.property_id, count(*)"
    },
    {
        "cypher": "MATCH (e:Employee {Role_Code:\"HR\"}) RETURN e.Employee_Name",
        "gql": "MATCH (e:Employee {Role_Code:\"HR\"}) RETURN e.Employee_Name"
    },
    {
        "cypher": "MATCH (f:Faculty) WHERE f.Rank = \"Professor\" RETURN f.Fname ORDER BY f.Fname",
        "gql": "MATCH (f:Faculty) WHERE f.Rank = \"Professor\" RETURN f.Fname ORDER BY f.Fname"
    },
    {
        "cypher": "MATCH (u:User {display_name: 'schernichkin'})-[:ASKED]->(q:Question) RETURN q ORDER BY q.view_count DESC LIMIT 3",
        "gql": "MATCH (u:User {display_name: 'schernichkin'})-[:ASKED]->(q:Question) RETURN q ORDER BY q.view_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WITH max(m.imdbRating) AS maxRating MATCH (highestRated:Movie { imdbRating: maxRating }) WITH highestRated.year AS releaseYear MATCH (movie:Movie { year: releaseYear }) RETURN movie.title",
        "gql": "MATCH (m:Movie) MATCH (highestRated:Movie{imdbRating:maxRating}) RETURN max(m.imdbRating) AS maxRating NEXT MATCH (movie:Movie{`year`:releaseYear}) RETURN movie.title"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category) WHERE p.unitsOnOrder > 0 WITH c.categoryName AS category, COUNT(p) AS productCount ORDER BY productCount ASC LIMIT 3 RETURN category, productCount",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.unitsOnOrder > 0 RETURN c.categoryName AS category, COUNT(p) AS productCount ORDER BY productCount ASC LIMIT 3 NEXT RETURN category, productCount"
    },
    {
        "cypher": "MATCH (a:Article{article_id:'602665'})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{article_id:'602665'})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Sales_in_Billion > 200 RETURN c.Name ORDER BY c.Sales_in_Billion, c.Profits_in_Billion DESC",
        "gql": "MATCH (c:Company) WHERE c.Sales_in_Billion > 200 RETURN c.Name ORDER BY c.Sales_in_Billion, c.Profits_in_Billion DESC"
    },
    {
        "cypher": "MATCH (c:Character)-[r:INTERACTS3]->(:Character) WHERE r.weight > 90 RETURN c",
        "gql": "MATCH (c:Character)-[r:INTERACTS3]->(:Character) WHERE r.weight > 90 RETURN c"
    },
    {
        "cypher": "MATCH (movie:Movie)-[:IN_GENRE]->(genre:Genre) WHERE movie.budget > 200000000 WITH genre.name AS genreName, count(DISTINCT movie) AS movieCount ORDER BY movieCount DESC RETURN genreName, movieCount LIMIT 1",
        "gql": "MATCH (movie:Movie)-[:IN_GENRE]->(genre:Genre) WHERE movie.budget > 200000000 RETURN genre.name AS genreName, count(movie) AS movieCount ORDER BY movieCount DESC NEXT RETURN genreName, movieCount LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Gymnast) RETURN count(n)",
        "gql": "MATCH (n:Gymnast) RETURN count(n)"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WITH s, AVG(p.unitsInStock) AS avgUnitsInStock ORDER BY avgUnitsInStock DESC LIMIT 3 RETURN s.companyName, avgUnitsInStock",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, AVG(p.unitsInStock) AS avgUnitsInStock ORDER BY avgUnitsInStock DESC LIMIT 3 NEXT RETURN s.companyName, avgUnitsInStock"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: \"Adventure\"}) WHERE m.revenue IS NOT NULL RETURN m ORDER BY m.revenue DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: \"Adventure\"}) WHERE m.revenue IS NOT NULL RETURN m ORDER BY m.revenue DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)<-[:MENTIONS]-(t:Tweet)<-[:POSTS]-(:Me {name: 'Neo4j'}) RETURN u.name AS user, count(t) AS mentions ORDER BY mentions DESC LIMIT 3",
        "gql": "MATCH (u:User)<-[:MENTIONS]-(t:Tweet)<-[:POSTS]-(:Me {name: 'Neo4j'}) RETURN u.name AS user, count(t) AS mentions ORDER BY mentions DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.year < 2000 WITH avg(m.budget) AS averageBudget RETURN averageBudget",
        "gql": "MATCH (m:Movie) WHERE m.`year` < 2000 RETURN avg(m.budget) AS averageBudget NEXT RETURN averageBudget"
    },
    {
        "cypher": "MATCH (n:Journal) WHERE n.journal_id = 'ebe5bed51965553359ee9f13db0293e1' RETURN n",
        "gql": "MATCH (n:Journal) WHERE n.journal_id = 'ebe5bed51965553359ee9f13db0293e1' RETURN n"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:FOLLOWS]->(user:User) WHERE user.followers > 10000 RETURN user.screen_name, user.followers",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:FOLLOWS]->(user:User) WHERE user.followers > 10000 RETURN user.screen_name, user.followers"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.sourceID = 'Bahamas Leaks' RETURN e",
        "gql": "MATCH (e:Entity) WHERE e.sourceID = 'Bahamas Leaks' RETURN e"
    },
    {
        "cypher": "MATCH (p:Product)-[:ORDERS]->(o:Order) RETURN p.productName, count(o) AS reorderCount ORDER BY reorderCount DESC LIMIT 5",
        "gql": "MATCH (p:`Product`)-[:ORDERS]->(o:`Order`) RETURN p.productName, count(o) AS reorderCount ORDER BY reorderCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WITH b, avg(r.stars) AS averageRating WHERE averageRating > 4.5 WITH b.city AS city, count(b) AS businessCount RETURN city, businessCount ORDER BY businessCount DESC LIMIT 1",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) RETURN b, avg(r.stars) AS averageRating NEXT RETURN city, businessCount ORDER BY businessCount DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Topic{description:'Collection of techniques and methods for studying the limiting behavior of functions, sequences, and series as certain parameters approach infinity or other special values. Includes concepts such as asymptotic expansions, asymptotic normality, scaling behavior, and Jost asymptotics. Emphasizes the study of asymptotic properties, asymptotic solutions, and asymptotic optimality. Also encompasses topics like approximate normality, asymptotic equivalents, asymptotic expansion of risk difference, and asymptotic relations. May involve the use of O(m log(m B)) notation to describe'})-[*]->(d:DOI{doi_id:'fe8768ee88f2d27ed51861639e63a4ff'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Topic{description:'Collection of techniques and methods for studying the limiting behavior of functions, sequences, and series as certain parameters approach infinity or other special values. Includes concepts such as asymptotic expansions, asymptotic normality, scaling behavior, and Jost asymptotics. Emphasizes the study of asymptotic properties, asymptotic solutions, and asymptotic optimality. Also encompasses topics like approximate normality, asymptotic equivalents, asymptotic expansion of risk difference, and asymptotic relations. May involve the use of O(m log(m B)) notation to describe'})-[]->{1,}(d:DOI{doi_id:'fe8768ee88f2d27ed51861639e63a4ff'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (c:Country {name: \"United States of America\"}) MATCH (o:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(c) WITH o ORDER BY o.revenue DESC LIMIT 3 RETURN o.name",
        "gql": "MATCH (c:Country{name:\"United States of America\"}) MATCH (o:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(c) RETURN o ORDER BY o.revenue DESC LIMIT 3 NEXT RETURN o.name"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) WITH m, count(c) AS num_countries WHERE num_countries > 1 RETURN m.title AS MovieTitle, num_countries",
        "gql": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN m, count(c) AS num_countries NEXT RETURN m.title AS MovieTitle, num_countries"
    },
    {
        "cypher": "MATCH (c:City) WHERE c.Status <> \"Village\" RETURN c.Census_Ranking",
        "gql": "MATCH (c:City) WHERE c.Status <> \"Village\" RETURN c.Census_Ranking"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 2000 AND q.score < 0 RETURN q.title AS question_title, q.link AS question_link, q.score AS question_score, u.display_name AS user_name, u.reputation AS user_reputation",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 2000 AND q.score < 0 RETURN q.title AS question_title, q.link AS question_link, q.score AS question_score, u.display_name AS user_name, u.reputation AS user_reputation"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WITH p, avg(r.rating) AS avg_rating RETURN p.name, avg_rating ORDER BY avg_rating DESC LIMIT 1",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN p, avg(r.rating) AS avg_rating NEXT RETURN p.name, avg_rating ORDER BY avg_rating DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) WHERE e.country = 'CHN' RETURN e, count(f) AS filings_count ORDER BY filings_count DESC LIMIT 3",
        "gql": "MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) WHERE e.country = 'CHN' RETURN e, count(f) AS filings_count ORDER BY filings_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Author) MATCH (m:Keyword) RETURN n.author_id, m.key_id LIMIT 8",
        "gql": "MATCH (n:Author) MATCH (m:Keyword) RETURN n.author_id, m.key_id LIMIT 8"
    },
    {
        "cypher": "MATCH (a:Author {fname:\"Amal\"}) RETURN a.lname",
        "gql": "MATCH (a:Author {fname:\"Amal\"}) RETURN a.lname"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 4})-[:HOLDS]->(s:Switch) RETURN count(DISTINCT r) AS numberOfRacksWithSwitches",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 4})-[:HOLDS]->(s:Switch) RETURN count(DISTINCT r) AS numberOfRacksWithSwitches"
    },
    {
        "cypher": "MATCH (p:Publication) RETURN p.Publication_Date ORDER BY p.Price DESC",
        "gql": "MATCH (p:Publication) RETURN p.Publication_Date ORDER BY p.Price DESC"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.homepage IS NOT NULL RETURN m.title, m.homepage",
        "gql": "MATCH (m:Movie) WHERE m.homepage IS NOT NULL RETURN m.title, m.homepage"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WITH o, count(DISTINCT country) AS countriesCount WHERE countriesCount > 3 RETURN o.name AS Organization, countriesCount",
        "gql": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) RETURN o, count(country) AS countriesCount NEXT RETURN o.name AS Organization, countriesCount"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue / m.budget > 3 RETURN m.title, m.revenue, m.budget ORDER BY m.revenue / m.budget DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.revenue / m.budget > 3 RETURN m.title, m.revenue, m.budget ORDER BY m.revenue / m.budget DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Author) WHERE a.lname = \"Ueno\" RETURN a.fname",
        "gql": "MATCH (a:Author) WHERE a.lname = \"Ueno\" RETURN a.fname"
    },
    {
        "cypher": "MATCH (n:Article), (:Author {first_name: 'Marco'}) WHERE NOT (n) --> (:Author) RETURN n.abstract",
        "gql": "MATCH (n:Article), (:Author {first_name: 'Marco'}) WHERE NOT (n) --> (:Author) RETURN n.abstract"
    },
    {
        "cypher": "MATCH (d:RefDocumentType) RETURN d.document_type_code",
        "gql": "MATCH (d:RefDocumentType) RETURN d.document_type_code"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.incorporation_date = '23-MAR-2006' RETURN e.name AS entity_name, e.incorporation_date AS incorporation_date",
        "gql": "MATCH (e:Entity) WHERE e.incorporation_date = '23-MAR-2006' RETURN e.name AS entity_name, e.incorporation_date AS incorporation_date"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.rating > 90 RETURN m.title LIMIT 3",
        "gql": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.rating > 90 RETURN m.title LIMIT 3"
    },
    {
        "cypher": "MATCH (stadium:stadium) WHERE 5000<=stadium.capacity<=10000 RETURN stadium.location,stadium.name",
        "gql": "MATCH (stadium:stadium) WHERE 5000<=stadium.capacity<=10000 RETURN stadium.location,stadium.name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.imdbRating > 6.0 RETURN m.title, m.runtime, m.imdbRating ORDER BY m.runtime ASC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.imdbRating > 6.0 RETURN m.title, m.runtime, m.imdbRating ORDER BY m.runtime ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (r:RefLocation) RETURN r.Location_Code, r.Location_Name",
        "gql": "MATCH (r:RefLocation) RETURN r.Location_Code, r.Location_Name"
    },
    {
        "cypher": "MATCH (n:UpdateDate) WHERE n.update_date = date('2007-05-23') RETURN n",
        "gql": "MATCH (n:UpdateDate) WHERE n.update_date = date('2007-05-23') RETURN n"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(:Category), (r:Review)-[:REVIEWS]->(b) WHERE b.city = 'Burlingame' RETURN b.name AS businessName, r.text AS reviewText, r.stars AS reviewStars, r.date AS reviewDate",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(:Category) WHERE b.city = 'Burlingame' RETURN b.name AS businessName, r.text AS reviewText, r.stars AS reviewStars, r.`date` AS reviewDate"
    },
    {
        "cypher": "MATCH (c:Country {tld: 'US'}) MATCH (e:Entity)-[:COUNTRY]->(c) MATCH (e)-[:FILED]->(f:Filing) RETURN count(DISTINCT f) AS totalFilings",
        "gql": "MATCH (c:Country {tld: 'US'}) MATCH (e:Entity)-[:COUNTRY]->(c) MATCH (e)-[:FILED]->(f:Filing) RETURN count(DISTINCT f) AS totalFilings"
    },
    {
        "cypher": "MATCH (director:Person {name: \"Nancy Meyers\"})-[:DIRECTED]->(movie:Movie) WITH movie ORDER BY movie.released LIMIT 3 MATCH (actor:Person)-[actedIn:ACTED_IN]->(movie) RETURN movie.title AS MovieTitle, actor.name AS ActorName, actedIn.roles AS Roles",
        "gql": "MATCH (director:Person{name:\"Nancy Meyers\"})-[:DIRECTED]->(movie:Movie) RETURN movie ORDER BY movie.released LIMIT 3 NEXT MATCH (actor:Person)-[actedIn:ACTED_IN]->(movie) RETURN movie.title AS MovieTitle, actor.name AS ActorName, actedIn.roles AS Roles"
    },
    {
        "cypher": "MATCH (s:Student) WHERE s.Age > 18 AND s.Major <> 600 AND s.Sex = 'F' RETURN s.Fname, s.LName",
        "gql": "MATCH (s:Student) WHERE s.Age > 18 AND s.Major <> 600 AND s.Sex = 'F' RETURN s.Fname, s.LName"
    },
    {
        "cypher": "MATCH (a:Article{title:'Summation and transformation formulas for elliptic hypergeometric series'})-[:WRITTEN_BY]->(c:Author)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Summation and transformation formulas for elliptic hypergeometric series'})-[:WRITTEN_BY]->(c:Author)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WITH u, COUNT(DISTINCT b) AS businessCount WHERE businessCount > 1 RETURN u.name AS userName",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN u, COUNT(b) AS businessCount NEXT RETURN u.name AS userName"
    },
    {
        "cypher": "MATCH (s:Storm) RETURN s.Name, s.Damage_millions_USD ORDER BY s.Max_speed DESC",
        "gql": "MATCH (s:Storm) RETURN s.Name, s.Damage_millions_USD ORDER BY s.Max_speed DESC"
    },
    {
        "cypher": "MATCH (u:User)-[r:INTERACTED]->(v:User) WHERE v.size > 2 WITH u, COUNT(DISTINCT v) AS interactionCount RETURN u.label AS user, interactionCount ORDER BY interactionCount DESC LIMIT 5",
        "gql": "MATCH (u:User)-[r:INTERACTED]->(v:User) WHERE v.`size` > 2 RETURN u, COUNT(v) AS interactionCount NEXT RETURN u.label AS user, interactionCount ORDER BY interactionCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (highschooler:Highschooler) RETURN highschooler.grade ORDER BY highschooler.grade DESC LIMIT 1",
        "gql": "MATCH (highschooler:Highschooler) RETURN highschooler.grade ORDER BY highschooler.grade DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (o:Officer)-[:officer_of]->(e1:Entity)-[:same_as]->(e2:Entity)-[:registered_address]->(a:Address) WHERE a.countries = 'Hong Kong' RETURN DISTINCT o.name",
        "gql": "MATCH (o:Officer)-[:officer_of]->(e1:Entity)-[:same_as]->(e2:Entity)-[:registered_address]->(a:Address) WHERE a.countries = 'Hong Kong' RETURN DISTINCT o.name"
    },
    {
        "cypher": "MATCH (d:DocumentsToBeDestroyed) RETURN d.Destroyed_by_Employee_ID, count(*)",
        "gql": "MATCH (d:DocumentsToBeDestroyed) RETURN d.Destroyed_by_Employee_ID, count(*)"
    },
    {
        "cypher": "MATCH (a:Actor {name: \"Tom Cruise\"})-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: \"War\"}) RETURN m.title AS MovieTitle, m.year AS ReleaseYear, m.imdbRating AS IMDbRating",
        "gql": "MATCH (a:Actor{name:\"Tom Cruise\"})-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre{name:\"War\"}) RETURN m.title AS MovieTitle, m.`year` AS ReleaseYear, m.imdbRating AS IMDbRating"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) WHERE r.weight > 200 RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS Weight",
        "gql": "MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) WHERE r.weight > 200 RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS Weight"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) WITH ic, count(o) as orgCount ORDER BY orgCount DESC LIMIT 3 RETURN ic.name",
        "gql": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) RETURN ic, count(o) AS orgCount ORDER BY orgCount DESC LIMIT 3 NEXT RETURN ic.name"
    },
    {
        "cypher": "MATCH (:Question)-[:TAGGED]->(tag:Tag) RETURN DISTINCT tag.name",
        "gql": "MATCH (:Question)-[:TAGGED]->(tag:Tag) RETURN DISTINCT tag.name"
    },
    {
        "cypher": "MATCH (s:Student) RETURN s.Fname ORDER BY s.Age DESC",
        "gql": "MATCH (s:Student) RETURN s.Fname ORDER BY s.Age DESC"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN count(*)",
        "gql": "MATCH (singer:singer) RETURN count(*)"
    },
    {
        "cypher": "MATCH (g:Genre {name: 'Science Fiction'})<-[:IN_GENRE]-(m:Movie) WITH avg(m.budget) AS averageBudget RETURN averageBudget",
        "gql": "MATCH (g:Genre{name:'Science Fiction'})<-[:IN_GENRE]-(m:Movie) RETURN avg(m.budget) AS averageBudget NEXT RETURN averageBudget"
    },
    {
        "cypher": "MATCH (a:Author{last_name:'Leoni'})-[*]->(d:Author{first_name:'Randall'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Author{last_name:'Leoni'})-[]->{1,}(d:Author{first_name:'Randall'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title = 'An adelic causality problem related to abelian L-functions' RETURN n",
        "gql": "MATCH (n:Article) WHERE n.title = 'An adelic causality problem related to abelian L-functions' RETURN n"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.year > 2010 RETURN m.title, m.released ORDER BY m.released LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.`year` > 2010 RETURN m.title, m.released ORDER BY m.released LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Country {name: 'China'})<-[:COUNTRY]-(e:Entity)<-[:CONCERNS]-(f:Filing) RETURN f ORDER BY f.amount DESC LIMIT 5",
        "gql": "MATCH (c:Country {name: 'China'})<-[:COUNTRY]-(e:Entity)<-[:CONCERNS]-(f:Filing) RETURN f ORDER BY f.amount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Categories) WHERE n.category_id = '33657234da1dc070ea09e7c31bb86abb' RETURN n",
        "gql": "MATCH (n:Categories) WHERE n.category_id = '33657234da1dc070ea09e7c31bb86abb' RETURN n"
    },
    {
        "cypher": "MATCH (f:Faculty) WHERE f.Year = 2002 RETURN SUM(f.Faculty)",
        "gql": "MATCH (f:Faculty) WHERE f.`Year` = 2002 RETURN SUM(f.Faculty)"
    },
    {
        "cypher": "MATCH ()-[:ORDERS]->(p:Product) WHERE p.unitsOnOrder > 100 RETURN avg(p.reorderLevel)",
        "gql": "MATCH ()-[:ORDERS]->(p:`Product`) WHERE p.unitsOnOrder > 100 RETURN avg(p.reorderLevel)"
    },
    {
        "cypher": "MATCH (p:Person)-[:HAS_BOARD_MEMBER]-(o:Organization)-[:IN_CITY]->(:City {name: 'Houston'}) RETURN p.name AS person, o.name AS organization",
        "gql": "MATCH (p:Person)-[:HAS_BOARD_MEMBER]-(o:Organization)-[:IN_CITY]->(:City {name: 'Houston'}) RETURN p.name AS person, o.name AS organization"
    },
    {
        "cypher": "MATCH (cc:CatalogContent) WHERE cc.next_entry_id > 8 RETURN cc.catalog_entry_name",
        "gql": "MATCH (cc:CatalogContent) WHERE cc.next_entry_id > 8 RETURN cc.catalog_entry_name"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '89-106'}]->(m) WHERE n.title='Classification of Subsystems for Local Nets with Trivial Superselection   Structure' RETURN m.journal_id",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '89-106'}]->(m) WHERE n.title='Classification of Subsystems for Local Nets with Trivial Superselection   Structure' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.originator_bank = \"CIMB Bank Berhad\" AND f.amount > 500000 RETURN DISTINCT f.beneficiary_iso",
        "gql": "MATCH (f:Filing) WHERE f.originator_bank = \"CIMB Bank Berhad\" AND f.amount > 500000 RETURN DISTINCT f.beneficiary_iso"
    },
    {
        "cypher": "MATCH (org:Organization)-[:IN_CITY]->(city:City) WITH org, city, org.nbrEmployees AS numEmployees ORDER BY numEmployees DESC RETURN org.name AS organizationName, numEmployees LIMIT 1",
        "gql": "MATCH (org:Organization)-[:IN_CITY]->(city:City) RETURN org, city, org.nbrEmployees AS numEmployees ORDER BY numEmployees DESC NEXT RETURN org.name AS organizationName, numEmployees LIMIT 1"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.Headquarters, count(*)",
        "gql": "MATCH (c:Company) RETURN c.Headquarters, count(*)"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN p.name, count(m) AS movies_reviewed ORDER BY movies_reviewed DESC LIMIT 1",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN p.name, count(m) AS movies_reviewed ORDER BY movies_reviewed DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment > 0.8 RETURN DISTINCT o",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment > 0.8 RETURN DISTINCT o"
    },
    {
        "cypher": "MATCH (a:Topic{description:'Studies eigenvalues and eigenvectors of operators, analyzing how structures behave under various conditions in mathematics and physics.'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Topic{description:'Studies eigenvalues and eigenvectors of operators, analyzing how structures behave under various conditions in mathematics and physics.'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (n:Author) MATCH (m:Journal) RETURN n.first_name, m.name LIMIT 8",
        "gql": "MATCH (n:Author) MATCH (m:Journal) RETURN n.first_name, m.name LIMIT 8"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.votes IS NOT NULL RETURN m.title, m.released, m.votes ORDER BY m.votes LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.votes IS NOT NULL RETURN m.title, m.released, m.votes ORDER BY m.votes LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Campus) WHERE c.Year < 1800 RETURN c.Campus",
        "gql": "MATCH (c:Campus) WHERE c.`Year` < 1800 RETURN c.Campus"
    },
    {
        "cypher": "MATCH (r:Room) RETURN COUNT(DISTINCT r.RoomType)",
        "gql": "MATCH (r:Room) RETURN COUNT(DISTINCT r.RoomType)"
    },
    {
        "cypher": "MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country) WITH v, count(c) AS countriesProducedIn ORDER BY countriesProducedIn DESC LIMIT 5 RETURN v.title, countriesProducedIn",
        "gql": "MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN v, count(c) AS countriesProducedIn ORDER BY countriesProducedIn DESC LIMIT 5 NEXT RETURN v.title, countriesProducedIn"
    },
    {
        "cypher": "MATCH (o:Officer {sourceID: \"Panama Papers\"}) RETURN count(o) AS officerCount",
        "gql": "MATCH (o:Officer {sourceID: \"Panama Papers\"}) RETURN count(o) AS officerCount"
    },
    {
        "cypher": "MATCH (a:Categories{specifications:'math.GT'})-[*]->(d:Topic{label:'Linear Algebra_1'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Categories{specifications:'math.GT'})-[]->{1,}(d:Topic{label:'Linear Algebra_1'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (c:City) WHERE c.Status <> \"Village\" RETURN c.Census_Ranking",
        "gql": "MATCH (c:City) WHERE c.Status <> \"Village\" RETURN c.Census_Ranking"
    },
    {
        "cypher": "MATCH (o:Order)-[rel:ORDERS]->(p:Product) WHERE rel.discount > 0 WITH o, sum(toFloat(rel.unitPrice) * rel.quantity * (1 - toFloat(rel.discount))) AS orderRevenue RETURN sum(orderRevenue) AS totalRevenue",
        "gql": "MATCH (o:`Order`)-[rel:ORDERS]->(p:`Product`) WHERE rel.discount > 0 RETURN o, sum(rel.unitPrice) AS orderRevenue NEXT RETURN sum(orderRevenue) AS totalRevenue"
    },
    {
        "cypher": "MATCH (d:Doctor)<-[:HAS_DOCTOR]-(p:Patient)-[:HAD_SURGERY]->(:Surgery) WHERE d.name = 'Dr. Williams' RETURN count(DISTINCT p) as totalPatients",
        "gql": "MATCH (d:Doctor)<-[:HAS_DOCTOR]-(p:Patient)-[:HAD_SURGERY]->(:Surgery) WHERE d.name = 'Dr. Williams' RETURN count(DISTINCT p) as totalPatients"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.label <> 'Linear Algebra_1' RETURN DISTINCT n.description AS description",
        "gql": "MATCH (n:Topic) WHERE n.label <> 'Linear Algebra_1' RETURN DISTINCT n.description AS description"
    },
    {
        "cypher": "MATCH (a:Author{first_name:'J. Daniel'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Author{first_name:'J. Daniel'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.isPublic = true AND o.nbrEmployees > 300 RETURN o.name, o.nbrEmployees",
        "gql": "MATCH (o:Organization) WHERE o.isPublic = true AND o.nbrEmployees > 300 RETURN o.name, o.nbrEmployees"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title AS Movie, m.votes AS Votes ORDER BY m.votes DESC LIMIT 1",
        "gql": "MATCH (m:Movie) RETURN m.title AS Movie, m.votes AS Votes ORDER BY m.votes DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (ceo:Person)<-[:HAS_CEO]-(org:Organization {isPublic: true})-[:HAS_SUBSIDIARY*0..3]->(:Organization),       (ceo)-[:HAS_CHILD]->(child:Person) RETURN child.name LIMIT 3",
        "gql": "MATCH (ceo:Person)<-[:HAS_CEO]-(org:Organization{isPublic:true})-[:HAS_SUBSIDIARY]->{0,3}(:Organization) RETURN child.name LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE m.runtime < 100 RETURN m.title LIMIT 3",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE m.runtime < 100 RETURN m.title LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Topic {label:'Category theory_3'}) RETURN n",
        "gql": "MATCH (n:Topic {label:'Category theory_3'}) RETURN n"
    },
    {
        "cypher": "MATCH (t:Tweet) RETURN t.text, t.favorites ORDER BY t.favorites DESC LIMIT 3",
        "gql": "MATCH (t:Tweet) RETURN t.text, t.favorites ORDER BY t.favorites DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN r.date AS reviewDate, r.text AS reviewText, r.stars AS reviewStars, u.name AS userName, b.name AS businessName ORDER BY r.date DESC LIMIT 3",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN r.`date` AS reviewDate, r.text AS reviewText, r.stars AS reviewStars, u.name AS userName, b.name AS businessName ORDER BY r.`date` DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars = 5.0 RETURN b",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars = 5.0 RETURN b"
    },
    {
        "cypher": "MATCH (f:Faculty) WHERE f.Sex = \"M\" AND f.Building = \"NEB\" RETURN f.Fname, f.Lname",
        "gql": "MATCH (f:Faculty) WHERE f.Sex = \"M\" AND f.Building = \"NEB\" RETURN f.Fname, f.Lname"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:MENTIONS]->(u:User) WITH t, COUNT(u) AS mention_count ORDER BY mention_count DESC LIMIT 3 RETURN t.id_str AS tweet_id, t.text AS tweet_text, mention_count",
        "gql": "MATCH (t:Tweet)-[:MENTIONS]->(u:User) RETURN t, COUNT(u) AS mention_count ORDER BY mention_count DESC LIMIT 3 NEXT RETURN t.id_str AS tweet_id, t.text AS tweet_text, mention_count"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount > 50000000 RETURN e.name AS beneficiary_entity LIMIT 3",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount > 50000000 RETURN e.name AS beneficiary_entity LIMIT 3"
    },
    {
        "cypher": "MATCH (d:Director {name: 'Steven Spielberg'})-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g.name AS Genre, count(m) AS MoviesCount ORDER BY MoviesCount DESC LIMIT 3",
        "gql": "MATCH (d:Director {name: 'Steven Spielberg'})-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g.name AS Genre, count(m) AS MoviesCount ORDER BY MoviesCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE m.runtime > 90 RETURN m.title, m.runtime ORDER BY m.popularity DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE m.runtime > 90 RETURN m.title, m.runtime ORDER BY m.popularity DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Keyword{key_id:'72e4f3fc2930bd3a0a7730a664d069d6'})-[:HAS_TOPIC]->(c:Topic)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Keyword{key_id:'72e4f3fc2930bd3a0a7730a664d069d6'})-[:HAS_TOPIC]->(c:Topic)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization) WITH p, count(o) AS orgCount WHERE orgCount > 1 RETURN p.name LIMIT 5",
        "gql": "MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization) RETURN p, count(o) AS orgCount NEXT RETURN p.name LIMIT 5"
    },
    {
        "cypher": "MATCH (c:Customer) WHERE c.region = 'NULL' RETURN c.contactName AS customerName, c.companyName AS companyName",
        "gql": "MATCH (c:Customer) WHERE c.region = 'NULL' RETURN c.contactName AS customerName, c.companyName AS companyName"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1056 OR n.article_id < 1056 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1056 OR n.article_id < 1056 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review) WITH u, avg(size(r.text)) AS avgReviewLength RETURN u.name AS userName, avgReviewLength",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review) RETURN u, avg(r.text) AS avgReviewLength NEXT RETURN u.name AS userName, avgReviewLength"
    },
    {
        "cypher": "MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName",
        "gql": "MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName"
    },
    {
        "cypher": "MATCH (n:Member) RETURN count(DISTINCT n.Level)",
        "gql": "MATCH (n:Member) RETURN count(DISTINCT n.Level)"
    },
    {
        "cypher": "MATCH (o:Organization {isPublic: true})-[:IN_CITY]->(c:City) RETURN c.name AS City, count(o) AS NumberOfPublicOrganizations ORDER BY NumberOfPublicOrganizations DESC LIMIT 1",
        "gql": "MATCH (o:Organization {isPublic: true})-[:IN_CITY]->(c:City) RETURN c.name AS City, count(o) AS NumberOfPublicOrganizations ORDER BY NumberOfPublicOrganizations DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:RATED]-() WITH m, COUNT(r) AS reviewCount, AVG(r.rating) AS avgRating WHERE reviewCount >= 6 RETURN m.title AS movieTitle, avgRating ORDER BY avgRating DESC LIMIT 1",
        "gql": "MATCH (m:Movie)<-[r:RATED]-() RETURN m, COUNT(r) AS reviewCount, AVG(r.rating) AS avgRating NEXT RETURN m.title AS movieTitle, avgRating ORDER BY avgRating DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Member) WHERE m.Address <> 'Hartford' RETURN count(m)",
        "gql": "MATCH (m:Member) WHERE m.Address <> 'Hartford' RETURN count(m)"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router {zone: 1}) RETURN r.name ORDER BY r.name LIMIT 3",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router {zone: 1}) RETURN r.name ORDER BY r.name LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN a LIMIT 5",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN a LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) WHERE m.runtime > 120 RETURN c.name AS country, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) WHERE m.runtime > 120 RETURN c.name AS country, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business {name: 'Missoula Public Library'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN count(DISTINCT u) AS NumberOfUsers",
        "gql": "MATCH (b:Business {name: 'Missoula Public Library'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN count(DISTINCT u) AS NumberOfUsers"
    },
    {
        "cypher": "MATCH (u:User {display_name: 'Christopher'})-[:ASKED]->(q:Question) RETURN q ORDER BY q.createdAt LIMIT 3",
        "gql": "MATCH (u:User {display_name: 'Christopher'})-[:ASKED]->(q:Question) RETURN q ORDER BY q.createdAt LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Categories{category_id:'978aee6db23fc939cec71ac05eb15b7a'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Categories{category_id:'978aee6db23fc939cec71ac05eb15b7a'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.beneficiary_bank_country = \"United Kingdom\" RETURN DISTINCT e.name",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.beneficiary_bank_country = \"United Kingdom\" RETURN DISTINCT e.name"
    },
    {
        "cypher": "MATCH (a:Article)-[:VARIANT_OF]->(p:Product) WHERE a.prodName = 'COZY WRAP TOP LS' RETURN p.productCode",
        "gql": "MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`) WHERE a.prodName = 'COZY WRAP TOP LS' RETURN p.productCode"
    },
    {
        "cypher": "MATCH (u:User{name:'Charlie'})-[r:CREATED]->(c:Comment) RETURN COUNT(c) AS count",
        "gql": "MATCH (u:User{name:'Charlie'})-[r:CREATED]->(c:Comment) RETURN COUNT(c) AS `count`"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.release_date < date('2000-01-01') AND m.popularity IS NOT NULL RETURN m ORDER BY m.popularity DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.release_date < date('2000-01-01') AND m.popularity IS NOT NULL RETURN m ORDER BY m.popularity DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank = \"CIMB Bank Berhad\" RETURN DISTINCT e",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank = \"CIMB Bank Berhad\" RETURN DISTINCT e"
    },
    {
        "cypher": "MATCH p=(a:Report{report_id:'9301481d98615f874763a17d18e2dc92'})-[*]->(d:Categories{category_id:'b1d13c8b6874949821d038a8a71379d1'}) RETURN count(p)",
        "gql": "MATCH (a:Report{report_id:'9301481d98615f874763a17d18e2dc92'})-[]->{1,}(d:Categories{category_id:'b1d13c8b6874949821d038a8a71379d1'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (a:Author{last_name:'Dunajski'})-[*]->(d:Categories{category_id:'088fbf884bd7c6533956a45531b362b7'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Author{last_name:'Dunajski'})-[]->{1,}(d:Categories{category_id:'088fbf884bd7c6533956a45531b362b7'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (me:Me)-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet)<-[:POSTS]-(user:User) RETURN user.screen_name AS retweeted_user",
        "gql": "MATCH (me:Me)-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet)<-[:POSTS]-(user:User) RETURN user.screen_name AS retweeted_user"
    },
    {
        "cypher": "MATCH (o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(c:Category) WITH o, COUNT(DISTINCT c.categoryID) AS categoryCount WHERE categoryCount >= 3 RETURN o.orderID, o.orderDate, o.shipName, o.shipCity, o.shipCountry ORDER BY o.orderDate LIMIT 5",
        "gql": "MATCH (o:`Order`)-[:ORDERS]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN o, COUNT(c.categoryID) AS categoryCount NEXT RETURN o.orderID, o.orderDate, o.shipName, o.shipCity, o.shipCountry ORDER BY o.orderDate LIMIT 5"
    },
    {
        "cypher": "MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE v.runtime < 50 RETURN v.title, v.runtime ORDER BY v.runtime ASC LIMIT 3",
        "gql": "MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'}) WHERE v.runtime < 50 RETURN v.title, v.runtime ORDER BY v.runtime ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.isPublic = true RETURN DISTINCT c.name",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.isPublic = true RETURN DISTINCT c.name"
    },
    {
        "cypher": "MATCH (d:Person)-[:DIRECTED]->(m:Movie) WHERE m.released > 2005 WITH d, count(m) AS num_movies ORDER BY num_movies DESC LIMIT 3 RETURN d.name AS director, num_movies",
        "gql": "MATCH (d:Person)-[:DIRECTED]->(m:Movie) WHERE m.released > 2005 RETURN d, count(m) AS num_movies ORDER BY num_movies DESC LIMIT 3 NEXT RETURN d.name AS director, num_movies"
    },
    {
        "cypher": "MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN COUNT(DISTINCT b) AS numberOfBusinessesReviewed",
        "gql": "MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN COUNT(DISTINCT b) AS numberOfBusinessesReviewed"
    },
    {
        "cypher": "MATCH (s:Stream) RETURN s ORDER BY s.createdAt ASC LIMIT 5",
        "gql": "MATCH (s:Stream) RETURN s ORDER BY s.createdAt ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN s.name AS stream, s.followers AS followers ORDER BY followers DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN s.name AS stream, s.followers AS followers ORDER BY followers DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Actor) WHERE a.born IS NOT NULL RETURN a.name, a.born ORDER BY a.born ASC LIMIT 5",
        "gql": "MATCH (a:Actor) WHERE a.born IS NOT NULL RETURN a.name, a.born ORDER BY a.born ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (e:Employee) WHERE e.Employee_Name = \"Armani\" RETURN e.Employee_Name, e.Role_Code, e.Date_of_Birth",
        "gql": "MATCH (e:Employee) WHERE e.Employee_Name = \"Armani\" RETURN e.Employee_Name, e.Role_Code, e.Date_of_Birth"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.followers > 500000 RETURN COUNT(DISTINCT g.name) AS unique_games",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.followers > 500000 RETURN COUNT(DISTINCT g.name) AS unique_games"
    },
    {
        "cypher": "MATCH (n:RefLocation) WHERE n.Location_Name = \"Canada\" RETURN n.Location_Code",
        "gql": "MATCH (n:RefLocation) WHERE n.Location_Name = \"Canada\" RETURN n.Location_Code"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment > 0.8 RETURN DISTINCT o.name",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment > 0.8 RETURN DISTINCT o.name"
    },
    {
        "cypher": "MATCH (p:Product {productName: 'Chai'})<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer) RETURN c.companyName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5",
        "gql": "MATCH (p:`Product`{productName:'Chai'})<-[:ORDERS]-(o:`Order`)<-[:PURCHASED]-(c:Customer) RETURN c.companyName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (:Customer)-[p:PURCHASED]->(a:Article)-[:VARIANT_OF]->(pr:Product {productTypeName: \"Jacket\"}) RETURN pr.prodName, COUNT(p) AS purchaseCount ORDER BY purchaseCount DESC LIMIT 1",
        "gql": "MATCH (:Customer)-[p:PURCHASED]->(a:Article)-[:VARIANT_OF]->(pr:`Product`{productTypeName:\"Jacket\"}) RETURN pr.prodName, COUNT(p) AS purchaseCount ORDER BY purchaseCount DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Address)<-[:registered_address]-(e:Entity) WITH a, COUNT(e) AS entityCount WHERE entityCount > 1 RETURN a.address AS Address, entityCount",
        "gql": "MATCH (a:Address)<-[:registered_address]-(e:Entity) RETURN a, COUNT(e) AS entityCount NEXT RETURN a.address AS Address, entityCount"
    },
    {
        "cypher": "MATCH (a:Article{comments:'26 pages, revised, to appear in Advances in Cryptology -- Asiacrypt   2005'})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{comments:'26 pages, revised, to appear in Advances in Cryptology -- Asiacrypt   2005'})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: \"United States of America\"}) RETURN o.name AS BusinessName, o.revenue AS Revenue ORDER BY o.revenue DESC LIMIT 1",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: \"United States of America\"}) RETURN o.name AS BusinessName, o.revenue AS Revenue ORDER BY o.revenue DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (b:Business) RETURN count(b)",
        "gql": "MATCH (b:Business) RETURN count(b)"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.amount > 1000000 AND f.originator_bank = \"CIMB Bank Berhad\" MATCH (e:Entity)-[:FILED]->(f) RETURN e.name",
        "gql": "MATCH (f:Filing) WHERE f.amount > 1000000 AND f.originator_bank = \"CIMB Bank Berhad\" MATCH (e:Entity)-[:FILED]->(f) RETURN e.name"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality < 0.1 RETURN c.name",
        "gql": "MATCH (c:Character) WHERE c.centrality < 0.1 RETURN c.name"
    },
    {
        "cypher": "MATCH (m:Member) RETURN m.Card_Number, m.Name, m.Hometown ORDER BY m.Level DESC",
        "gql": "MATCH (m:Member) RETURN m.Card_Number, m.Name, m.Hometown ORDER BY m.Level DESC"
    },
    {
        "cypher": "MATCH (documents:Documents) RETURN count(*)",
        "gql": "MATCH (documents:Documents) RETURN count(*)"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.louvain = 5 AND c.pagerank < 2 RETURN c",
        "gql": "MATCH (c:Character) WHERE c.louvain = 5 AND c.pagerank < 2 RETURN c"
    },
    {
        "cypher": "MATCH (n:Report) WHERE n.report_id = 'd4a4409b7e8a77f4894c998a04162257' OR n.report_no IS NOT NULL RETURN DISTINCT n.report_no AS report_no",
        "gql": "MATCH (n:Report) WHERE n.report_id = 'd4a4409b7e8a77f4894c998a04162257' OR n.report_no IS NOT NULL RETURN DISTINCT n.report_no AS report_no"
    },
    {
        "cypher": "MATCH (o:Order)-[:ORDERS]->(p:Product) WHERE o.orderDate > '1997-01-01' RETURN p.productName AS productName, o.orderDate AS orderDate",
        "gql": "MATCH (o:`Order`)-[:ORDERS]->(p:`Product`) WHERE o.orderDate > '1997-01-01' RETURN p.productName AS productName, o.orderDate AS orderDate"
    },
    {
        "cypher": "MATCH (actor:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Comedy' WITH DISTINCT actor MATCH (actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Drama' WITH DISTINCT actor.name AS actorName RETURN actorName",
        "gql": "MATCH (actor:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Comedy' MATCH (actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Drama' RETURN DISTINCT actor NEXT RETURN actorName"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE abs(toFloat(f.originator_lng) - toFloat(f.beneficiary_lng)) <= 10 WITH DISTINCT f RETURN count(f) AS totalFilings",
        "gql": "MATCH (f:Filing) WHERE f.originator_lng <= 10 RETURN DISTINCT f NEXT RETURN count(f) AS totalFilings"
    },
    {
        "cypher": "MATCH p=(a:DOI{name:'10.1007/PL00005532'})-[*]->(d:DOI{name:'10.1016/S0040-9383(00)00015-X'}) RETURN count(p)",
        "gql": "MATCH (a:DOI{name:'10.1007/PL00005532'})-[]->{1,}(d:DOI{name:'10.1016/S0040-9383(00)00015-X'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (r:Region)-[:AFFECTS]-(s:Storm) WHERE s.Number_Deaths >= 10 RETURN r.Region_name",
        "gql": "MATCH (r:Region)-[:AFFECTS]-(s:Storm) WHERE s.Number_Deaths >= 10 RETURN r.Region_name"
    },
    {
        "cypher": "MATCH (n:DOI) MATCH (m:Article) RETURN n.name, m.abstract LIMIT 8",
        "gql": "MATCH (n:DOI) MATCH (m:Article) RETURN n.name, m.`abstract` LIMIT 8"
    },
    {
        "cypher": "MATCH (g:Gymnast) RETURN avg(g.Horizontal_Bar_Points)",
        "gql": "MATCH (g:Gymnast) RETURN avg(g.Horizontal_Bar_Points)"
    },
    {
        "cypher": "MATCH (f:Faculty) WHERE f.Rank = \"Professor\" AND f.Building = \"NEB\" RETURN f.Room",
        "gql": "MATCH (f:Faculty) WHERE f.Rank = \"Professor\" AND f.Building = \"NEB\" RETURN f.Room"
    },
    {
        "cypher": "MATCH (c:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Drama'}) RETURN c.name AS company, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3",
        "gql": "MATCH (c:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Drama'}) RETURN c.name AS company, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Station) RETURN s.Name, s.Location ORDER BY s.Annual_entry_exit, s.Annual_interchanges",
        "gql": "MATCH (s:Station) RETURN s.Name, s.Location ORDER BY s.Annual_entry_exit, s.Annual_interchanges"
    },
    {
        "cypher": "MATCH (b:Branch) WHERE b.Open_year = '2011' OR b.City = 'London' RETURN min(b.Membership_amount), max(b.Membership_amount)",
        "gql": "MATCH (b:Branch) WHERE b.Open_year = '2011' OR b.City = 'London' RETURN min(b.Membership_amount), max(b.Membership_amount)"
    },
    {
        "cypher": "MATCH (a:Answer) WHERE a.score = 1 AND a.is_accepted = true RETURN a",
        "gql": "MATCH (a:Answer) WHERE a.score = 1 AND a.is_accepted = true RETURN a"
    },
    {
        "cypher": "MATCH (r:Region) WHERE r.Region_name <> 'Denmark' RETURN r.Region_name",
        "gql": "MATCH (r:Region) WHERE r.Region_name <> 'Denmark' RETURN r.Region_name"
    },
    {
        "cypher": "MATCH (p:Person)-[:FOLLOWS]->(actor:Person) WITH actor, count(p) AS followers ORDER BY followers DESC LIMIT 3 RETURN actor.name, followers",
        "gql": "MATCH (p:Person)-[:FOLLOWS]->(actor:Person) RETURN actor, count(p) AS followers ORDER BY followers DESC LIMIT 3 NEXT RETURN actor.name, followers"
    },
    {
        "cypher": "MATCH (p:paper)-[:paper_in_venue]->(c:conference {name: 'ACL'}) MATCH (p)-[:paper_in_domain]->(:domain {name:'Machine Translation'}) RETURN p.name",
        "gql": "MATCH (p:paper)-[:paper_in_venue]->(c:conference {name: 'ACL'}) MATCH (p)-[:paper_in_domain]->(:domain {name:'Machine Translation'}) RETURN p.name"
    },
    {
        "cypher": "MATCH (r:Role) RETURN r.role_code",
        "gql": "MATCH (r:Role) RETURN r.role_code"
    },
    {
        "cypher": "MATCH (ref_template_types:Ref_Template_Types) RETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "gql": "MATCH (ref_template_types:Ref_Template_Types) RETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description"
    },
    {
        "cypher": "MATCH (a:Keyword{key_id:'72e4f3fc2930bd3a0a7730a664d069d6'})-[*]->(d:Author{author_id:'befdd60b44b9cd4d5ffc084ce31d92d4'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Keyword{key_id:'72e4f3fc2930bd3a0a7730a664d069d6'})-[]->{1,}(d:Author{author_id:'befdd60b44b9cd4d5ffc084ce31d92d4'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection) WITH m, count(c) AS num_collections WHERE num_collections > 1 RETURN m.title AS MovieTitle, num_collections ORDER BY num_collections DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection) RETURN m, count(c) AS num_collections NEXT RETURN m.title AS MovieTitle, num_collections ORDER BY num_collections DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (courses:Courses) RETURN count(*)",
        "gql": "MATCH (courses:Courses) RETURN count(*)"
    },
    {
        "cypher": "MATCH (stadium:stadium) RETURN avg(stadium.capacity),max(stadium.capacity)",
        "gql": "MATCH (stadium:stadium) RETURN avg(stadium.capacity),max(stadium.capacity)"
    },
    {
        "cypher": "MATCH (alice:User {name: 'Alice'})-[:FRIENDS_WITH]->(friend:User) RETURN friend.name AS name",
        "gql": "MATCH (alice:User {name: 'Alice'})-[:FRIENDS_WITH]->(friend:User) RETURN friend.name AS name"
    },
    {
        "cypher": "MATCH (p:Person)-[:CREW_FOR {job: 'Director'}]->(m:Movie) WITH p, avg(m.average_vote) AS avg_vote RETURN p.name AS director, avg_vote ORDER BY avg_vote DESC LIMIT 3",
        "gql": "MATCH (p:Person)-[:CREW_FOR{job:'Director'}]->(m:Movie) RETURN p, avg(m.average_vote) AS avg_vote NEXT RETURN p.name AS director, avg_vote ORDER BY avg_vote DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.article_id='603207' RETURN m.category_id",
        "gql": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.article_id='603207' RETURN m.category_id"
    },
    {
        "cypher": "MATCH (a:Article{comments:'no comments'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Article{comments:'no comments'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (o:Organization {name: \"Accenture\"})<-[:MENTIONS]-(a:Article) WITH avg(a.sentiment) AS averageSentiment RETURN averageSentiment",
        "gql": "MATCH (o:Organization{name:\"Accenture\"})<-[:MENTIONS]-(a:Article) RETURN avg(a.sentiment) AS averageSentiment NEXT RETURN averageSentiment"
    },
    {
        "cypher": "MATCH (u:User)-[:POSTS]->(t:Tweet)-[:RETWEETS]->(original:Tweet)-[:MENTIONS]->(m:Me {screen_name: 'neo4j'}) RETURN u.screen_name LIMIT 3",
        "gql": "MATCH (u:User)-[:POSTS]->(t:Tweet)-[:RETWEETS]->(original:Tweet)-[:MENTIONS]->(m:Me {screen_name: 'neo4j'}) RETURN u.screen_name LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre) WITH g, count(p) AS packagesCount ORDER BY packagesCount DESC RETURN g.name AS Genre, packagesCount LIMIT 3",
        "gql": "MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre) RETURN g, count(p) AS packagesCount ORDER BY packagesCount DESC NEXT RETURN g.name AS Genre, packagesCount LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article {prodName: 'Queen Sweater'})-[:VARIANT_OF]->(p:Product) RETURN p.garmentGroupName",
        "gql": "MATCH (a:Article{prodName:'Queen Sweater'})-[:VARIANT_OF]->(p:`Product`) RETURN p.garmentGroupName"
    },
    {
        "cypher": "MATCH (a:Answer)-[:ANSWERED]->(:Question) RETURN a ORDER BY a.score DESC LIMIT 5",
        "gql": "MATCH (a:Answer)-[:ANSWERED]->(:Question) RETURN a ORDER BY a.score DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (d:Detention) RETURN DISTINCT d.detention_type_code",
        "gql": "MATCH (d:Detention) RETURN DISTINCT d.detention_type_code"
    },
    {
        "cypher": "MATCH (cartoon:Cartoon) WHERE cartoon.Written_by = 'Joseph Kuhr' RETURN count(*)",
        "gql": "MATCH (cartoon:Cartoon) WHERE cartoon.Written_by = 'Joseph Kuhr' RETURN count(*)"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1PageRank = 0.15 RETURN c",
        "gql": "MATCH (c:Character) WHERE c.book1PageRank = 0.15 RETURN c"
    },
    {
        "cypher": "MATCH (e:Event) RETURN e.Name ORDER BY e.Year DESC",
        "gql": "MATCH (e:Event) RETURN e.Name ORDER BY e.`Year` DESC"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 RETURN m.title AS MovieTitle LIMIT 3",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 RETURN m.title AS MovieTitle LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Categories{specifications:'math.IT'})-[*]->(d:Keyword{name:'super-exponential growth'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Categories{specifications:'math.IT'})-[]->{1,}(d:Keyword{name:'super-exponential growth'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (n:Journal) WHERE n.journal_id <> '79942321e19994e38ad2e372af21c893' RETURN DISTINCT n.journal_id AS journal_id",
        "gql": "MATCH (n:Journal) WHERE n.journal_id <> '79942321e19994e38ad2e372af21c893' RETURN DISTINCT n.journal_id AS journal_id"
    },
    {
        "cypher": "MATCH (buyer:Organization)-[:HAS_SUPPLIER]->(supplier:Organization) MATCH (buyer)-[:IN_CITY]->(city:City)<-[:IN_CITY]->(supplier) RETURN DISTINCT buyer.name",
        "gql": "MATCH (buyer:Organization)-[:HAS_SUPPLIER]->(supplier:Organization) MATCH (buyer)-[:IN_CITY]->(city:City)<-[:IN_CITY]->(supplier) RETURN DISTINCT buyer.name"
    },
    {
        "cypher": "MATCH (r:Router {name: 'DC1-R-3'}) RETURN r.zone",
        "gql": "MATCH (r:Router {name: 'DC1-R-3'}) RETURN r.zone"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'angular'}) RETURN u",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'angular'}) RETURN u"
    },
    {
        "cypher": "MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) WHERE l.id <> 'en' RETURN m.title AS MovieTitle, l.name AS OriginalLanguage",
        "gql": "MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) WHERE l.id <> 'en' RETURN m.title AS MovieTitle, l.name AS OriginalLanguage"
    },
    {
        "cypher": "MATCH (neo:User {name: 'Neo4j'})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweetedTweet:Tweet)-[:POSTS]-(retweetedUser:User) WHERE neo.name IS NOT NULL RETURN retweetedUser.name, count(retweetedTweet) AS retweets ORDER BY retweets DESC LIMIT 3",
        "gql": "MATCH (neo:User {name: 'Neo4j'})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweetedTweet:Tweet)-[:POSTS]-(retweetedUser:User) WHERE neo.name IS NOT NULL RETURN retweetedUser.name, count(retweetedTweet) AS retweets ORDER BY retweets DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (singer:singer) WHERE singer.age > 20 RETURN DISTINCT singer.country",
        "gql": "MATCH (singer:singer) WHERE singer.age > 20 RETURN DISTINCT singer.country"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.label  IS NOT NULL AND n.cluster > 10 RETURN n.label AS label, n.cluster AS cluster ORDER BY cluster DESC",
        "gql": "MATCH (n:Topic) WHERE n.label  IS NOT NULL AND n.cluster > 10 RETURN n.label AS label, n.cluster AS cluster ORDER BY cluster DESC"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United States'}) WHERE f.amount < 500000 RETURN count(f) AS NumberOfFilings",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United States'}) WHERE f.amount < 500000 RETURN count(f) AS NumberOfFilings"
    },
    {
        "cypher": "MATCH (i:Intermediary) RETURN DISTINCT i.countries AS Countries",
        "gql": "MATCH (i:Intermediary) RETURN DISTINCT i.countries AS Countries"
    },
    {
        "cypher": "MATCH (n:DocumentsToBeDestroyed) RETURN DISTINCT n.Destroyed_by_Employee_ID",
        "gql": "MATCH (n:DocumentsToBeDestroyed) RETURN DISTINCT n.Destroyed_by_Employee_ID"
    },
    {
        "cypher": "MATCH (c:Campus) WHERE c.Year = 1958 RETURN c.Campus",
        "gql": "MATCH (c:Campus) WHERE c.`Year` = 1958 RETURN c.Campus"
    },
    {
        "cypher": "MATCH (n:Author {author_id:'ee24bab93b9531431f442226dd453745'}) RETURN n",
        "gql": "MATCH (n:Author {author_id:'ee24bab93b9531431f442226dd453745'}) RETURN n"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.imdbVotes ORDER BY m.imdbVotes DESC LIMIT 5",
        "gql": "MATCH (m:Movie) RETURN m.title, m.imdbVotes ORDER BY m.imdbVotes DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Categories{specifications:'cs.CC'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Categories{specifications:'cs.CC'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (n:User {name: 'Neo4j'})-[:FOLLOWS]->(m:User {location: 'Sweden'}) RETURN m.screen_name",
        "gql": "MATCH (n:User {name: 'Neo4j'})-[:FOLLOWS]->(m:User {location: 'Sweden'}) RETURN m.screen_name"
    },
    {
        "cypher": "MATCH (app:Application {name: 'crm'})-[:LISTENS]->(port:Port) RETURN port.port AS Port",
        "gql": "MATCH (app:Application {name: 'crm'})-[:LISTENS]->(port:Port) RETURN port.port AS Port"
    },
    {
        "cypher": "MATCH (f:Farm) RETURN COUNT(*)",
        "gql": "MATCH (f:Farm) RETURN COUNT(*)"
    },
    {
        "cypher": "MATCH (n:DOI) MATCH (m:DOI) RETURN n.doi_id, m.doi_id LIMIT 8",
        "gql": "MATCH (n:DOI) MATCH (m:DOI) RETURN n.doi_id, m.doi_id LIMIT 8"
    },
    {
        "cypher": "MATCH (a:Article {prodName: 'Spice Girl 3 p Hipster'})-[:VARIANT_OF]->(p:Product) RETURN p.productTypeName",
        "gql": "MATCH (a:Article{prodName:'Spice Girl 3 p Hipster'})-[:VARIANT_OF]->(p:`Product`) RETURN p.productTypeName"
    },
    {
        "cypher": "MATCH (u:User {display_name: 'Anu'})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) RETURN t.name AS tag_name",
        "gql": "MATCH (u:User {display_name: 'Anu'})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) RETURN t.name AS tag_name"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order) WITH c, count(o) AS orderCount WHERE orderCount > 5 MATCH (c)-[:PURCHASED]->(:Order)-[:ORDERS]->(p:Product) RETURN avg(toFloat(p.unitPrice)) AS averageUnitPrice",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`) RETURN c, count(o) AS orderCount NEXT MATCH (c)-[:PURCHASED]->(:`Order`)-[:ORDERS]->(p:`Product`) RETURN avg(p.unitPrice) AS averageUnitPrice"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)<-[:REPLY_TO]-(reply:Tweet) RETURN reply ORDER BY reply.created_at ASC LIMIT 3",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)<-[:REPLY_TO]-(reply:Tweet) RETURN reply ORDER BY reply.created_at ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Article{abstract:'  In this article we study the interface generated by the collision between two cristals growing layer by layer on a one-dimensional substrate through random decomposition of particles. We relate this interface with the notion of beta-path in an equivalent directed polymer model and, by using asymptotics results from Baik and Rains (2000) and some hydrodynamic tools introduced by Cator and Groeenenboon (2005), we derive a law of large numbers for such a path and obtain some bounds for its fluctuations. '})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{`abstract`:'  In this article we study the interface generated by the collision between two cristals growing layer by layer on a one-dimensional substrate through random decomposition of particles. We relate this interface with the notion of beta-path in an equivalent directed polymer model and, by using asymptotics results from Baik and Rains (2000) and some hydrodynamic tools introduced by Cator and Groeenenboon (2005), we derive a law of large numbers for such a path and obtain some bounds for its fluctuations. '})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.abstract='  The classical level set method, which represents the boundary of the unknown geometry as the zero-level set of a function, has been shown to be very effective in solving shape optimization problems. The present work addresses the issue of using a level set representation when there are simple geometrical and topological constraints. We propose a logarithmic barrier penalty which acts to enforce the constraints, leading to an approximate solution to shape design problems. ' RETURN m.key_id",
        "gql": "MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.`abstract` = '  The classical level set method, which represents the boundary of the unknown geometry as the zero-level set of a function, has been shown to be very effective in solving shape optimization problems. The present work addresses the issue of using a level set representation when there are simple geometrical and topological constraints. We propose a logarithmic barrier penalty which acts to enforce the constraints, leading to an approximate solution to shape design problems. ' RETURN m.key_id"
    },
    {
        "cypher": "MATCH (d:Department) WHERE d.Division = \"AS\" OR (d.Division = \"EN\" AND d.Building = \"NEB\") RETURN DISTINCT d.DName",
        "gql": "MATCH (d:Department) WHERE d.Division = \"AS\" OR (d.Division = \"EN\" AND d.Building = \"NEB\") RETURN DISTINCT d.DName"
    },
    {
        "cypher": "MATCH (p:ProductionCompany {name: 'Pixar Animation Studios'})<-[:PRODUCED_BY]-(m:Movie) WHERE m.budget > 100000000 RETURN m.title AS MovieTitle, m.budget AS Budget ORDER BY m.budget DESC LIMIT 3",
        "gql": "MATCH (p:ProductionCompany {name: 'Pixar Animation Studios'})<-[:PRODUCED_BY]-(m:Movie) WHERE m.budget > 100000000 RETURN m.title AS MovieTitle, m.budget AS Budget ORDER BY m.budget DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title <> 'The Gervais-Neveu-Felder equation for the Jordanian quasi-Hopf   U_{h;y}(sl(2)) algebra' RETURN DISTINCT n.abstract AS abstract",
        "gql": "MATCH (n:Article) WHERE n.title <> 'The Gervais-Neveu-Felder equation for the Jordanian quasi-Hopf   U_{h;y}(sl(2)) algebra' RETURN DISTINCT n.`abstract` AS `abstract`"
    },
    {
        "cypher": "MATCH (n:Article) MATCH (m:Author) RETURN n.title, m.last_name LIMIT 8",
        "gql": "MATCH (n:Article) MATCH (m:Author) RETURN n.title, m.last_name LIMIT 8"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:INTERACTS_WITH]->(user:User) RETURN user.screen_name, COUNT(*) AS interaction_count ORDER BY interaction_count DESC LIMIT 5",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:INTERACTS_WITH]->(user:User) RETURN user.screen_name, COUNT(*) AS interaction_count ORDER BY interaction_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) -[:PUBLISHED_IN]->(m:Journal) WHERE m.comments < date('2020-12-31') RETURN avg(m.name) AS avg_name",
        "gql": "MATCH (n:Article) -[:PUBLISHED_IN]->(m:Journal) WHERE m.comments < date('2020-12-31') RETURN avg(m.name) AS avg_name"
    },
    {
        "cypher": "MATCH (a:UpdateDate{update_date:'2021-02-09'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:UpdateDate{update_date:'2021-02-09'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (c:Character)-[r:INTERACTS1]->() WHERE c.community = 579 RETURN max(r.weight) AS maxWeight",
        "gql": "MATCH (c:Character)-[r:INTERACTS1]->() WHERE c.community = 579 RETURN max(r.weight) AS maxWeight"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service) MATCH (m)-[:TYPE]->(t:Type) RETURN s.name AS serviceName, t.ram AS ramUsage ORDER BY t.ram DESC LIMIT 3",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service) MATCH (m)-[:TYPE]->(t:Type) RETURN s.name AS serviceName, t.ram AS ramUsage ORDER BY t.ram DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Company) RETURN min(c.Market_Value), max(c.Market_Value), avg(c.Market_Value)",
        "gql": "MATCH (c:Company) RETURN min(c.Market_Value), max(c.Market_Value), avg(c.Market_Value)"
    },
    {
        "cypher": "MATCH (d:Person)-[:DIRECTED]->(m:Movie) WITH d, min(m.votes) AS minVotes ORDER BY minVotes LIMIT 3 RETURN d.name AS director",
        "gql": "MATCH (d:Person)-[:DIRECTED]->(m:Movie) RETURN d, min(m.votes) AS minVotes ORDER BY minVotes LIMIT 3 NEXT RETURN d.name AS director"
    },
    {
        "cypher": "MATCH (c:Company)-[:OWNS]->(g:GasStation) RETURN g.Location, g.Representative_Name ORDER BY c.Assets_billion DESC LIMIT 3",
        "gql": "MATCH (c:Company)-[:OWNS]->(g:GasStation) RETURN g.Location, g.Representative_Name ORDER BY c.Assets_billion DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question) WHERE NOT EXISTS ((q)-[:ANSWERED]->()) RETURN q",
        "gql": "MATCH (q:Question) WHERE NOT EXISTS ((q)-[:ANSWERED]->()) RETURN q"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Dota 2'}) RETURN s.name AS stream_name, s.followers AS followers ORDER BY s.followers DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Dota 2'}) RETURN s.name AS stream_name, s.followers AS followers ORDER BY s.followers DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (b:Business {state: 'MT'}) RETURN b LIMIT 3",
        "gql": "MATCH (b:Business {state: 'MT'}) RETURN b LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person) WHERE p.born < 1960 RETURN p.name",
        "gql": "MATCH (p:Person) WHERE p.born < 1960 RETURN p.name"
    },
    {
        "cypher": "MATCH (a:Topic{cluster:'11'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Topic{cluster:'11'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) WITH p, size(apoc.coll.toSet(collect(r.roles))) AS roleDiversity RETURN p.name AS actor, roleDiversity ORDER BY roleDiversity DESC LIMIT 3",
        "gql": "MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN p, size(r.roles) AS roleDiversity NEXT RETURN p.name AS actor, roleDiversity ORDER BY roleDiversity DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: \"Seattle\"}) MATCH (o)-[:HAS_CEO]->(p:Person) RETURN o.name AS Organization, p.name AS CEO",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: \"Seattle\"}) MATCH (o)-[:HAS_CEO]->(p:Person) RETURN o.name AS Organization, p.name AS CEO"
    },
    {
        "cypher": "MATCH (n:Author) MATCH (m:Topic) RETURN n.last_name, m.cluster LIMIT 8",
        "gql": "MATCH (n:Author) MATCH (m:Topic) RETURN n.last_name, m.cluster LIMIT 8"
    },
    {
        "cypher": "MATCH (s:Stream {name: 'summit1g'})<-[:CHATTER]-(u:User) RETURN u.name, count(*) AS messages ORDER BY messages DESC LIMIT 3",
        "gql": "MATCH (s:Stream {name: 'summit1g'})<-[:CHATTER]-(u:User) RETURN u.name, count(*) AS messages ORDER BY messages DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:RATED]-(u:User) WITH m, avg(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 5 RETURN m.title AS movie, avgRating",
        "gql": "MATCH (m:Movie)<-[r:RATED]-(u:User) RETURN m, avg(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 5 NEXT RETURN m.title AS movie, avgRating"
    },
    {
        "cypher": "MATCH (cersei:Character {name: \"Cersei-Lannister\"})-[:INTERACTS1]->(other:Character) RETURN other.name, other.book1PageRank ORDER BY other.book1PageRank DESC",
        "gql": "MATCH (cersei:Character {name: \"Cersei-Lannister\"})-[:INTERACTS1]->(other:Character) RETURN other.name, other.book1PageRank ORDER BY other.book1PageRank DESC"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' WITH e, COUNT(f) AS num_filings ORDER BY num_filings DESC LIMIT 5 RETURN e.name AS entity_name, num_filings",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' RETURN e, COUNT(f) AS num_filings ORDER BY num_filings DESC LIMIT 5 NEXT RETURN e.name AS entity_name, num_filings"
    },
    {
        "cypher": "MATCH (p:Publication) WHERE p.Price > 5000000 RETURN DISTINCT p.Publisher",
        "gql": "MATCH (p:Publication) WHERE p.Price > 5000000 RETURN DISTINCT p.Publisher"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'}) WHERE p.unitPrice > 75 RETURN p.productName, p.unitPrice",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Confections'}) WHERE p.unitPrice > 75 RETURN p.productName, p.unitPrice"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WITH g, count(m) as movie_count ORDER BY movie_count DESC LIMIT 5 RETURN g.name as genre, movie_count",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 5 NEXT RETURN g.name AS genre, movie_count"
    },
    {
        "cypher": "MATCH (b:Book) RETURN b.Title, b.Issues",
        "gql": "MATCH (b:Book) RETURN b.Title, b.Issues"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1048 OR n.article_id < 1008 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1048 OR n.article_id < 1008 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (a:Article {title:'Log mirror symmetry and local mirror symmetry'})-[:PUBLISHED_IN {meta: '220'}]->(c:Journal)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article {title:'Log mirror symmetry and local mirror symmetry'})-[:PUBLISHED_IN {meta: '220'}]->(c:Journal)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (a:Article)-[:VARIANT_OF]->(p:Product) WHERE a.prodName = 'Skinny R.W Chic' RETURN p.productTypeName",
        "gql": "MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`) WHERE a.prodName = 'Skinny R.W Chic' RETURN p.productTypeName"
    },
    {
        "cypher": "MATCH (a:Article {articleId: 663010006}) RETURN a.colourGroupName",
        "gql": "MATCH (a:Article {articleId: 663010006}) RETURN a.colourGroupName"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank = 'The Bank of New York Mellon Corp.' RETURN e LIMIT 3",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank = 'The Bank of New York Mellon Corp.' RETURN e LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '641-672'}]->(m) WHERE n.title='Hyper-K{\\\"a}hler Hierarchies and their twistor theory' RETURN m.name",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '641-672'}]->(m) WHERE n.title='Hyper-K{\\\"a}hler Hierarchies and their twistor theory' RETURN m.name"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.comments IS NULL RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.comments IS NULL RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'}) RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 3",
        "gql": "MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Dairy Products'}) RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream) RETURN s ORDER BY s.followers DESC LIMIT 5",
        "gql": "MATCH (s:Stream) RETURN s ORDER BY s.followers DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Keyword{key_id:'4969a8e0646cdb8842726781e7637625'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Keyword{key_id:'4969a8e0646cdb8842726781e7637625'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person) WHERE o.nbrEmployees > 1000 RETURN o.name AS organization, p.name AS board_member",
        "gql": "MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person) WHERE o.nbrEmployees > 1000 RETURN o.name AS organization, p.name AS board_member"
    },
    {
        "cypher": "MATCH (router:Router {name: 'DC1-R-2'})-[:ROUTES]->(interface:Interface) RETURN count(interface) AS numberOfInterfaces",
        "gql": "MATCH (router:Router {name: 'DC1-R-2'})-[:ROUTES]->(interface:Interface) RETURN count(interface) AS numberOfInterfaces"
    },
    {
        "cypher": "MATCH (p:Process {pid: 8966})-[:DEPENDS_ON]->(s:Service) RETURN s.name",
        "gql": "MATCH (p:Process {pid: 8966})-[:DEPENDS_ON]->(s:Service) RETURN s.name"
    },
    {
        "cypher": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie) WHERE m.average_vote > 7.5 WITH p, count(m) AS movieCount WHERE movieCount >= 3 RETURN p.name",
        "gql": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie) WHERE m.average_vote > 7.5 RETURN p, count(m) AS movieCount NEXT RETURN p.name"
    },
    {
        "cypher": "MATCH (e:Editor) RETURN COUNT(e)",
        "gql": "MATCH (e:Editor) RETURN COUNT(e)"
    },
    {
        "cypher": "MATCH (n:Company) RETURN avg(n.Profits_billion) as averageProfitInBillions",
        "gql": "MATCH (n:Company) RETURN avg(n.Profits_billion) as averageProfitInBillions"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.title='Rational points on compactifications of semi-simple algebraic groups' RETURN m.key_id",
        "gql": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.title='Rational points on compactifications of semi-simple algebraic groups' RETURN m.key_id"
    },
    {
        "cypher": "MATCH (p:Article) WHERE NOT EXISTS ((p)-[:HAS_DOI]->()) RETURN p LIMIT 5",
        "gql": "MATCH (p:Article) WHERE NOT EXISTS ((p)-[:HAS_DOI]->()) RETURN p LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.runtime ORDER BY m.runtime ASC LIMIT 5",
        "gql": "MATCH (m:Movie) RETURN m.title, m.runtime ORDER BY m.runtime ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) WITH subsidiary ORDER BY subsidiary.revenue DESC LIMIT 1 RETURN subsidiary.name",
        "gql": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN subsidiary ORDER BY subsidiary.revenue DESC LIMIT 1 NEXT RETURN subsidiary.name"
    },
    {
        "cypher": "MATCH (n:Categories), (:Keyword {key_id: '1af2a68bafbcdcb0f3329c5793163154'}) WHERE NOT (n) --> (:Keyword) RETURN n.category_id",
        "gql": "MATCH (n:Categories), (:Keyword {key_id: '1af2a68bafbcdcb0f3329c5793163154'}) WHERE NOT (n) --> (:Keyword) RETURN n.category_id"
    },
    {
        "cypher": "MATCH (b:Branch) RETURN b.Name ORDER BY b.Membership_amount DESC LIMIT 3",
        "gql": "MATCH (b:Branch) RETURN b.Name ORDER BY b.Membership_amount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Character {name: 'Benerro'}) MATCH (b)--(c:Character) WHERE c.degree < 5 RETURN DISTINCT c.name",
        "gql": "MATCH (b:Character {name: 'Benerro'}) MATCH (b)--(c:Character) WHERE c.degree < 5 RETURN DISTINCT c.name"
    },
    {
        "cypher": "MATCH (r:Role) RETURN count(r)",
        "gql": "MATCH (r:Role) RETURN count(r)"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.closed_date IS NOT NULL RETURN e.name AS entity_name, e.closed_date AS closed_date",
        "gql": "MATCH (e:Entity) WHERE e.closed_date IS NOT NULL RETURN e.name AS entity_name, e.closed_date AS closed_date"
    },
    {
        "cypher": "MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p) RETURN DISTINCT p.name",
        "gql": "MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p) RETURN DISTINCT p.name"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.popularity > 20 RETURN g.name AS genre ORDER BY m.popularity DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.popularity > 20 RETURN g.name AS genre ORDER BY m.popularity DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T2:Technician) RETURN T2.Name, COUNT(*)",
        "gql": "MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T2:Technician) RETURN T2.Name, COUNT(*)"
    },
    {
        "cypher": "MATCH (s:Student) RETURN s.cell_mobile_number, s.email_address",
        "gql": "MATCH (s:Student) RETURN s.cell_mobile_number, s.email_address"
    },
    {
        "cypher": "MATCH (p:Person) WHERE p.Height > 200 OR p.Height < 190 RETURN p.Name",
        "gql": "MATCH (p:Person) WHERE p.Height > 200 OR p.Height < 190 RETURN p.Name"
    },
    {
        "cypher": "MATCH (r:Review)-[:REVIEWS]->(b:Business) WITH b.state AS state, avg(r.stars) AS averageRating ORDER BY averageRating DESC RETURN state, averageRating LIMIT 1",
        "gql": "MATCH (r:Review)-[:REVIEWS]->(b:Business) RETURN b.state AS state, avg(r.stars) AS averageRating ORDER BY averageRating DESC NEXT RETURN state, averageRating LIMIT 1"
    },
    {
        "cypher": "MATCH (u:User)<-[:MENTIONS]-(t:Tweet) RETURN u.name AS user, count(t) AS mentions ORDER BY mentions DESC LIMIT 5",
        "gql": "MATCH (u:User)<-[:MENTIONS]-(t:Tweet) RETURN u.name AS user, count(t) AS mentions ORDER BY mentions DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (d:Detention) RETURN d.detention_summary",
        "gql": "MATCH (d:Detention) RETURN d.detention_summary"
    },
    {
        "cypher": "MATCH (battle:battle) WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I' RETURN battle.name",
        "gql": "MATCH (battle:battle) WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I' RETURN battle.name"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_SUPPLIER]->(s:Organization) WITH o, COUNT(s) AS supplierCount ORDER BY supplierCount DESC LIMIT 1 MATCH (o)-[:IN_CITY]->(c:City) RETURN c.name AS city, supplierCount",
        "gql": "MATCH (o:Organization)-[:HAS_SUPPLIER]->(s:Organization) RETURN o, COUNT(s) AS supplierCount ORDER BY supplierCount DESC LIMIT 1 NEXT MATCH (o)-[:IN_CITY]->(c:City) RETURN c.name AS city, supplierCount"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:REVIEWED]-() WHERE r.summary = \"A solid romp\" RETURN m.title",
        "gql": "MATCH (m:Movie)<-[r:REVIEWED]-() WHERE r.summary = \"A solid romp\" RETURN m.title"
    },
    {
        "cypher": "MATCH (c:City)-[:IN_COUNTRY]->(country:Country) WITH country, count(c) AS cityCount WHERE cityCount > 1 RETURN country LIMIT 3",
        "gql": "MATCH (c:City)-[:IN_COUNTRY]->(country:Country) RETURN country, count(c) AS cityCount NEXT RETURN country LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Nurse) RETURN DISTINCT n.Name ORDER BY n.Name",
        "gql": "MATCH (n:Nurse) RETURN DISTINCT n.Name ORDER BY n.Name"
    },
    {
        "cypher": "MATCH (n:Journal) WHERE n.name = 'J.Diff.Eq' RETURN n",
        "gql": "MATCH (n:Journal) WHERE n.name = 'J.Diff.Eq' RETURN n"
    },
    {
        "cypher": "MATCH (d:Director {bornIn: 'USA'})-[:DIRECTED]->(m:Movie) WITH m ORDER BY m.imdbRating ASC LIMIT 1 RETURN m.title",
        "gql": "MATCH (d:Director{bornIn:'USA'})-[:DIRECTED]->(m:Movie) RETURN m ORDER BY m.imdbRating ASC LIMIT 1 NEXT RETURN m.title"
    },
    {
        "cypher": "MATCH (n:Article) -[wr:WRITTEN_BY]->(m) WHERE n.article_id='1013' RETURN m.affiliation",
        "gql": "MATCH (n:Article) -[wr:WRITTEN_BY]->(m) WHERE n.article_id='1013' RETURN m.affiliation"
    },
    {
        "cypher": "MATCH (e:Entity {service_provider: \"Mossack Fonseca\"}) WHERE e.company_number IS NOT NULL RETURN e.name",
        "gql": "MATCH (e:Entity {service_provider: \"Mossack Fonseca\"}) WHERE e.company_number IS NOT NULL RETURN e.name"
    },
    {
        "cypher": "MATCH (u:User)-[r:INTERACTED]->(:User) RETURN u.label AS UserLabel, sum(r.ogWeight) AS TotalOgWeight ORDER BY TotalOgWeight DESC LIMIT 5",
        "gql": "MATCH (u:User)-[r:INTERACTED]->(:User) RETURN u.label AS UserLabel, sum(r.ogWeight) AS TotalOgWeight ORDER BY TotalOgWeight DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Categories) WHERE n.specifications = 'math.AT' OR n.category_id IS NOT NULL RETURN DISTINCT n.category_id AS category_id",
        "gql": "MATCH (n:Categories) WHERE n.specifications = 'math.AT' OR n.category_id IS NOT NULL RETURN DISTINCT n.category_id AS category_id"
    },
    {
        "cypher": "MATCH (a:Adult) RETURN a.title, a.average_vote ORDER BY a.average_vote DESC LIMIT 5",
        "gql": "MATCH (a:Adult) RETURN a.title, a.average_vote ORDER BY a.average_vote DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie) RETURN p.name, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 5",
        "gql": "MATCH (p:Person)-[:CAST_FOR]->(m:Movie) RETURN p.name, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (b:Business {address: '716 N San Mateo Dr'}) RETURN b.name LIMIT 3",
        "gql": "MATCH (b:Business {address: '716 N San Mateo Dr'}) RETURN b.name LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Building) RETURN b.name ORDER BY b.Height DESC",
        "gql": "MATCH (b:Building) RETURN b.name ORDER BY b.Height DESC"
    },
    {
        "cypher": "MATCH (d:Document) WHERE d.document_status_code = \"done\" AND d.document_type_code = \"Paper\" RETURN d.document_id",
        "gql": "MATCH (d:Document) WHERE d.document_status_code = \"done\" AND d.document_type_code = \"Paper\" RETURN d.document_id"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.struck_off_date IS NOT NULL AND e.inactivation_date IS NOT NULL AND e.struck_off_date <> e.inactivation_date RETURN e",
        "gql": "MATCH (e:Entity) WHERE e.struck_off_date IS NOT NULL AND e.inactivation_date IS NOT NULL AND e.struck_off_date <> e.inactivation_date RETURN e"
    },
    {
        "cypher": "MATCH (campus:Campus) WHERE campus.County = \"Los Angeles\" RETURN campus.Campus",
        "gql": "MATCH (campus:Campus) WHERE campus.County = \"Los Angeles\" RETURN campus.Campus"
    },
    {
        "cypher": "MATCH (s:Stream {name: '9linda'})-[:PLAYS]->(g:Game) RETURN g.name",
        "gql": "MATCH (s:Stream {name: '9linda'})-[:PLAYS]->(g:Game) RETURN g.name"
    },
    {
        "cypher": "MATCH (h:Hashtag {name: 'education'})<-[:TAGS]-(t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 5",
        "gql": "MATCH (h:Hashtag {name: 'education'})<-[:TAGS]-(t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Actor) WHERE a.tmdbId IS NOT NULL AND a.imdbId IS NOT NULL RETURN a.name, a.tmdbId, a.imdbId LIMIT 5",
        "gql": "MATCH (a:Actor) WHERE a.tmdbId IS NOT NULL AND a.imdbId IS NOT NULL RETURN a.name, a.tmdbId, a.imdbId LIMIT 5"
    },
    {
        "cypher": "MATCH (n:DOI) WHERE n.name = '10.1006/jnth.2000.2616' RETURN n",
        "gql": "MATCH (n:DOI) WHERE n.name = '10.1006/jnth.2000.2616' RETURN n"
    },
    {
        "cypher": "MATCH (q:Question {title: \"Why are non-unique indexes dropped and created when restarting the server?\"}) MATCH (u:User)-[:ASKED]->(q) RETURN u.display_name",
        "gql": "MATCH (q:Question {title: \"Why are non-unique indexes dropped and created when restarting the server?\"}) MATCH (u:User)-[:ASKED]->(q) RETURN u.display_name"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.status = 'Defaulted' AND e.former_name IS NOT NULL RETURN e.name AS entity_name, e.former_name AS former_name",
        "gql": "MATCH (e:Entity) WHERE e.status = 'Defaulted' AND e.former_name IS NOT NULL RETURN e.name AS entity_name, e.former_name AS former_name"
    },
    {
        "cypher": "MATCH (david:User {name: \"David\"})-[:FOLLOWS]->(user:User) RETURN user.name AS name",
        "gql": "MATCH (david:User {name: \"David\"})-[:FOLLOWS]->(user:User) RETURN user.name AS name"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack {rack: 9})-[:HOLDS]->(machine:Machine) RETURN machine.name",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack {rack: 9})-[:HOLDS]->(machine:Machine) RETURN machine.name"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet) OPTIONAL MATCH (t)<-[:REPLY_TO]-(r:Tweet) WITH t, count(r) AS reply_count ORDER BY reply_count DESC LIMIT 5 RETURN t.text AS tweet_text, reply_count",
        "gql": "MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet) MATCH (t)<-[:REPLY_TO]-(r:Tweet) RETURN t, count(r) AS reply_count ORDER BY reply_count DESC LIMIT 5 NEXT RETURN t.text AS tweet_text, reply_count"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.title='Limit theorems for random point measures generated by cooperative   sequential adsorption' RETURN m.name",
        "gql": "MATCH (n:Article) -[ha:HAS_KEY]->(m) WHERE n.title='Limit theorems for random point measures generated by cooperative   sequential adsorption' RETURN m.name"
    },
    {
        "cypher": "MATCH (g:Gymnast) RETURN g.Total_Points AS Total_Points ORDER BY Total_Points DESC",
        "gql": "MATCH (g:Gymnast) RETURN g.Total_Points AS Total_Points ORDER BY Total_Points DESC"
    },
    {
        "cypher": "MATCH (g:Gymnast) RETURN avg(g.Horizontal_Bar_Points)",
        "gql": "MATCH (g:Gymnast) RETURN avg(g.Horizontal_Bar_Points)"
    },
    {
        "cypher": "MATCH (t:Teacher) RETURN DISTINCT t.FirstName, t.LastName",
        "gql": "MATCH (t:Teacher) RETURN DISTINCT t.FirstName, t.LastName"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Fantasy'}) MATCH (p:Person)-[:CAST_FOR]->(m) RETURN DISTINCT p.name",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Fantasy'}) MATCH (p:Person)-[:CAST_FOR]->(m) RETURN DISTINCT p.name"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name, c.book45PageRank ORDER BY c.book45PageRank DESC LIMIT 3",
        "gql": "MATCH (c:Character) RETURN c.name, c.book45PageRank ORDER BY c.book45PageRank DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:City) RETURN c.Official_Name, c.Status ORDER BY c.Population DESC LIMIT 1",
        "gql": "MATCH (c:City) RETURN c.Official_Name, c.Status ORDER BY c.Population DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Student) WHERE s.Sex = \"F\" RETURN s.LName ORDER BY s.Age DESC",
        "gql": "MATCH (s:Student) WHERE s.Sex = \"F\" RETURN s.LName ORDER BY s.Age DESC"
    },
    {
        "cypher": "MATCH (app:Application {name: 'webapp'})-[:RUNS]->(machine:Machine)-[:TYPE]->(type:Type) RETURN sum(type.ram)",
        "gql": "MATCH (app:Application {name: 'webapp'})-[:RUNS]->(machine:Machine)-[:TYPE]->(type:Type) RETURN sum(type.ram)"
    },
    {
        "cypher": "MATCH (n:CsuFee) WHERE n.Year = 2005 RETURN avg(n.CampusFee)",
        "gql": "MATCH (n:CsuFee) WHERE n.`Year` = 2005 RETURN avg(n.CampusFee)"
    },
    {
        "cypher": "MATCH (s:Station) RETURN count(s)",
        "gql": "MATCH (s:Station) RETURN count(s)"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.nbrEmployees > 500 RETURN DISTINCT country.name LIMIT 3",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.nbrEmployees > 500 RETURN DISTINCT country.name LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title = 'Failure of Brown representability in derived categories' RETURN n",
        "gql": "MATCH (n:Article) WHERE n.title = 'Failure of Brown representability in derived categories' RETURN n"
    },
    {
        "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream) WHERE s.followers > 1000000 RETURN u.name AS user, s.name AS stream ORDER BY s.followers DESC LIMIT 5",
        "gql": "MATCH (u:User)-[:MODERATOR]->(s:Stream) WHERE s.followers > 1000000 RETURN u.name AS user, s.name AS stream ORDER BY s.followers DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Product) WITH max(p.max_page_size) AS maxPageSize RETURN maxPageSize",
        "gql": "MATCH (p:`Product`) RETURN max(p.max_page_size) AS maxPageSize NEXT RETURN maxPageSize"
    },
    {
        "cypher": "MATCH (ceo:Person {name: \"Julie Spellman Sweet\"})<-[:HAS_CEO]-(org:Organization)<-[:MENTIONS]-(article:Article) RETURN article.title, article.date, article.summary ORDER BY article.date DESC LIMIT 3",
        "gql": "MATCH (ceo:Person{name:\"Julie Spellman Sweet\"})<-[:HAS_CEO]-(org:Organization)<-[:MENTIONS]-(article:Article) RETURN article.title, article.`date`, article.summary ORDER BY article.`date` DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.beneficiary_bank = 'Barclays Bank Plc' WITH e, COUNT(f) AS num_filings ORDER BY num_filings DESC LIMIT 3 RETURN e.name AS entity_name, num_filings",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.beneficiary_bank = 'Barclays Bank Plc' RETURN e, COUNT(f) AS num_filings ORDER BY num_filings DESC LIMIT 3 NEXT RETURN e.name AS entity_name, num_filings"
    },
    {
        "cypher": "MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product) RETURN p.productName AS productName",
        "gql": "MATCH (s:Supplier{country:'UK'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName AS productName"
    },
    {
        "cypher": "MATCH (rack:Rack {rack: 5})-[:HOLDS]->(switch:Switch) RETURN switch.name",
        "gql": "MATCH (rack:Rack {rack: 5})-[:HOLDS]->(switch:Switch) RETURN switch.name"
    },
    {
        "cypher": "MATCH (a:Article {prodName: 'Magnolia dress'})-[:VARIANT_OF]->(p:Product) RETURN p.garmentGroupNo",
        "gql": "MATCH (a:Article{prodName:'Magnolia dress'})-[:VARIANT_OF]->(p:`Product`) RETURN p.garmentGroupNo"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name, c.book1PageRank ORDER BY c.book1PageRank DESC LIMIT 3",
        "gql": "MATCH (c:Character) RETURN c.name, c.book1PageRank ORDER BY c.book1PageRank DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'}) RETURN q.title, q.link, q.score ORDER BY q.score DESC LIMIT 5",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'}) RETURN q.title, q.link, q.score ORDER BY q.score DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Report) WHERE n.report_id = '3fa3ec8100d88908b00d139dacdedb6a' RETURN n",
        "gql": "MATCH (n:Report) WHERE n.report_id = '3fa3ec8100d88908b00d139dacdedb6a' RETURN n"
    },
    {
        "cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN t ORDER BY t.created_at ASC LIMIT 3",
        "gql": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN t ORDER BY t.created_at ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Member) WHERE m.Membership_card = 'Black' RETURN count(m)",
        "gql": "MATCH (m:Member) WHERE m.Membership_card = 'Black' RETURN count(m)"
    },
    {
        "cypher": "MATCH (c:Category {categoryName: 'Seafood'})<-[:PART_OF]-(p:Product)<-[:ORDERS]-(o:Order) RETURN p.productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5",
        "gql": "MATCH (c:Category{categoryName:'Seafood'})<-[:PART_OF]-(p:`Product`)<-[:ORDERS]-(o:`Order`) RETURN p.productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (q:Question) WHERE size(q.text) > 500 RETURN q.title AS title, q.text AS text, q.link AS link, q.createdAt AS createdAt",
        "gql": "MATCH (q:Question) WHERE size(q.text) > 500 RETURN q.title AS title, q.text AS text, q.link AS link, q.createdAt AS createdAt"
    },
    {
        "cypher": "MATCH (u:User) WHERE u.followers > 1000 MATCH (u)-[:POSTS]->(t:Tweet) MATCH (t)-[:TAGS]->(h:Hashtag) RETURN DISTINCT h.name",
        "gql": "MATCH (u:User) WHERE u.followers > 1000 MATCH (u)-[:POSTS]->(t:Tweet) MATCH (t)-[:TAGS]->(h:Hashtag) RETURN DISTINCT h.name"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1013 OR n.article_id < 1015 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1013 OR n.article_id < 1015 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.company_type IS NOT NULL RETURN e",
        "gql": "MATCH (e:Entity) WHERE e.company_type IS NOT NULL RETURN e"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: \"Animation\"}) WITH avg(m.vote_count) AS average_vote_count RETURN average_vote_count",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:\"Animation\"}) RETURN avg(m.vote_count) AS average_vote_count NEXT RETURN average_vote_count"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.released >= '2010' RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.released >= '2010' RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (:Order)-[o:ORDERS]->(p:Product) RETURN p.productName AS productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5",
        "gql": "MATCH (:`Order`)-[o:ORDERS]->(p:`Product`) RETURN p.productName AS productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Procedure) RETURN p.Name ORDER BY p.Cost LIMIT 3",
        "gql": "MATCH (p:`Procedure`) RETURN p.Name ORDER BY p.Cost LIMIT 3"
    },
    {
        "cypher": "MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) WITH q, COUNT(c) AS comment_count ORDER BY comment_count DESC LIMIT 3 RETURN q.title AS question_title, q.link AS question_link, comment_count",
        "gql": "MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) RETURN q, COUNT(c) AS comment_count ORDER BY comment_count DESC LIMIT 3 NEXT RETURN q.title AS question_title, q.link AS question_link, comment_count"
    },
    {
        "cypher": "MATCH p=(a:Report{report_id:'42a4c65c8ac88e75fed4b8e25a71dc9a'})-[*]->(d:Author{first_name:'Randall'}) RETURN count(p)",
        "gql": "MATCH (a:Report{report_id:'42a4c65c8ac88e75fed4b8e25a71dc9a'})-[]->{1,}(d:Author{first_name:'Randall'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (d:DocumentsToBeDestroyed) RETURN d.Destroyed_by_Employee_ID, COUNT(*)",
        "gql": "MATCH (d:DocumentsToBeDestroyed) RETURN d.Destroyed_by_Employee_ID, COUNT(*)"
    },
    {
        "cypher": "MATCH (n:Keyword), (:Topic {label: 'Population Dynamics_0'}) WHERE NOT (n) --> (:Topic) RETURN n.key_id",
        "gql": "MATCH (n:Keyword), (:Topic {label: 'Population Dynamics_0'}) WHERE NOT (n) --> (:Topic) RETURN n.key_id"
    },
    {
        "cypher": "MATCH (n:Topic), (:Topic {cluster: '11'}) WHERE NOT (n) --> (:Topic) RETURN n.cluster",
        "gql": "MATCH (n:Topic), (:Topic {cluster: '11'}) WHERE NOT (n) --> (:Topic) RETURN n.cluster"
    },
    {
        "cypher": "MATCH (a:Keyword{key_id:'0e45607b74a52b79f39c242abf265272'})-[*]->(d:Author{first_name:'Jean-Francois'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Keyword{key_id:'0e45607b74a52b79f39c242abf265272'})-[]->{1,}(d:Author{first_name:'Jean-Francois'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) WHERE r.zone = 3 AND t.ram > 16 RETURN DISTINCT t.type AS machineType",
        "gql": "MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) WHERE r.zone = 3 AND t.ram > 16 RETURN DISTINCT t.type AS machineType"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.jurisdiction_description = 'Samoa' AND e.service_provider = 'Mossack Fonseca' RETURN e.name AS entity_name, e.jurisdiction_description AS jurisdiction_description, e.service_provider AS service_provider",
        "gql": "MATCH (e:Entity) WHERE e.jurisdiction_description = 'Samoa' AND e.service_provider = 'Mossack Fonseca' RETURN e.name AS entity_name, e.jurisdiction_description AS jurisdiction_description, e.service_provider AS service_provider"
    },
    {
        "cypher": "MATCH (c:Campus) WHERE c.Location = \"Northridge\" AND c.County = \"Los Angeles\" RETURN c.Campus UNION MATCH (c:Campus) WHERE c.Location = \"San Francisco\" AND c.County = \"San Francisco\" RETURN c.Campus",
        "gql": "MATCH (c:Campus) WHERE c.Location = \"Northridge\" AND c.County = \"Los Angeles\" RETURN c.Campus UNION MATCH (c:Campus) WHERE c.Location = \"San Francisco\" AND c.County = \"San Francisco\" RETURN c.Campus"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie {title: \"Titanic\"}) RETURN p.name",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie {title: \"Titanic\"}) RETURN p.name"
    },
    {
        "cypher": "MATCH (m:Movie {title: 'Toy Story'})-[:IN_GENRE]->(g:Genre) RETURN g.name AS genre",
        "gql": "MATCH (m:Movie {title: 'Toy Story'})-[:IN_GENRE]->(g:Genre) RETURN g.name AS genre"
    },
    {
        "cypher": "MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) WITH q, COUNT(c) AS comment_count ORDER BY comment_count DESC LIMIT 3 RETURN q.title AS question_title, q.link AS question_link, comment_count",
        "gql": "MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) RETURN q, COUNT(c) AS comment_count ORDER BY comment_count DESC LIMIT 3 NEXT RETURN q.title AS question_title, q.link AS question_link, comment_count"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) WITH o.name AS CompanyName, COUNT(subsidiary) AS NumberOfSubsidiaries RETURN CompanyName ORDER BY NumberOfSubsidiaries DESC LIMIT 1",
        "gql": "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN o.name AS CompanyName, COUNT(subsidiary) AS NumberOfSubsidiaries NEXT RETURN CompanyName ORDER BY NumberOfSubsidiaries DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product {discontinued: true}) WITH s, count(p) AS discontinuedProducts ORDER BY discontinuedProducts DESC LIMIT 3 RETURN s.companyName, discontinuedProducts",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`{discontinued:true}) RETURN s, count(p) AS discontinuedProducts ORDER BY discontinuedProducts DESC LIMIT 3 NEXT RETURN s.companyName, discontinuedProducts"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:CAST_FOR]-(p:Person) WITH m, COUNT(p) AS cast_count ORDER BY cast_count DESC LIMIT 3 RETURN m.title AS movie_title, cast_count",
        "gql": "MATCH (m:Movie)<-[:CAST_FOR]-(p:Person) RETURN m, COUNT(p) AS cast_count ORDER BY cast_count DESC LIMIT 3 NEXT RETURN m.title AS movie_title, cast_count"
    },
    {
        "cypher": "MATCH (org:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WITH org, sub MATCH (sub)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) WITH org, collect(DISTINCT country.name) AS subsidiary_countries WHERE size(subsidiary_countries) > 1 RETURN org.name AS organization_name",
        "gql": "MATCH (org:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) MATCH (sub)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN org, sub NEXT RETURN org.name AS organization_name"
    },
    {
        "cypher": "MATCH (actor:Actor)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Director) WHERE actor.bornIn = director.bornIn RETURN actor.name AS ActorName, movie.title AS MovieTitle, director.name AS DirectorName",
        "gql": "MATCH (actor:Actor)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Director) WHERE actor.bornIn = director.bornIn RETURN actor.name AS ActorName, movie.title AS MovieTitle, director.name AS DirectorName"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[i:INTERACTS_WITH]->(u:User) RETURN u.screen_name AS user, count(i) AS interactions ORDER BY interactions DESC LIMIT 5",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[i:INTERACTS_WITH]->(u:User) RETURN u.screen_name AS user, count(i) AS interactions ORDER BY interactions DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person) WHERE p.born >= 1940 AND p.born <= 1960 RETURN p.name, p.born",
        "gql": "MATCH (p:Person) WHERE p.born >= 1940 AND p.born <= 1960 RETURN p.name, p.born"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.year = 2014 RETURN m.title AS title, m.revenue AS revenue ORDER BY m.revenue DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.`year` = 2014 RETURN m.title AS title, m.revenue AS revenue ORDER BY m.revenue DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.runtime < 90 AND m.imdbRating > 8.0 RETURN m.title",
        "gql": "MATCH (m:Movie) WHERE m.runtime < 90 AND m.imdbRating > 8.0 RETURN m.title"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.budget > 100000000 AND m.release_date > date('2000-01-01') RETURN m",
        "gql": "MATCH (m:Movie) WHERE m.budget > 100000000 AND m.release_date > date('2000-01-01') RETURN m"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Headquarters = \"USA\" RETURN count(c)",
        "gql": "MATCH (c:Company) WHERE c.Headquarters = \"USA\" RETURN count(c)"
    },
    {
        "cypher": "MATCH (g:Genre {name: 'Animation'})<-[:IN_GENRE]-(m:Movie)<-[:CAST_FOR]-(a:Person) RETURN DISTINCT a.name",
        "gql": "MATCH (g:Genre {name: 'Animation'})<-[:IN_GENRE]-(m:Movie)<-[:CAST_FOR]-(a:Person) RETURN DISTINCT a.name"
    },
    {
        "cypher": "MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization) WITH p, count(o) AS numOrgs WHERE numOrgs > 1 RETURN p.name, numOrgs ORDER BY numOrgs DESC LIMIT 3",
        "gql": "MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization) RETURN p, count(o) AS numOrgs NEXT RETURN p.name, numOrgs ORDER BY numOrgs DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(dependency) RETURN s.name AS Software, dependency.name AS Dependency",
        "gql": "MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(dependency) RETURN s.name AS Software, dependency.name AS Dependency"
    },
    {
        "cypher": "MATCH (a:Author) RETURN a.fname ORDER BY a.fname",
        "gql": "MATCH (a:Author) RETURN a.fname ORDER BY a.fname"
    },
    {
        "cypher": "MATCH (q:Question) WHERE q.view_count >= 50 AND q.view_count <= 100 RETURN q ORDER BY q.creation_date LIMIT 3",
        "gql": "MATCH (q:Question) WHERE q.view_count >= 50 AND q.view_count <= 100 RETURN q ORDER BY q.creation_date LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Member) WHERE m.Membership_card = \"Black\" OR m.Age < 30 RETURN m.Name, m.Member_ID",
        "gql": "MATCH (m:Member) WHERE m.Membership_card = \"Black\" OR m.Age < 30 RETURN m.Name, m.Member_ID"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Nancy Meyers\"})-[:WROTE]->(m:Movie) RETURN m.title AS MovieTitle, m.released AS ReleaseYear ORDER BY m.released LIMIT 3",
        "gql": "MATCH (p:Person {name: \"Nancy Meyers\"})-[:WROTE]->(m:Movie) RETURN m.title AS MovieTitle, m.released AS ReleaseYear ORDER BY m.released LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Company) WHERE c.Industry <> \"Banking\" RETURN max(c.Sales_billion), min(c.Sales_billion)",
        "gql": "MATCH (c:Company) WHERE c.Industry <> \"Banking\" RETURN max(c.Sales_billion), min(c.Sales_billion)"
    },
    {
        "cypher": "MATCH (o:Order)-[:ORDERS]->(p:Product) WHERE o.shipCountry = 'France' RETURN o.orderID, o.shipName, o.shipCity, o.shipPostalCode, o.shipAddress, o.shipCountry, o.shipRegion, o.shipVia, o.shippedDate ORDER BY o.shippedDate LIMIT 3",
        "gql": "MATCH (o:`Order`)-[:ORDERS]->(p:`Product`) WHERE o.shipCountry = 'France' RETURN o.orderID, o.shipName, o.shipCity, o.shipPostalCode, o.shipAddress, o.shipCountry, o.shipRegion, o.shipVia, o.shippedDate ORDER BY o.shippedDate LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business {address: '200 W Pine St'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name",
        "gql": "MATCH (b:Business {address: '200 W Pine St'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name"
    },
    {
        "cypher": "MATCH (c:CirculationHistory) RETURN c.document_id, count(distinct c.employee_id) as employee_count ORDER BY c.document_id",
        "gql": "MATCH (c:CirculationHistory) RETURN c.document_id, count(distinct c.employee_id) as employee_count ORDER BY c.document_id"
    },
    {
        "cypher": "MATCH (u:User {name: \"David\"})-[:CREATED]->(p:Post) RETURN COUNT(p) AS count",
        "gql": "MATCH (u:User{name:\"David\"})-[:CREATED]->(p:Post) RETURN COUNT(p) AS `count`"
    },
    {
        "cypher": "MATCH (s:Stream) WHERE s.followers > 5000000 RETURN s",
        "gql": "MATCH (s:Stream) WHERE s.followers > 5000000 RETURN s"
    },
    {
        "cypher": "MATCH (a:DOI{name:'10.1142/S0219061301000077'})-[*]->(d:Keyword{name:'log-balanced'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:DOI{name:'10.1142/S0219061301000077'})-[]->{1,}(d:Keyword{name:'log-balanced'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (d:DocumentsToBeDestroyed) RETURN DISTINCT d.Destroyed_by_Employee_ID",
        "gql": "MATCH (d:DocumentsToBeDestroyed) RETURN DISTINCT d.Destroyed_by_Employee_ID"
    },
    {
        "cypher": "MATCH (s:Stream)<-[:CHATTER]-(u:User) WHERE s.followers < 3000 RETURN s ORDER BY s.createdAt ASC LIMIT 3",
        "gql": "MATCH (s:Stream)<-[:CHATTER]-(u:User) WHERE s.followers < 3000 RETURN s ORDER BY s.createdAt ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business {city: 'Missoula'})<-[:REVIEWS]-(r:Review) RETURN avg(r.stars) AS average_rating",
        "gql": "MATCH (b:Business {city: 'Missoula'})<-[:REVIEWS]-(r:Review) RETURN avg(r.stars) AS average_rating"
    },
    {
        "cypher": "MATCH (p:Process {name: 'webserver'})-[:RUNS]->(m:Machine)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(port:Port),       (dc:DataCenter)-[:CONTAINS]->(m) RETURN i.ip AS InterfaceIP, dc.name AS DataCenterName, dc.location AS DataCenterLocation",
        "gql": "MATCH (p:Process {name: 'webserver'})-[:RUNS]->(m:Machine)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(port:Port),       (dc:DataCenter)-[:CONTAINS]->(m) RETURN i.ip AS InterfaceIP, dc.name AS DataCenterName, dc.location AS DataCenterLocation"
    },
    {
        "cypher": "MATCH (e:Entity {internal_id: '1000896'}) RETURN e.address",
        "gql": "MATCH (e:Entity {internal_id: '1000896'}) RETURN e.address"
    },
    {
        "cypher": "MATCH (n:Topic), (:Topic {description: 'Focusing on techniques and concepts related to transformations, solutions, and properties of linear equations and matrices, including Jordan normal form, eigenvalues, eigenvectors, diagonalization, and eigenformulations.'}) WHERE NOT (n) --> (:Topic) RETURN n.label",
        "gql": "MATCH (n:Topic), (:Topic {description: 'Focusing on techniques and concepts related to transformations, solutions, and properties of linear equations and matrices, including Jordan normal form, eigenvalues, eigenvectors, diagonalization, and eigenformulations.'}) WHERE NOT (n) --> (:Topic) RETURN n.label"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.released >= '2011' RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.released >= '2011' RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:City)<-[:IN_CITY]-(o:Organization) WITH c, count(o) AS orgCount WHERE orgCount > 10 RETURN c.name AS city, orgCount",
        "gql": "MATCH (c:City)<-[:IN_CITY]-(o:Organization) RETURN c, count(o) AS orgCount NEXT RETURN c.name AS city, orgCount"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'based on novel'}) RETURN m.title AS MovieTitle LIMIT 3",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'based on novel'}) RETURN m.title AS MovieTitle LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.answered = true WITH u, count(q) AS answeredQuestions ORDER BY answeredQuestions DESC LIMIT 3 RETURN u.display_name, answeredQuestions",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.answered = true RETURN u, count(q) AS answeredQuestions ORDER BY answeredQuestions DESC LIMIT 3 NEXT RETURN u.display_name, answeredQuestions"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1PageRank > 5 RETURN c",
        "gql": "MATCH (c:Character) WHERE c.book1PageRank > 5 RETURN c"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) WITH m, count(k) AS keyword_count ORDER BY keyword_count DESC LIMIT 5 RETURN m.title AS MovieTitle, keyword_count",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) RETURN m, count(k) AS keyword_count ORDER BY keyword_count DESC LIMIT 5 NEXT RETURN m.title AS MovieTitle, keyword_count"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born > 1960 RETURN m.title AS MovieTitle, p.name AS DirectorName",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born > 1960 RETURN m.title AS MovieTitle, p.name AS DirectorName"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.id >= 15 AND g.id <= 50 RETURN m.title LIMIT 3",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.id >= 15 AND g.id <= 50 RETURN m.title LIMIT 3"
    },
    {
        "cypher": "MATCH (:User)-[r:RATED]->(m:Movie) RETURN m.title AS title, AVG(r.rating) AS avgRating ORDER BY avgRating ASC LIMIT 5",
        "gql": "MATCH (:User)-[r:RATED]->(m:Movie) RETURN m.title AS title, AVG(r.rating) AS avgRating ORDER BY avgRating ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score > 5 WITH DISTINCT u RETURN count(u)",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score > 5 RETURN DISTINCT u NEXT RETURN count(u)"
    },
    {
        "cypher": "MATCH (p:Product) RETURN p.Product_Name ORDER BY p.Product_Price ASC",
        "gql": "MATCH (p:`Product`) RETURN p.Product_Name ORDER BY p.Product_Price ASC"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.degree > 100 RETURN count(c)",
        "gql": "MATCH (c:Character) WHERE c.degree > 100 RETURN count(c)"
    },
    {
        "cypher": "MATCH (c:Character) RETURN avg(c.centrality)",
        "gql": "MATCH (c:Character) RETURN avg(c.centrality)"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory) WITH o, COUNT(c) AS categoryCount WHERE categoryCount >= 3 RETURN o.name",
        "gql": "MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN o, COUNT(c) AS categoryCount NEXT RETURN o.name"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 100000 AND q.downVotes > 0 RETURN u",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 100000 AND q.downVotes > 0 RETURN u"
    },
    {
        "cypher": "MATCH (p:Product) RETURN p.Product_Name ORDER BY p.Product_Price DESC LIMIT 1",
        "gql": "MATCH (p:`Product`) RETURN p.Product_Name ORDER BY p.Product_Price DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (a:Actor)-[:DIRECTED]->(m:Movie) RETURN m.title AS MovieTitle, m.released AS ReleaseDate ORDER BY m.imdbRating DESC LIMIT 3",
        "gql": "MATCH (a:Actor)-[:DIRECTED]->(m:Movie) RETURN m.title AS MovieTitle, m.released AS ReleaseDate ORDER BY m.imdbRating DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Country {name: \"United States of America\"})<-[:IN_COUNTRY]-(ci:City)<-[:IN_CITY]-(o:Organization) WITH sum(o.revenue) AS totalRevenue RETURN totalRevenue",
        "gql": "MATCH (c:Country{name:\"United States of America\"})<-[:IN_COUNTRY]-(ci:City)<-[:IN_CITY]-(o:Organization) RETURN sum(o.revenue) AS totalRevenue NEXT RETURN totalRevenue"
    },
    {
        "cypher": "MATCH (f:Filing) RETURN f ORDER BY f.begin LIMIT 3",
        "gql": "MATCH (f:Filing) RETURN f ORDER BY f.begin LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person) MATCH (a:Article)-[:MENTIONS]->(o) WITH o, a ORDER BY a.date DESC WITH o, collect(a)[0] AS latest_article RETURN o.name AS organization, latest_article.title AS latest_article_title, latest_article.date AS latest_article_date ORDER BY latest_article_date DESC LIMIT 3",
        "gql": "MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person) MATCH (a:Article)-[:MENTIONS]->(o) RETURN o, a ORDER BY a.`date` DESC NEXT RETURN o.name AS organization, latest_article.title AS latest_article_title, latest_article.`date` AS latest_article_date ORDER BY latest_article_date DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:CatalogContent) RETURN c.catalog_entry_name ORDER BY c.height DESC LIMIT 1",
        "gql": "MATCH (c:CatalogContent) RETURN c.catalog_entry_name ORDER BY c.height DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Station)-[:SERVES]->(t:Train) WHERE s.Location = \"London\" RETURN t.Name, t.Time ORDER BY t.Time DESC",
        "gql": "MATCH (s:Station)-[:SERVES]->(t:Train) WHERE s.Location = \"London\" RETURN t.Name, t.`Time` ORDER BY t.`Time` DESC"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(:Category), (r:Review)-[:REVIEWS]->(b), (u:User)-[:WROTE]->(r) WHERE b.city = 'Burlingame' RETURN b.address AS businessAddress, r.text AS reviewText, u.name AS userName",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(:Category), (r:Review)-[:REVIEWS]->(b), (u:User)-[:WROTE]->(r) WHERE b.city = 'Burlingame' RETURN b.address AS businessAddress, r.text AS reviewText, u.name AS userName"
    },
    {
        "cypher": "MATCH (d:Department {Room: \"268\"}) RETURN d.DPhone",
        "gql": "MATCH (d:Department {Room: \"268\"}) RETURN d.DPhone"
    },
    {
        "cypher": "MATCH (m:Movie {title: \"Jumanji\"}) MATCH (m)-[:IN_GENRE]->(g:Genre) RETURN g.name",
        "gql": "MATCH (m:Movie {title: \"Jumanji\"}) MATCH (m)-[:IN_GENRE]->(g:Genre) RETURN g.name"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:RATED]-(:User) RETURN m.title AS movie, count(r) AS num_ratings ORDER BY num_ratings DESC LIMIT 10",
        "gql": "MATCH (m:Movie)<-[r:RATED]-(:User) RETURN m.title AS movie, count(r) AS num_ratings ORDER BY num_ratings DESC LIMIT 10"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(co:Country) WITH co, COUNT(DISTINCT c) AS cityCount ORDER BY cityCount DESC LIMIT 3 RETURN co.name AS country, cityCount",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(co:Country) RETURN co, COUNT(c) AS cityCount ORDER BY cityCount DESC LIMIT 3 NEXT RETURN co.name AS country, cityCount"
    },
    {
        "cypher": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE p.born > 1980 RETURN avg(r.rating) AS average_rating",
        "gql": "MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE p.born > 1980 RETURN avg(r.rating) AS average_rating"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet) RETURN tweet.text, tweet.favorites ORDER BY tweet.favorites DESC LIMIT 5",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet) RETURN tweet.text, tweet.favorites ORDER BY tweet.favorites DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:UpdateDate) WHERE n.update_date = date('2018-11-28') RETURN n",
        "gql": "MATCH (n:UpdateDate) WHERE n.update_date = date('2018-11-28') RETURN n"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality = 0 RETURN c.name",
        "gql": "MATCH (c:Character) WHERE c.centrality = 0 RETURN c.name"
    },
    {
        "cypher": "MATCH (r:Region) WHERE r.Region_name <> \"Denmark\" RETURN r.Region_name",
        "gql": "MATCH (r:Region) WHERE r.Region_name <> \"Denmark\" RETURN r.Region_name"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order) WITH s.supplierID AS supplierID, COUNT(DISTINCT o.shipCity) AS cityCount WHERE cityCount > 3 RETURN supplierID",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)<-[:ORDERS]-(o:`Order`) RETURN s.supplierID AS supplierID, COUNT(o.shipCity) AS cityCount NEXT RETURN supplierID"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:RATED]-(u:User) WITH m, count(u) AS userCount WHERE userCount > 1000 RETURN m",
        "gql": "MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, count(u) AS userCount NEXT RETURN m"
    },
    {
        "cypher": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) WHERE m.votes < 100 RETURN p.name",
        "gql": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) WHERE m.votes < 100 RETURN p.name"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'}) WHERE q.downVotes > 0 RETURN q ORDER BY q.createdAt LIMIT 5",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'}) WHERE q.downVotes > 0 RETURN q ORDER BY q.createdAt LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.total_view_count > 1000000 RETURN g.name, count(s) AS streams_count ORDER BY streams_count DESC LIMIT 5",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.total_view_count > 1000000 RETURN g.name, count(s) AS streams_count ORDER BY streams_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity) WITH i, COUNT(e) AS entityCount WHERE entityCount > 1 RETURN i.name AS intermediaryName",
        "gql": "MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity) RETURN i, COUNT(e) AS entityCount NEXT RETURN i.name AS intermediaryName"
    },
    {
        "cypher": "MATCH (earliestTweet:Tweet) RETURN earliestTweet ORDER BY earliestTweet.created_at ASC LIMIT 1",
        "gql": "MATCH (earliestTweet:Tweet) RETURN earliestTweet ORDER BY earliestTweet.created_at ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (me:Me)-[:AMPLIFIES]->(user:User) RETURN user",
        "gql": "MATCH (me:Me)-[:AMPLIFIES]->(user:User) RETURN user"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(router:Router) RETURN router.name",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(router:Router) RETURN router.name"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WITH s, COUNT(DISTINCT g) AS distinctGames ORDER BY distinctGames DESC LIMIT 3 RETURN s.name AS streamName, distinctGames",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN s, COUNT(g) AS distinctGames ORDER BY distinctGames DESC LIMIT 3 NEXT RETURN s.name AS streamName, distinctGames"
    },
    {
        "cypher": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WITH m, count(l) AS languageCount ORDER BY languageCount DESC LIMIT 5 RETURN m.title AS movie, languageCount AS spokenLanguages",
        "gql": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN m, count(l) AS languageCount ORDER BY languageCount DESC LIMIT 5 NEXT RETURN m.title AS movie, languageCount AS spokenLanguages"
    },
    {
        "cypher": "MATCH (n:Campus) RETURN count(n)",
        "gql": "MATCH (n:Campus) RETURN count(n)"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.release_date ORDER BY m.release_date LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.release_date ORDER BY m.release_date LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:MENTIONS]->(a:Article) WHERE o.nbrEmployees > 500 AND a.sentiment > 0.5 RETURN o.name",
        "gql": "MATCH (o:Organization)-[:MENTIONS]->(a:Article) WHERE o.nbrEmployees > 500 AND a.sentiment > 0.5 RETURN o.name"
    },
    {
        "cypher": "MATCH (u:User) RETURN u.screen_name AS user, u.following AS following ORDER BY u.following DESC LIMIT 3",
        "gql": "MATCH (u:User) RETURN u.screen_name AS user, u.following AS following ORDER BY u.following DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User)-[r:RATED]->(m:Movie) WITH u, COUNT(r) AS ratingCount ORDER BY ratingCount DESC LIMIT 5 RETURN u.id AS userId, ratingCount",
        "gql": "MATCH (u:User)-[r:RATED]->(m:Movie) RETURN u, COUNT(r) AS ratingCount ORDER BY ratingCount DESC LIMIT 5 NEXT RETURN u.id AS userId, ratingCount"
    },
    {
        "cypher": "MATCH (n:Article) RETURN n.article_id  SKIP 2 LIMIT 2",
        "gql": "MATCH (n:Article) RETURN n.article_id  SKIP 2 LIMIT 2"
    },
    {
        "cypher": "MATCH (s:Swimmer) RETURN COUNT(DISTINCT s.Nationality)",
        "gql": "MATCH (s:Swimmer) RETURN COUNT(DISTINCT s.Nationality)"
    },
    {
        "cypher": "MATCH (n:Author), (:Journal {name: 'Constructive Approximation'}) WHERE NOT (n) --> (:Journal) RETURN n.author_id",
        "gql": "MATCH (n:Author), (:Journal {name: 'Constructive Approximation'}) WHERE NOT (n) --> (:Journal) RETURN n.author_id"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.jurisdiction = 'SAM' RETURN e.name AS entity_name",
        "gql": "MATCH (e:Entity) WHERE e.jurisdiction = 'SAM' RETURN e.name AS entity_name"
    },
    {
        "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream) WITH u, COUNT(s) AS moderatedStreams ORDER BY moderatedStreams DESC LIMIT 3 RETURN u.name AS userName, moderatedStreams",
        "gql": "MATCH (u:User)-[:MODERATOR]->(s:Stream) RETURN u, COUNT(s) AS moderatedStreams ORDER BY moderatedStreams DESC LIMIT 3 NEXT RETURN u.name AS userName, moderatedStreams"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE toFloat(f.beneficiary_lat) > 50 MATCH (f)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN DISTINCT c.name LIMIT 3",
        "gql": "MATCH (f:Filing) WHERE f.beneficiary_lat > 50 MATCH (f)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN DISTINCT c.name LIMIT 3"
    },
    {
        "cypher": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Population DESC LIMIT 1",
        "gql": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Population DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS]->(c2:Character) WHERE r.weight = 334 RETURN c1.name AS Character1, c2.name AS Character2",
        "gql": "MATCH (c1:Character)-[r:INTERACTS]->(c2:Character) WHERE r.weight = 334 RETURN c1.name AS Character1, c2.name AS Character2"
    },
    {
        "cypher": "MATCH (f:Farm) RETURN max(f.Cows), min(f.Cows)",
        "gql": "MATCH (f:Farm) RETURN max(f.Cows), min(f.Cows)"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'}) RETURN q ORDER BY q.createdAt LIMIT 5",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'}) RETURN q ORDER BY q.createdAt LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS BusinessName LIMIT 3",
        "gql": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS BusinessName LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Comment) WHERE c.score > 1 RETURN c.body_markdown",
        "gql": "MATCH (c:Comment) WHERE c.score > 1 RETURN c.body_markdown"
    },
    {
        "cypher": "MATCH (s:Stream)<-[:CHATTER]-(u:User) WITH s, COUNT(u) AS chatterCount ORDER BY chatterCount DESC LIMIT 5 RETURN s.name AS streamName, chatterCount",
        "gql": "MATCH (s:Stream)<-[:CHATTER]-(u:User) RETURN s, COUNT(u) AS chatterCount ORDER BY chatterCount DESC LIMIT 5 NEXT RETURN s.name AS streamName, chatterCount"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WITH p, count(DISTINCT m) AS movies_count ORDER BY movies_count DESC RETURN p.name, movies_count LIMIT 3",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) RETURN p, count(m) AS movies_count ORDER BY movies_count DESC NEXT RETURN p.name, movies_count LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Department) RETURN n.Head LIMIT 1",
        "gql": "MATCH (n:Department) RETURN n.Head LIMIT 1"
    },
    {
        "cypher": "MATCH (c:Campus) WHERE c.County = \"Los Angeles\" RETURN c.Campus",
        "gql": "MATCH (c:Campus) WHERE c.County = \"Los Angeles\" RETURN c.Campus"
    },
    {
        "cypher": "MATCH (s:Supplier {companyName: \"Exotic Liquids\"})-[:SUPPLIES]->(p:Product) RETURN p.productName, count(p) AS supplyCount ORDER BY supplyCount DESC LIMIT 3",
        "gql": "MATCH (s:Supplier{companyName:\"Exotic Liquids\"})-[:SUPPLIES]->(p:`Product`) RETURN p.productName, count(p) AS supplyCount ORDER BY supplyCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business {name: 'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review) RETURN count(r) AS NumberOfReviews",
        "gql": "MATCH (b:Business {name: 'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review) RETURN count(r) AS NumberOfReviews"
    },
    {
        "cypher": "MATCH (u:User)-[:VIP]->(s:Stream) WITH u, count(s) AS vip_count ORDER BY vip_count DESC LIMIT 5 RETURN u.name AS user, vip_count",
        "gql": "MATCH (u:User)-[:VIP]->(s:Stream) RETURN u, count(s) AS vip_count ORDER BY vip_count DESC LIMIT 5 NEXT RETURN u.name AS user, vip_count"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(:Category), (r:Review)-[:REVIEWS]->(b) WHERE b.city = 'Burlingame' RETURN DISTINCT b.name LIMIT 3",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(:Category), (r:Review)-[:REVIEWS]->(b) WHERE b.city = 'Burlingame' RETURN DISTINCT b.name LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream) WHERE s.followers > 100000 MATCH (s)-[:MODERATOR]->(u:User) RETURN count(DISTINCT u) AS moderatorCount",
        "gql": "MATCH (s:Stream) WHERE s.followers > 100000 MATCH (s)-[:MODERATOR]->(u:User) RETURN count(DISTINCT u) AS moderatorCount"
    },
    {
        "cypher": "MATCH (n:Categories), (:Keyword {key_id: 'c807a6943bac079cc85fda45518ea7f4'}) WHERE NOT (n) --> (:Keyword) RETURN n.category_id",
        "gql": "MATCH (n:Categories), (:Keyword {key_id: 'c807a6943bac079cc85fda45518ea7f4'}) WHERE NOT (n) --> (:Keyword) RETURN n.category_id"
    },
    {
        "cypher": "MATCH (b:Business)-[:REVIEWS]->(r:Review) WITH b, count(r) AS reviewsCount ORDER BY reviewsCount DESC LIMIT 3 RETURN b.name AS BusinessName, b.address AS Address",
        "gql": "MATCH (b:Business)-[:REVIEWS]->(r:Review) RETURN b, count(r) AS reviewsCount ORDER BY reviewsCount DESC LIMIT 3 NEXT RETURN b.name AS BusinessName, b.address AS Address"
    },
    {
        "cypher": "MATCH (n:Report) WHERE n.report_no IS NULL RETURN n LIMIT 8",
        "gql": "MATCH (n:Report) WHERE n.report_no IS NULL RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.description  IS NOT NULL AND n.cluster > 9 RETURN n.description AS description, n.cluster AS cluster ORDER BY cluster DESC",
        "gql": "MATCH (n:Topic) WHERE n.description  IS NOT NULL AND n.cluster > 9 RETURN n.description AS description, n.cluster AS cluster ORDER BY cluster DESC"
    },
    {
        "cypher": "MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie) WITH a, count(r) AS roles ORDER BY roles DESC LIMIT 3 RETURN a.name AS actorName, roles",
        "gql": "MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie) RETURN a, count(r) AS roles ORDER BY roles DESC LIMIT 3 NEXT RETURN a.name AS actorName, roles"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:ACTED_IN]-(p:Person) RETURN m.title AS movie, size(r.roles) AS numRoles ORDER BY numRoles DESC LIMIT 5",
        "gql": "MATCH (m:Movie)<-[r:ACTED_IN]-(p:Person) RETURN m.title AS movie, size(r.roles) AS numRoles ORDER BY numRoles DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Article{abstract:'  Generalizing the construction of the Maslov class for a Lagrangian embedding in a symplectic vector space, we prove that it is possible to give a consistent definition of this class for any Lagrangian submanifold of a Calabi-Yau manifold. Moreover, we prove that this class can be represented by the contraction of the Kaehler form associated to the Calabi-Yau metric, with the mean curvature vector field of the Lagrangian embedding. Finally, we suggest a possible generalization of the Maslov class for Lagrangian submanifolds of any symplectic manifold, via the mean curvature representation. '})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{`abstract`:'  Generalizing the construction of the Maslov class for a Lagrangian embedding in a symplectic vector space, we prove that it is possible to give a consistent definition of this class for any Lagrangian submanifold of a Calabi-Yau manifold. Moreover, we prove that this class can be represented by the contraction of the Kaehler form associated to the Calabi-Yau metric, with the mean curvature vector field of the Lagrangian embedding. Finally, we suggest a possible generalization of the Maslov class for Lagrangian submanifolds of any symplectic manifold, via the mean curvature representation. '})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (fc:Farm_competition) WHERE fc.Theme <> 'Aliens' RETURN fc.Hosts",
        "gql": "MATCH (fc:Farm_competition) WHERE fc.Theme <> 'Aliens' RETURN fc.Hosts"
    },
    {
        "cypher": "MATCH (g:Genre {name: 'Adventure'})<-[:IN_GENRE]-(m:Movie) WITH avg(m.imdbRating) AS avgRating RETURN avgRating",
        "gql": "MATCH (g:Genre{name:'Adventure'})<-[:IN_GENRE]-(m:Movie) RETURN avg(m.imdbRating) AS avgRating NEXT RETURN avgRating"
    },
    {
        "cypher": "MATCH (b:Business {name: 'Market on Front'})<-[:REVIEWS]-(r:Review) RETURN r.text AS review, r.date AS date, r.stars AS stars",
        "gql": "MATCH (b:Business{name:'Market on Front'})<-[:REVIEWS]-(r:Review) RETURN r.text AS review, r.`date` AS `date`, r.stars AS stars"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:REVIEWED]-(r:Person) WITH m, count(r) AS reviewCount RETURN m.title AS movieTitle, reviewCount ORDER BY reviewCount DESC LIMIT 5",
        "gql": "MATCH (m:Movie)<-[:REVIEWED]-(r:Person) RETURN m, count(r) AS reviewCount NEXT RETURN m.title AS movieTitle, reviewCount ORDER BY reviewCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH p=(a:Topic{description:'Geometry, focusing on the study of hyperbolic spaces, structures, and manifolds, including their properties, relations, and applications in various fields such as topology, dynamics, and analysis.'})-[*]->(d:Categories{category_id:'eea477d68b70c3a05be12567240033ef'}) RETURN count(p)",
        "gql": "MATCH (a:Topic{description:'Geometry, focusing on the study of hyperbolic spaces, structures, and manifolds, including their properties, relations, and applications in various fields such as topology, dynamics, and analysis.'})-[]->{1,}(d:Categories{category_id:'eea477d68b70c3a05be12567240033ef'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product) RETURN c.companyName AS customer, SUM(r.quantity) AS totalQuantity ORDER BY totalQuantity DESC LIMIT 3",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`)-[r:ORDERS]->(p:`Product`) RETURN c.companyName AS customer, SUM(r.quantity) AS totalQuantity ORDER BY totalQuantity DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {name:'Alice'})-[:CREATED]->(p:Post) RETURN count(p) AS count_Post_",
        "gql": "MATCH (u:User {name:'Alice'})-[:CREATED]->(p:Post) RETURN count(p) AS count_Post_"
    },
    {
        "cypher": "MATCH (u:User {name: \"rajjix\"}) MATCH (u)-[:CHATTER]->(s:Stream) MATCH (s)-[:PLAYS]->(g:Game {name: \"Dota 2\"}) RETURN s.name",
        "gql": "MATCH (u:User {name: \"rajjix\"}) MATCH (u)-[:CHATTER]->(s:Stream) MATCH (s)-[:PLAYS]->(g:Game {name: \"Dota 2\"}) RETURN s.name"
    },
    {
        "cypher": "MATCH (u:User {color: '#3CB371'}) RETURN u LIMIT 3",
        "gql": "MATCH (u:User {color: '#3CB371'}) RETURN u LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WITH m, COUNT(g) AS genreCount ORDER BY genreCount DESC LIMIT 5 RETURN m.title AS MovieTitle, genreCount",
        "gql": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m, COUNT(g) AS genreCount ORDER BY genreCount DESC LIMIT 5 NEXT RETURN m.title AS MovieTitle, genreCount"
    },
    {
        "cypher": "MATCH (p:Person) RETURN p.Age ORDER BY p.Height DESC LIMIT 1",
        "gql": "MATCH (p:Person) RETURN p.Age ORDER BY p.Height DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.year = '2002' RETURN n.abstract AS abstract, count(m) AS count",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.`year` = '2002' RETURN n.`abstract` AS `abstract`, count(m) AS `count`"
    },
    {
        "cypher": "MATCH (u:User {display_name: \"Nikhil Kulkarni\"})-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question) WITH avg(q.view_count) AS average_view_count RETURN average_view_count",
        "gql": "MATCH (u:User{display_name:\"Nikhil Kulkarni\"})-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question) RETURN avg(q.view_count) AS average_view_count NEXT RETURN average_view_count"
    },
    {
        "cypher": "MATCH (u:User)-[:INTERACTED]->(:User) WITH u, MAX(u.area) AS maxArea ORDER BY maxArea DESC LIMIT 5 RETURN u.label AS UserLabel, u.area AS Area",
        "gql": "MATCH (u:User)-[:INTERACTED]->(:User) RETURN u, MAX(u.area) AS maxArea ORDER BY maxArea DESC LIMIT 5 NEXT RETURN u.label AS UserLabel, u.area AS Area"
    },
    {
        "cypher": "MATCH (child:Person)-[:FOLLOWS]->(parent:Person) RETURN child.name AS ChildName, parent.name AS ParentName",
        "gql": "MATCH (child:Person)-[:FOLLOWS]->(parent:Person) RETURN child.name AS ChildName, parent.name AS ParentName"
    },
    {
        "cypher": "MATCH (b:BookClub) RETURN DISTINCT b.Publisher",
        "gql": "MATCH (b:BookClub) RETURN DISTINCT b.Publisher"
    },
    {
        "cypher": "MATCH (a:Categories{specifications:'q-fin.RM'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Categories{specifications:'q-fin.RM'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (a:Authorhip) RETURN count(DISTINCT a.authID)",
        "gql": "MATCH (a:Authorhip) RETURN count(DISTINCT a.authID)"
    },
    {
        "cypher": "MATCH (a:Actor) RETURN a.Character, a.Duration",
        "gql": "MATCH (a:Actor) RETURN a.Character, a.`Duration`"
    },
    {
        "cypher": "MATCH (T1:Timed_Status_of_Thing)-[:RELATES_TO]->(T2:Thing) WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21' RETURN DISTINCT T2.thing_id, T2.Type_of_Thing_Code",
        "gql": "MATCH (T1:Timed_Status_of_Thing)-[:RELATES_TO]->(T2:Thing) WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21' RETURN DISTINCT T2.thing_id, T2.Type_of_Thing_Code"
    },
    {
        "cypher": "MATCH (u:User)-[:FOLLOWS]->(:Me {screen_name: 'neo4j'}) RETURN u",
        "gql": "MATCH (u:User)-[:FOLLOWS]->(:Me {screen_name: 'neo4j'}) RETURN u"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a.name, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 3",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a.name, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.degree > 100 RETURN c.name LIMIT 3",
        "gql": "MATCH (c:Character) WHERE c.degree > 100 RETURN c.name LIMIT 3"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)<-[:RETWEETS]-(retweet:Tweet)<-[:POSTS]-(retweeter:User) RETURN DISTINCT retweeter.screen_name LIMIT 3",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)<-[:RETWEETS]-(retweet:Tweet)<-[:POSTS]-(retweeter:User) RETURN DISTINCT retweeter.screen_name LIMIT 3"
    },
    {
        "cypher": "MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.y > 10000 RETURN DISTINCT u1.label",
        "gql": "MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.y > 10000 RETURN DISTINCT u1.label"
    },
    {
        "cypher": "MATCH (a:Answer) RETURN a.link ORDER BY a.score LIMIT 1",
        "gql": "MATCH (a:Answer) RETURN a.link ORDER BY a.score LIMIT 1"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.imdbRating < 4.0 RETURN DISTINCT d.name ORDER BY d.name LIMIT 3",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.imdbRating < 4.0 RETURN DISTINCT d.name ORDER BY d.name LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN c.name AS country, COUNT(a) AS numberOfAdultFilms ORDER BY numberOfAdultFilms DESC LIMIT 5",
        "gql": "MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN c.name AS country, COUNT(a) AS numberOfAdultFilms ORDER BY numberOfAdultFilms DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (e:Entity {country_codes: 'HKG'}) RETURN e.name, e.incorporation_date",
        "gql": "MATCH (e:Entity {country_codes: 'HKG'}) RETURN e.name, e.incorporation_date"
    },
    {
        "cypher": "MATCH (r:Review) RETURN r.reviewId, r.stars, r.text ORDER BY r.stars DESC",
        "gql": "MATCH (r:Review) RETURN r.reviewId, r.stars, r.text ORDER BY r.stars DESC"
    },
    {
        "cypher": "MATCH (b:Building) RETURN b.Stories ORDER BY b.Height DESC LIMIT 1",
        "gql": "MATCH (b:Building) RETURN b.Stories ORDER BY b.Height DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:RATED]-(u:User) WITH m, COUNT(u) AS ratingCount WHERE ratingCount = 5 RETURN m.title AS movieTitle, m.movieId AS movieId",
        "gql": "MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, COUNT(u) AS ratingCount NEXT RETURN m.title AS movieTitle, m.movieId AS movieId"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: \"Seattle\"}) WHERE o.revenue > 10000000 RETURN o.name, o.revenue LIMIT 5",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City {name: \"Seattle\"}) WHERE o.revenue > 10000000 RETURN o.name, o.revenue LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Report) RETURN n.report_id",
        "gql": "MATCH (n:Report) RETURN n.report_id"
    },
    {
        "cypher": "MATCH (a:Journal{journal_id:'d41d8cd98f00b204e9800998ecf8427e'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Journal{journal_id:'d41d8cd98f00b204e9800998ecf8427e'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (p:Product {prodName: 'Timeless Highwaist'})<-[:VARIANT_OF]-(a:Article)-[:FROM_DEPARTMENT]->(d:Department) RETURN d.departmentName, d.departmentNo",
        "gql": "MATCH (p:`Product`{prodName:'Timeless Highwaist'})<-[:VARIANT_OF]-(a:Article)-[:FROM_DEPARTMENT]->(d:Department) RETURN d.departmentName, d.departmentNo"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS2 {weight: 92}]->(c2:Character) RETURN c1.name AS Character1, c2.name AS Character2",
        "gql": "MATCH (c1:Character)-[r:INTERACTS2 {weight: 92}]->(c2:Character) RETURN c1.name AS Character1, c2.name AS Character2"
    },
    {
        "cypher": "MATCH (r:Region) RETURN r.Region_code, r.Region_name ORDER BY r.Region_code",
        "gql": "MATCH (r:Region) RETURN r.Region_code, r.Region_name ORDER BY r.Region_code"
    },
    {
        "cypher": "MATCH (f:Farm) RETURN max(f.Cows), min(f.Cows)",
        "gql": "MATCH (f:Farm) RETURN max(f.Cows), min(f.Cows)"
    },
    {
        "cypher": "MATCH (cc:CatalogContent) RETURN cc.catalog_entry_name ORDER BY cc.capacity ASC LIMIT 1",
        "gql": "MATCH (cc:CatalogContent) RETURN cc.catalog_entry_name ORDER BY cc.capacity ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.followers > 10000 RETURN DISTINCT l.name",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.followers > 10000 RETURN DISTINCT l.name"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.jurisdiction = 'SAM' RETURN e.name AS entity_name, e.company_type AS company_type",
        "gql": "MATCH (e:Entity) WHERE e.jurisdiction = 'SAM' RETURN e.name AS entity_name, e.company_type AS company_type"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 10000 RETURN AVG(q.score) AS average_score",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 10000 RETURN AVG(q.score) AS average_score"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 1 OR n.cluster < 1 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 1 OR n.cluster < 1 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (a:Article)-[:VARIANT_OF]->(p:Product) WHERE a.prodName = 'Wrappy speed dress' RETURN p.productTypeName, p.productGroupName",
        "gql": "MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`) WHERE a.prodName = 'Wrappy speed dress' RETURN p.productTypeName, p.productGroupName"
    },
    {
        "cypher": "MATCH (d:Director {name: 'Steven Spielberg'})-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g.name AS genre, count(*) AS frequency ORDER BY frequency DESC LIMIT 3",
        "gql": "MATCH (d:Director {name: 'Steven Spielberg'})-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g.name AS genre, count(*) AS frequency ORDER BY frequency DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (v:Video)-[:IN_GENRE]->(g:Genre) WHERE v.popularity > 5 RETURN g.name AS genre LIMIT 5",
        "gql": "MATCH (v:Video)-[:IN_GENRE]->(g:Genre) WHERE v.popularity > 5 RETURN g.name AS genre LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User) WHERE u.key = '0' RETURN u.label",
        "gql": "MATCH (u:User) WHERE u.key = '0' RETURN u.label"
    },
    {
        "cypher": "MATCH (:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 WITH avg(m.votes) AS average_votes RETURN average_votes",
        "gql": "MATCH (:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 RETURN avg(m.votes) AS average_votes NEXT RETURN average_votes"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-() WHERE r.rating > 95 RETURN DISTINCT p.name",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-() WHERE r.rating > 95 RETURN DISTINCT p.name"
    },
    {
        "cypher": "MATCH (t1:RepairAssignment)-[:ASSIGNED_TO]->(t3:Technician), (t1)-[:ASSIGNED_TO]->(m2:Machine) WHERE m2.value_points > 70 RETURN t3.Name",
        "gql": "MATCH (t1:RepairAssignment)-[:ASSIGNED_TO]->(t3:Technician), (t1)-[:ASSIGNED_TO]->(m2:Machine) WHERE m2.value_points > 70 RETURN t3.Name"
    },
    {
        "cypher": "MATCH (a:Article {prodName: 'Tulum Tie Brief'}) RETURN a.colourGroupName",
        "gql": "MATCH (a:Article {prodName: 'Tulum Tie Brief'}) RETURN a.colourGroupName"
    },
    {
        "cypher": "MATCH (m:Musical) WHERE m.Award <> \"Tony Award\" RETURN DISTINCT m.Nominee",
        "gql": "MATCH (m:Musical) WHERE m.Award <> \"Tony Award\" RETURN DISTINCT m.Nominee"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.year < 2000 RETURN m.title AS title, m.imdbVotes AS votes ORDER BY m.imdbVotes DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.`year` < 2000 RETURN m.title AS title, m.imdbVotes AS votes ORDER BY m.imdbVotes DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (c:CatalogStructure) WHERE c.catalog_level_number >= 5 AND c.catalog_level_number <= 10 RETURN c.catalog_level_name, c.catalog_level_number",
        "gql": "MATCH (c:CatalogStructure) WHERE c.catalog_level_number >= 5 AND c.catalog_level_number <= 10 RETURN c.catalog_level_name, c.catalog_level_number"
    },
    {
        "cypher": "MATCH (z:Zone {size: 16})-[:ROUTES]->(i:Interface {ip: '10.3.10.254'}) RETURN z.zone AS ZoneNumber LIMIT 3",
        "gql": "MATCH (z:Zone{`size`:16})-[:ROUTES]->(i:Interface{ip:'10.3.10.254'}) RETURN z.zone AS ZoneNumber LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) RETURN m.title AS movie, count(k) AS keywordCount ORDER BY keywordCount DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) RETURN m.title AS movie, count(k) AS keywordCount ORDER BY keywordCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Catalog)<-[:CONTAINS]-(cs:CatalogStructure) WHERE cs.catalog_level_number > 5 RETURN c.catalog_name, c.date_of_publication",
        "gql": "MATCH (c:`Catalog`)<-[:CONTAINS]-(cs:CatalogStructure) WHERE cs.catalog_level_number > 5 RETURN c.catalog_name, c.date_of_publication"
    },
    {
        "cypher": "MATCH (t1:CatalogContent) MATCH (t2:CatalogStructure) WHERE t1.catalog_level_number = t2.catalog_level_number RETURN t2.catalog_level_name ORDER BY t1.price_in_dollars LIMIT 1",
        "gql": "MATCH (t1:CatalogContent) MATCH (t2:CatalogStructure) WHERE t1.catalog_level_number = t2.catalog_level_number RETURN t2.catalog_level_name ORDER BY t1.price_in_dollars LIMIT 1"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.originator_bank_country = 'Singapore' RETURN e",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.originator_bank_country = 'Singapore' RETURN e"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN s.name, s.followers ORDER BY s.followers DESC LIMIT 3",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN s.name, s.followers ORDER BY s.followers DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream {name: 'itsbigchase'})<-[:MODERATOR]-(u:User) RETURN count(u) AS numberOfModerators",
        "gql": "MATCH (s:Stream {name: 'itsbigchase'})<-[:MODERATOR]-(u:User) RETURN count(u) AS numberOfModerators"
    },
    {
        "cypher": "MATCH (c:Character {community: 579}) RETURN avg(c.degree) AS average_degree",
        "gql": "MATCH (c:Character {community: 579}) RETURN avg(c.degree) AS average_degree"
    },
    {
        "cypher": "MATCH (p:Publication) WITH count(DISTINCT p.Publication_Date) as num RETURN num",
        "gql": "MATCH (p:Publication) RETURN count(p.Publication_Date) AS num NEXT RETURN num"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 10000000 RETURN DISTINCT l.name AS language",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 10000000 RETURN DISTINCT l.name AS language"
    },
    {
        "cypher": "MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre {name: 'Animation'}) RETURN p.name AS package",
        "gql": "MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre {name: 'Animation'}) RETURN p.name AS package"
    },
    {
        "cypher": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'}) RETURN m ORDER BY m.release_date DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'}) RETURN m ORDER BY m.release_date DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream {name: '9linda'}) RETURN u.name LIMIT 5",
        "gql": "MATCH (u:User)-[:MODERATOR]->(s:Stream {name: '9linda'}) RETURN u.name LIMIT 5"
    },
    {
        "cypher": "MATCH p=(a:Keyword{name:'super-exponential growth'})-[*]->(d:UpdateDate{update_date:'2007-05-23'}) RETURN count(p)",
        "gql": "MATCH (a:Keyword{name:'super-exponential growth'})-[]->{1,}(d:UpdateDate{update_date:'2007-05-23'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (n:List) WHERE n.Grade = 4 RETURN DISTINCT n.Classroom",
        "gql": "MATCH (n:`List`) WHERE n.Grade = 4 RETURN DISTINCT n.Classroom"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE p.discontinued = false WITH c, COUNT(DISTINCT p) AS productCount MATCH (c)-[:PURCHASED]->(o)-[:ORDERS]->(p) WITH c, productCount, COUNT(DISTINCT p) AS totalProductCount WHERE productCount = totalProductCount RETURN c.companyName AS customerName, c.contactName AS contactName, c.customerID AS customerID LIMIT 3",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`)-[:ORDERS]->(p:`Product`) WHERE p.discontinued = false MATCH (c)-[:PURCHASED]->(o)-[:ORDERS]->(p) RETURN c, COUNT(p) AS productCount NEXT RETURN c.companyName AS customerName, c.contactName AS contactName, c.customerID AS customerID LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[wr:WRITTEN_BY]->(m) WHERE n.comments='18 pages, latex2e with amsfonts. Final version, accepted for   publication' RETURN m.affiliation",
        "gql": "MATCH (n:Article) -[wr:WRITTEN_BY]->(m) WHERE n.comments='18 pages, latex2e with amsfonts. Final version, accepted for   publication' RETURN m.affiliation"
    },
    {
        "cypher": "MATCH (s:Swimmer)-[:COMPETES_IN]->(e:Event)-[:HELD_IN]->(st:Stadium) WHERE s.Nationality = 'Australia' RETURN st.name",
        "gql": "MATCH (s:Swimmer)-[:COMPETES_IN]->(e:Event)-[:HELD_IN]->(st:Stadium) WHERE s.Nationality = 'Australia' RETURN st.name"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u.display_name, count(q) AS questions_asked ORDER BY questions_asked DESC LIMIT 3",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) RETURN u.display_name, count(q) AS questions_asked ORDER BY questions_asked DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor) WITH d, count(DISTINCT a) AS actors_count ORDER BY actors_count DESC RETURN d.name, actors_count LIMIT 3",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN d, count(a) AS actors_count ORDER BY actors_count DESC NEXT RETURN d.name, actors_count LIMIT 3"
    },
    {
        "cypher": "MATCH (me:Me {name: 'Neo4j'})-[:MENTIONS]-(t:Tweet)-[:MENTIONS]-(other:User) WITH avg(other.followers) AS average_followers RETURN average_followers",
        "gql": "MATCH (me:Me{name:'Neo4j'})-[:MENTIONS]-(t:Tweet)-[:MENTIONS]-(other:User) RETURN avg(other.followers) AS average_followers NEXT RETURN average_followers"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.isDissolved = true RETURN o.name LIMIT 3",
        "gql": "MATCH (o:Organization) WHERE o.isDissolved = true RETURN o.name LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Categories{specifications:'nlin.SI'})-[*]->(d:DOI{doi_id:'fe8768ee88f2d27ed51861639e63a4ff'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Categories{specifications:'nlin.SI'})-[]->{1,}(d:DOI{doi_id:'fe8768ee88f2d27ed51861639e63a4ff'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (d:District) WHERE d.City_Area > 10 OR d.City_Population > 100000 RETURN d.District_name",
        "gql": "MATCH (d:District) WHERE d.City_Area > 10 OR d.City_Population > 100000 RETURN d.District_name"
    },
    {
        "cypher": "MATCH (s:Service {name: 'java'})-[:LISTENS]->(p:Port {port: 443}) RETURN s",
        "gql": "MATCH (s:Service {name: 'java'})-[:LISTENS]->(p:Port {port: 443}) RETURN s"
    },
    {
        "cypher": "MATCH (m:Movie)<-[:RATED]-(u:User) WITH m, COUNT(u) AS rating_count WHERE rating_count = 5 RETURN m.title AS movie_title LIMIT 3",
        "gql": "MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, COUNT(u) AS rating_count NEXT RETURN m.title AS movie_title LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m ORDER BY m.released DESC LIMIT 5",
        "gql": "MATCH (m:Movie) RETURN m ORDER BY m.released DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: \"en\"}) MATCH (s)-[:PLAYS]->(g:Game) RETURN DISTINCT g.name",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: \"en\"}) MATCH (s)-[:PLAYS]->(g:Game) RETURN DISTINCT g.name"
    },
    {
        "cypher": "MATCH (n:Article), (:Categories {category_id: '994d468c3f0dd780baf58c6d7f205afd'}) WHERE NOT (n) --> (:Categories) RETURN n.comments",
        "gql": "MATCH (n:Article), (:Categories {category_id: '994d468c3f0dd780baf58c6d7f205afd'}) WHERE NOT (n) --> (:Categories) RETURN n.comments"
    },
    {
        "cypher": "MATCH (:Person)-[r:REVIEWED]->(m:Movie) RETURN m.title AS movie, r.rating AS rating ORDER BY rating DESC LIMIT 1",
        "gql": "MATCH (:Person)-[r:REVIEWED]->(m:Movie) RETURN m.title AS movie, r.rating AS rating ORDER BY rating DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Movie {title: 'Waiting to Exhale'})-[:HAS_KEYWORD]->(k:Keyword) RETURN k.name ORDER BY k.id LIMIT 5",
        "gql": "MATCH (m:Movie {title: 'Waiting to Exhale'})-[:HAS_KEYWORD]->(k:Keyword) RETURN k.name ORDER BY k.id LIMIT 5"
    },
    {
        "cypher": "MATCH (z:Zone {zone: 2})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch) RETURN count(s) AS numberOfSwitches",
        "gql": "MATCH (z:Zone {zone: 2})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch) RETURN count(s) AS numberOfSwitches"
    },
    {
        "cypher": "MATCH (c:City)<-[:IN_CITY]-(o:Organization) WITH c, COUNT(o) AS orgCount WHERE orgCount > 3 MATCH (c)-[:IN_COUNTRY]->(country:Country) RETURN country.name AS Country, COUNT(c) AS CityCount",
        "gql": "MATCH (c:City)<-[:IN_CITY]-(o:Organization) RETURN c, COUNT(o) AS orgCount NEXT MATCH (c)-[:IN_COUNTRY]->(country:Country) RETURN country.name AS Country, COUNT(c) AS CityCount"
    },
    {
        "cypher": "MATCH (m:Movie) RETURN m.title, m.imdbVotes ORDER BY m.imdbVotes DESC LIMIT 3",
        "gql": "MATCH (m:Movie) RETURN m.title, m.imdbVotes ORDER BY m.imdbVotes DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character {name: 'Aemon-Targaryen-(Dragonknight)'})-[r:INTERACTS]-(other) RETURN other.name AS character_name",
        "gql": "MATCH (c:Character {name: 'Aemon-Targaryen-(Dragonknight)'})-[r:INTERACTS]-(other) RETURN other.name AS character_name"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(:City {name: 'Seattle'}) RETURN a.title AS article, a.siteName AS site, a.date AS published ORDER BY a.date DESC LIMIT 3",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(:City{name:'Seattle'}) RETURN a.title AS article, a.siteName AS site, a.`date` AS published ORDER BY a.`date` DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.affiliation = 'Nice - Sophia Antipolis' OR n.last_name IS NOT NULL RETURN DISTINCT n.last_name AS last_name",
        "gql": "MATCH (n:Author) WHERE n.affiliation = 'Nice - Sophia Antipolis' OR n.last_name IS NOT NULL RETURN DISTINCT n.last_name AS last_name"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.revenue IS NOT NULL RETURN o.name AS organization, o.revenue AS revenue ORDER BY o.revenue DESC LIMIT 5",
        "gql": "MATCH (o:Organization) WHERE o.revenue IS NOT NULL RETURN o.name AS organization, o.revenue AS revenue ORDER BY o.revenue DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Topic{label:'Dynamical Systems_10'})-[*]->(d:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Topic{label:'Dynamical Systems_10'})-[]->{1,}(d:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (e:Editor) RETURN e.Name ORDER BY e.Age ASC",
        "gql": "MATCH (e:Editor) RETURN e.Name ORDER BY e.Age ASC"
    },
    {
        "cypher": "MATCH (d:Director {bornIn: 'Burchard, Nebraska, USA'})-[:DIRECTED]->(m:Movie) RETURN m.title AS MovieName",
        "gql": "MATCH (d:Director {bornIn: 'Burchard, Nebraska, USA'})-[:DIRECTED]->(m:Movie) RETURN m.title AS MovieName"
    },
    {
        "cypher": "MATCH (v:Video {title: 'Jonah: A VeggieTales Movie'})-[:IN_GENRE]->(g:Genre) RETURN g.name LIMIT 3",
        "gql": "MATCH (v:Video {title: 'Jonah: A VeggieTales Movie'})-[:IN_GENRE]->(g:Genre) RETURN g.name LIMIT 3"
    },
    {
        "cypher": "MATCH (g:Gymnast) RETURN count(g)",
        "gql": "MATCH (g:Gymnast) RETURN count(g)"
    },
    {
        "cypher": "MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'}) RETURN u ORDER BY u.followers ASC LIMIT 3",
        "gql": "MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'}) RETURN u ORDER BY u.followers ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (t:Type {name: 'xl-16/256/625'})<-[:TYPE]-(m:Machine)-[:HOLDS]-(r:Rack) RETURN r.name LIMIT 3",
        "gql": "MATCH (t:Type {name: 'xl-16/256/625'})<-[:TYPE]-(m:Machine)-[:HOLDS]-(r:Rack) RETURN r.name LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN c.name AS Country, count(m) AS NumberOfMovies ORDER BY NumberOfMovies DESC LIMIT 5",
        "gql": "MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN c.name AS Country, count(m) AS NumberOfMovies ORDER BY NumberOfMovies DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing)-[:CONCERNS]->(b:Entity)-[:COUNTRY]->(c:Country {name: 'Australia'}) WITH e, COUNT(f) AS num_filings ORDER BY num_filings DESC LIMIT 3 RETURN e.name AS entity_name, num_filings",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing)-[:CONCERNS]->(b:Entity)-[:COUNTRY]->(c:Country{name:'Australia'}) RETURN e, COUNT(f) AS num_filings ORDER BY num_filings DESC LIMIT 3 NEXT RETURN e.name AS entity_name, num_filings"
    },
    {
        "cypher": "MATCH (employee:employee) RETURN employee.Name ORDER BY employee.Age",
        "gql": "MATCH (employee:employee) RETURN employee.Name ORDER BY employee.Age"
    },
    {
        "cypher": "MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) WITH t, count(distinct s) as num_streams WHERE num_streams > 3 RETURN t.name as team_name, num_streams",
        "gql": "MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) RETURN t, count(s) AS num_streams NEXT RETURN t.name AS team_name, num_streams"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WITH m, count(p) AS actorCount WHERE actorCount > 5 RETURN m.title, actorCount",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) RETURN m, count(p) AS actorCount NEXT RETURN m.title, actorCount"
    },
    {
        "cypher": "MATCH (a:Article{comments:'Published by Geometry and Topology at   http://www.maths.warwick.ac.uk/gt/GTVol4/paper14.abs.html'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{comments:'Published by Geometry and Topology at   http://www.maths.warwick.ac.uk/gt/GTVol4/paper14.abs.html'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (entity1:Entity {service_provider: 'Mossack Fonseca'})-[:registered_address]->(address:Address) MATCH (address)<-[:registered_address]-(entity2:Entity) WITH DISTINCT entity2 RETURN count(entity2)",
        "gql": "MATCH (entity1:Entity{service_provider:'Mossack Fonseca'})-[:registered_address]->(address:Address) MATCH (address)<-[:registered_address]-(entity2:Entity) RETURN DISTINCT entity2 NEXT RETURN count(entity2)"
    },
    {
        "cypher": "MATCH (p1:Person)-[r1:REVIEWED]->(m:Movie)<-[r2:REVIEWED]-(p2:Person) WHERE p1 <> p2 RETURN p1.name AS Reviewer1, p2.name AS Reviewer2, m.title AS Movie, r1.summary AS Review1, r2.summary AS Review2",
        "gql": "MATCH (p1:Person)-[r1:REVIEWED]->(m:Movie)<-[r2:REVIEWED]-(p2:Person) WHERE p1 <> p2 RETURN p1.name AS Reviewer1, p2.name AS Reviewer2, m.title AS Movie, r1.summary AS Review1, r2.summary AS Review2"
    },
    {
        "cypher": "MATCH (s:Stream) WHERE s.total_view_count > 1000000 RETURN s.name, s.followers, s.total_view_count ORDER BY s.followers ASC LIMIT 3",
        "gql": "MATCH (s:Stream) WHERE s.total_view_count > 1000000 RETURN s.name, s.followers, s.total_view_count ORDER BY s.followers ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.Industry, COUNT(*)",
        "gql": "MATCH (c:Company) RETURN c.Industry, COUNT(*)"
    },
    {
        "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) WITH o, max(a.date) AS maxDate ORDER BY maxDate DESC LIMIT 5 RETURN o.name AS organization, maxDate AS latestMentionDate",
        "gql": "MATCH (a:Article)-[:MENTIONS]->(o:Organization) RETURN o, max(a.`date`) AS maxDate ORDER BY maxDate DESC LIMIT 5 NEXT RETURN o.name AS organization, maxDate AS latestMentionDate"
    },
    {
        "cypher": "MATCH (b:Business {name: 'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN count(DISTINCT u) AS NumberOfUsers",
        "gql": "MATCH (b:Business {name: 'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN count(DISTINCT u) AS NumberOfUsers"
    },
    {
        "cypher": "MATCH (ref_template_types:Ref_Template_Types) RETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "gql": "MATCH (ref_template_types:Ref_Template_Types) RETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description"
    },
    {
        "cypher": "MATCH (p:Publication) RETURN COUNT(DISTINCT p.Publication_Date)",
        "gql": "MATCH (p:Publication) RETURN COUNT(DISTINCT p.Publication_Date)"
    },
    {
        "cypher": "MATCH (n:Article), (:Report {report_id: '5049b80a2935f95cc95cf14dbfb8c610'}) WHERE NOT (n) --> (:Report) RETURN n.comments",
        "gql": "MATCH (n:Article), (:Report {report_id: '5049b80a2935f95cc95cf14dbfb8c610'}) WHERE NOT (n) --> (:Report) RETURN n.comments"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.label = 'Mathematics_9' RETURN n",
        "gql": "MATCH (n:Topic) WHERE n.label = 'Mathematics_9' RETURN n"
    },
    {
        "cypher": "MATCH (c:Company) RETURN c.Company, c.Rank ORDER BY c.Sales_billion DESC",
        "gql": "MATCH (c:Company) RETURN c.Company, c.Rank ORDER BY c.Sales_billion DESC"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'}) RETURN DISTINCT s.companyName LIMIT 3",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Dairy Products'}) RETURN DISTINCT s.companyName LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN]->(m) WHERE n.abstract='  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. ' RETURN m.name",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN]->(m) WHERE n.`abstract` = '  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. ' RETURN m.name"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 50000 AND q.answered = true RETURN u.display_name, u.reputation, q.title, q.link",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 50000 AND q.answered = true RETURN u.display_name, u.reputation, q.title, q.link"
    },
    {
        "cypher": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert) WHERE T3.year = 2014 RETURN T2.name",
        "gql": "MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert) WHERE T3.`year` = 2014 RETURN T2.name"
    },
    {
        "cypher": "MATCH (p:Product) RETURN p.productName, p.unitsInStock ORDER BY p.unitsInStock ASC LIMIT 5",
        "gql": "MATCH (p:`Product`) RETURN p.productName, p.unitsInStock ORDER BY p.unitsInStock ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1056 OR n.article_id < 1048 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1056 OR n.article_id < 1048 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review {stars: 5}) RETURN u LIMIT 5",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review {stars: 5}) RETURN u LIMIT 5"
    },
    {
        "cypher": "MATCH (p:Person)-[r:CREW_FOR]->(m:Movie) WHERE r.job = \"Producer\" RETURN p.name, COUNT(r) AS producer_credits ORDER BY producer_credits DESC LIMIT 3",
        "gql": "MATCH (p:Person)-[r:CREW_FOR]->(m:Movie) WHERE r.job = \"Producer\" RETURN p.name, COUNT(r) AS producer_credits ORDER BY producer_credits DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Categories) WHERE n.category_id = '33657234da1dc070ea09e7c31bb86abb' OR n.category_id IS NOT NULL RETURN DISTINCT n.category_id AS category_id",
        "gql": "MATCH (n:Categories) WHERE n.category_id = '33657234da1dc070ea09e7c31bb86abb' OR n.category_id IS NOT NULL RETURN DISTINCT n.category_id AS category_id"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 9 OR n.cluster < 8 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 9 OR n.cluster < 8 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.inactivation_date = '18-FEB-2013' RETURN e.name AS entity_name, e.service_provider AS service_provider",
        "gql": "MATCH (e:Entity) WHERE e.inactivation_date = '18-FEB-2013' RETURN e.name AS entity_name, e.service_provider AS service_provider"
    },
    {
        "cypher": "MATCH (dt:RefDocumentType) WHERE dt.Document_Type_Name = \"Paper\" RETURN dt.Document_Type_Code",
        "gql": "MATCH (dt:RefDocumentType) WHERE dt.Document_Type_Name = \"Paper\" RETURN dt.Document_Type_Code"
    },
    {
        "cypher": "MATCH (c1:Character)-[:INTERACTS45]->(c2:Character)-[:INTERACTS45]->(c3:Character) RETURN c1.name, c2.name, c3.name LIMIT 3",
        "gql": "MATCH (c1:Character)-[:INTERACTS45]->(c2:Character)-[:INTERACTS45]->(c3:Character) RETURN c1.name, c2.name, c3.name LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Article) WHERE EXISTS ((p)-[:HAS_CATEGORY]->()) RETURN p LIMIT 4",
        "gql": "MATCH (p:Article) WHERE EXISTS ((p)-[:HAS_CATEGORY]->()) RETURN p LIMIT 4"
    },
    {
        "cypher": "MATCH (show:show) RETURN avg(show.Attendance)",
        "gql": "MATCH (show:show) RETURN avg(show.Attendance)"
    },
    {
        "cypher": "MATCH (m:Movie {title: 'Father of the Bride Part II'})-[:IN_GENRE]->(g:Genre) RETURN g LIMIT 3",
        "gql": "MATCH (m:Movie {title: 'Father of the Bride Part II'})-[:IN_GENRE]->(g:Genre) RETURN g LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character)-[r:INTERACTS1]->(:Character) RETURN c.name, sum(r.weight) AS totalWeight ORDER BY totalWeight DESC LIMIT 3",
        "gql": "MATCH (c:Character)-[r:INTERACTS1]->(:Character) RETURN c.name, sum(r.weight) AS totalWeight ORDER BY totalWeight DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User) WHERE u.size < 1.82 RETURN avg(u.x)",
        "gql": "MATCH (u:User) WHERE u.`size` < 1.82 RETURN avg(u.x)"
    },
    {
        "cypher": "MATCH (n:Author) MATCH (m:Article) RETURN n.last_name, m.article_id LIMIT 8",
        "gql": "MATCH (n:Author) MATCH (m:Article) RETURN n.last_name, m.article_id LIMIT 8"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q.title, q.favorites ORDER BY q.favorites DESC LIMIT 3",
        "gql": "MATCH (q:Question) RETURN q.title, q.favorites ORDER BY q.favorites DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:User {name: 'Neo4j'})-[:FOLLOWS]->(u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'}) RETURN u.name AS UserName, count(t) AS TweetsCount ORDER BY TweetsCount DESC LIMIT 5",
        "gql": "MATCH (n:User {name: 'Neo4j'})-[:FOLLOWS]->(u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'}) RETURN u.name AS UserName, count(t) AS TweetsCount ORDER BY TweetsCount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount > 500000 RETURN e.name AS EntityName, e.location AS Location ORDER BY f.amount DESC LIMIT 3",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount > 500000 RETURN e.name AS EntityName, e.location AS Location ORDER BY f.amount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.released IS NOT NULL RETURN m ORDER BY m.released DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.released IS NOT NULL RETURN m ORDER BY m.released DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (b:Book) RETURN b.Title ORDER BY b.Issues ASC",
        "gql": "MATCH (b:Book) RETURN b.Title ORDER BY b.Issues ASC"
    },
    {
        "cypher": "MATCH (o:Other) WHERE o.type IS NOT NULL RETURN DISTINCT o.type",
        "gql": "MATCH (o:Other) WHERE o.type IS NOT NULL RETURN DISTINCT o.type"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.release_date < date('1990-01-01') RETURN m.title LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.release_date < date('1990-01-01') RETURN m.title LIMIT 5"
    },
    {
        "cypher": "MATCH (i:Interface)-[:EXPOSES]->(p:Port {port: 443}) RETURN i.ip",
        "gql": "MATCH (i:Interface)-[:EXPOSES]->(p:Port {port: 443}) RETURN i.ip"
    },
    {
        "cypher": "MATCH (a:Actor) RETURN a.Character ORDER BY a.age DESC",
        "gql": "MATCH (a:Actor) RETURN a.Character ORDER BY a.age DESC"
    },
    {
        "cypher": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review) RETURN r",
        "gql": "MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review) RETURN r"
    },
    {
        "cypher": "MATCH (stadium:stadium) RETURN stadium.Name,stadium.Capacity ORDER BY stadium.Average DESC LIMIT 1",
        "gql": "MATCH (stadium:stadium) RETURN stadium.Name,stadium.Capacity ORDER BY stadium.Average DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.community = 759 AND c.pagerank > 0.4 RETURN c.name, c.pagerank",
        "gql": "MATCH (c:Character) WHERE c.community = 759 AND c.pagerank > 0.4 RETURN c.name, c.pagerank"
    },
    {
        "cypher": "MATCH (v:Video) WHERE v.status = 'In Production' RETURN v LIMIT 3",
        "gql": "MATCH (v:Video) WHERE v.status = 'In Production' RETURN v LIMIT 3"
    },
    {
        "cypher": "MATCH (n:CsuFee) WHERE n.Year = 1996 RETURN avg(n.CampusFee)",
        "gql": "MATCH (n:CsuFee) WHERE n.`Year` = 1996 RETURN avg(n.CampusFee)"
    },
    {
        "cypher": "MATCH (g:Genre {name: 'Drama'})<-[:IN_GENRE]-(m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) WITH pc, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 3 RETURN pc.name AS production_company, movie_count",
        "gql": "MATCH (g:Genre{name:'Drama'})<-[:IN_GENRE]-(m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) RETURN pc, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 3 NEXT RETURN pc.name AS production_company, movie_count"
    },
    {
        "cypher": "MATCH (person:Person {name: \"Specific Person's Name\"})-[:HAS_PARENT]->(parent:Person)-[:HAS_PARENT]->(grandparent:Person)-[:HAS_PARENT]->(greatGrandparent:Person) RETURN person.name AS Person, parent.name AS Parent, grandparent.name AS Grandparent, greatGrandparent.name AS GreatGrandparent",
        "gql": "MATCH (person:Person {name: \"Specific Person's Name\"})-[:HAS_PARENT]->(parent:Person)-[:HAS_PARENT]->(grandparent:Person)-[:HAS_PARENT]->(greatGrandparent:Person) RETURN person.name AS Person, parent.name AS Parent, grandparent.name AS Grandparent, greatGrandparent.name AS GreatGrandparent"
    },
    {
        "cypher": "MATCH (a:Adult) WHERE a.runtime > 60 RETURN a ORDER BY a.id LIMIT 3",
        "gql": "MATCH (a:Adult) WHERE a.runtime > 60 RETURN a ORDER BY a.id LIMIT 3"
    },
    {
        "cypher": "MATCH (a:Actor) RETURN count(a)",
        "gql": "MATCH (a:Actor) RETURN count(a)"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'}) WHERE s.followers > 20000 RETURN s.name AS stream_name, s.followers",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'}) WHERE s.followers > 20000 RETURN s.name AS stream_name, s.followers"
    },
    {
        "cypher": "MATCH (a:Article{title:'Maslov class and minimality in Calabi-Yau manifolds'})-[*]->(d:Author{last_name:'Dunajski'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Article{title:'Maslov class and minimality in Calabi-Yau manifolds'})-[]->{1,}(d:Author{last_name:'Dunajski'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (o:Organization) RETURN o.name AS organization_name, o.revenue AS organization_revenue ORDER BY o.revenue DESC LIMIT 3",
        "gql": "MATCH (o:Organization) RETURN o.name AS organization_name, o.revenue AS organization_revenue ORDER BY o.revenue DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.runtime > 120 WITH avg(m.budget) AS average_budget RETURN average_budget",
        "gql": "MATCH (m:Movie) WHERE m.runtime > 120 RETURN avg(m.budget) AS average_budget NEXT RETURN average_budget"
    },
    {
        "cypher": "MATCH (u:User) RETURN avg(u.followers) AS average_followers",
        "gql": "MATCH (u:User) RETURN avg(u.followers) AS average_followers"
    },
    {
        "cypher": "MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: \"Electronic Products Manufacturers\"}) MATCH (org)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) WITH country, COUNT(org) AS orgCount ORDER BY orgCount DESC LIMIT 3 RETURN country.name AS Country, orgCount AS NumberOfOrganizations",
        "gql": "MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory{name:\"Electronic Products Manufacturers\"}) MATCH (org)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN country, COUNT(org) AS orgCount ORDER BY orgCount DESC LIMIT 3 NEXT RETURN country.name AS Country, orgCount AS NumberOfOrganizations"
    },
    {
        "cypher": "MATCH (n:List) WHERE n.Classroom = 107 RETURN DISTINCT n.FirstName",
        "gql": "MATCH (n:`List`) WHERE n.Classroom = 107 RETURN DISTINCT n.FirstName"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.community > 700 RETURN count(c)",
        "gql": "MATCH (c:Character) WHERE c.community > 700 RETURN count(c)"
    },
    {
        "cypher": "MATCH (p:Person {name: \"봉준호\"})-[:CREW_FOR {job: \"Director\"}]->(m:Movie) RETURN m.title AS MovieTitle",
        "gql": "MATCH (p:Person {name: \"봉준호\"})-[:CREW_FOR {job: \"Director\"}]->(m:Movie) RETURN m.title AS MovieTitle"
    },
    {
        "cypher": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN r, u, b ORDER BY r.date DESC LIMIT 5",
        "gql": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN r, u, b ORDER BY r.`date` DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.status = 'Released' AND m.average_vote < 4 RETURN m.title, m.average_vote",
        "gql": "MATCH (m:Movie) WHERE m.status = 'Released' AND m.average_vote < 4 RETURN m.title, m.average_vote"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE c.name = 'Beer' WITH b MATCH (b)-[:IN_CATEGORY]->(c2:Category) WHERE c2.name = 'Coffee' RETURN b",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE c.name = 'Beer' RETURN b NEXT MATCH (b)-[:IN_CATEGORY]->(c2:Category) WHERE c2.name = 'Coffee' RETURN b"
    },
    {
        "cypher": "MATCH (e:Employee) WHERE e.Employee_Name = \"Ebba\" RETURN e.Employee_ID",
        "gql": "MATCH (e:Employee) WHERE e.Employee_Name = \"Ebba\" RETURN e.Employee_ID"
    },
    {
        "cypher": "MATCH (:Person)-[review:REVIEWED]->(:Movie) WITH max(review.rating) AS highestRating RETURN highestRating",
        "gql": "MATCH (:Person)-[review:REVIEWED]->(:Movie) RETURN max(review.rating) AS highestRating NEXT RETURN highestRating"
    },
    {
        "cypher": "MATCH (n:Journal {journal_id:'d3b321ed42589ea798c241aa7de23d2d'}) RETURN n",
        "gql": "MATCH (n:Journal {journal_id:'d3b321ed42589ea798c241aa7de23d2d'}) RETURN n"
    },
    {
        "cypher": "MATCH (o:Organization {isPublic: true})<-[:MENTIONS]-(a:Article) WHERE a.sentiment > 0.5 RETURN DISTINCT o.name AS organization, a.title AS article, a.sentiment AS sentiment",
        "gql": "MATCH (o:Organization {isPublic: true})<-[:MENTIONS]-(a:Article) WHERE a.sentiment > 0.5 RETURN DISTINCT o.name AS organization, a.title AS article, a.sentiment AS sentiment"
    },
    {
        "cypher": "MATCH (c:Country {name: 'China'})<-[:COUNTRY]-(e:Entity)<-[:BENEFITS]-(f:Filing) RETURN f",
        "gql": "MATCH (c:Country {name: 'China'})<-[:COUNTRY]-(e:Entity)<-[:BENEFITS]-(f:Filing) RETURN f"
    },
    {
        "cypher": "MATCH (t1:AttributeDefinition) MATCH (t2:CatalogContent_Additional_Attributes) WHERE t2.attribute_value = \"0\" AND t1.attribute_id = t2.attribute_id RETURN t1.attribute_name, t1.attribute_id",
        "gql": "MATCH (t1:AttributeDefinition) MATCH (t2:CatalogContent_Additional_Attributes) WHERE t2.attribute_value = \"0\" AND t1.attribute_id = t2.attribute_id RETURN t1.attribute_name, t1.attribute_id"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title <> 'Solutions to congruences using sets with the property of Baire' RETURN DISTINCT n.comments AS comments",
        "gql": "MATCH (n:Article) WHERE n.title <> 'Solutions to congruences using sets with the property of Baire' RETURN DISTINCT n.comments AS comments"
    },
    {
        "cypher": "MATCH (a:Keyword{name:'logarithmic barrier penalty'})-[*]->(d:Topic{cluster:'8'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Keyword{name:'logarithmic barrier penalty'})-[]->{1,}(d:Topic{cluster:'8'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS45]->(c2:Character) WHERE r.weight > 200 RETURN c1.name, r, c2.name",
        "gql": "MATCH (c1:Character)-[r:INTERACTS|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS45]->(c2:Character) WHERE r.weight > 200 RETURN c1.name, r, c2.name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.released >= 2000 AND m.released < 2010 RETURN avg(m.votes) AS average_votes",
        "gql": "MATCH (m:Movie) WHERE m.released >= 2000 AND m.released < 2010 RETURN avg(m.votes) AS average_votes"
    },
    {
        "cypher": "MATCH (d:District) WHERE d.City_Area > 10 OR d.City_Population > 100000 RETURN d.District_name",
        "gql": "MATCH (d:District) WHERE d.City_Area > 10 OR d.City_Population > 100000 RETURN d.District_name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.status = 'Released' AND m.budget > 25000000 RETURN m",
        "gql": "MATCH (m:Movie) WHERE m.status = 'Released' AND m.budget > 25000000 RETURN m"
    },
    {
        "cypher": "MATCH (n:Journal), (:Author {affiliation: 'unspecified'}) WHERE NOT (n) --> (:Author) RETURN n.journal_id",
        "gql": "MATCH (n:Journal), (:Author {affiliation: 'unspecified'}) WHERE NOT (n) --> (:Author) RETURN n.journal_id"
    },
    {
        "cypher": "MATCH (p:Person {name: \"Joel Silver\"})-[:PRODUCED]->(m:Movie) RETURN sum(m.votes) AS total_votes",
        "gql": "MATCH (p:Person {name: \"Joel Silver\"})-[:PRODUCED]->(m:Movie) RETURN sum(m.votes) AS total_votes"
    },
    {
        "cypher": "MATCH (u:User)-[:POSTS]->(t:Tweet)-[:TAGS]->(:Hashtag {name: 'education'}) RETURN u.name, u.screen_name, count(t) AS tweet_count ORDER BY tweet_count DESC LIMIT 3",
        "gql": "MATCH (u:User)-[:POSTS]->(t:Tweet)-[:TAGS]->(:Hashtag {name: 'education'}) RETURN u.name, u.screen_name, count(t) AS tweet_count ORDER BY tweet_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (p:Person)-[e:WORKS_AT]->(c:Company) WHERE c.Sales_in_Billion > 200 RETURN p.Name",
        "gql": "MATCH (p:Person)-[e:WORKS_AT]->(c:Company) WHERE c.Sales_in_Billion > 200 RETURN p.Name"
    },
    {
        "cypher": "MATCH (Branch:Branch) WHERE Branch.Open_year = 2011 OR Branch.City = \"London\" RETURN min(Branch.Membership_amount), max(Branch.Membership_amount)",
        "gql": "MATCH (Branch:Branch) WHERE Branch.Open_year = 2011 OR Branch.City = \"London\" RETURN min(Branch.Membership_amount), max(Branch.Membership_amount)"
    },
    {
        "cypher": "MATCH (m:Movie)-[:DIRECTED]-(p:Person) WHERE m.votes > 1000 RETURN p.name AS Director, m.title AS MovieTitle",
        "gql": "MATCH (m:Movie)-[:DIRECTED]-(p:Person) WHERE m.votes > 1000 RETURN p.name AS Director, m.title AS MovieTitle"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.release_date >= date('1990-01-01') AND m.release_date < date('2000-01-01') RETURN m.title, m.vote_count ORDER BY m.vote_count DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.release_date >= date('1990-01-01') AND m.release_date < date('2000-01-01') RETURN m.title, m.vote_count ORDER BY m.vote_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Storm)-[:AFFECTS]->(r:Region) WHERE s.Number_Deaths >= 10 RETURN r.Region_name",
        "gql": "MATCH (s:Storm)-[:AFFECTS]->(r:Region) WHERE s.Number_Deaths >= 10 RETURN r.Region_name"
    },
    {
        "cypher": "MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'}) WITH t MATCH (u:User)-[:POSTS]->(t) RETURN avg(u.followers)",
        "gql": "MATCH (t:Tweet)-[:TAGS]->(h:Hashtag{name:'education'}) RETURN t NEXT MATCH (u:User)-[:POSTS]->(t) RETURN avg(u.followers)"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {year : '2004'}]->(m) WHERE n.article_id='4129' RETURN m.name",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2004'}]->(m) WHERE n.article_id = '4129' RETURN m.name"
    },
    {
        "cypher": "MATCH (n:List) WHERE n.Grade = 5 RETURN DISTINCT n.Classroom",
        "gql": "MATCH (n:`List`) WHERE n.Grade = 5 RETURN DISTINCT n.Classroom"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN s.name AS stream_name, s.url AS stream_url LIMIT 3",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN s.name AS stream_name, s.url AS stream_url LIMIT 3"
    },
    {
        "cypher": "MATCH (cc:CatalogContent) RETURN count(cc)",
        "gql": "MATCH (cc:CatalogContent) RETURN count(cc)"
    },
    {
        "cypher": "MATCH (l:List) RETURN count(l)",
        "gql": "MATCH (l:`List`) RETURN count(l)"
    },
    {
        "cypher": "MATCH (m:Member) RETURN m.Time_of_purchase, m.Age, m.Address ORDER BY m.Time_of_purchase",
        "gql": "MATCH (m:Member) RETURN m.Time_of_purchase, m.Age, m.Address ORDER BY m.Time_of_purchase"
    },
    {
        "cypher": "MATCH (s:Stream) RETURN s.url AS StreamURL ORDER BY s.total_view_count DESC LIMIT 1",
        "gql": "MATCH (s:Stream) RETURN s.url AS StreamURL ORDER BY s.total_view_count DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (company:ProductionCompany {name: 'Pixar Animation Studios'})-[:PRODUCED_BY]-(movie:Movie) RETURN movie.title, movie.average_vote ORDER BY movie.average_vote DESC LIMIT 5",
        "gql": "MATCH (company:ProductionCompany {name: 'Pixar Animation Studios'})-[:PRODUCED_BY]-(movie:Movie) RETURN movie.title, movie.average_vote ORDER BY movie.average_vote DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (singer:singer) WHERE singer.Age > 20 RETURN DISTINCT singer.Country",
        "gql": "MATCH (singer:singer) WHERE singer.Age > 20 RETURN DISTINCT singer.Country"
    },
    {
        "cypher": "MATCH (b:Building) WHERE NOT EXISTS((b)<-[:LOCATED_IN]-(:Company)) RETURN b.name",
        "gql": "MATCH (b:Building) WHERE NOT EXISTS((b)<-[:LOCATED_IN]-(:Company)) RETURN b.name"
    },
    {
        "cypher": "MATCH (e:Employee {Employee_Name: \"Ebba\"})-[:ASSIGNS]->(r:Role) RETURN r.Role_Name, r.Role_Description",
        "gql": "MATCH (e:Employee {Employee_Name: \"Ebba\"})-[:ASSIGNS]->(r:Role) RETURN r.Role_Name, r.Role_Description"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) WHERE m.budget < 1000000 RETURN k.name AS keyword, count(*) AS frequency ORDER BY frequency DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) WHERE m.budget < 1000000 RETURN k.name AS keyword, count(*) AS frequency ORDER BY frequency DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Article) -[wr:WRITTEN_BY]->(m) WHERE n.comments='22 pages, to appear in Topology. http://jdc.math.uwo.ca Lots of minor   revisions. This version should closely match the published version' RETURN m.author_id",
        "gql": "MATCH (n:Article) -[wr:WRITTEN_BY]->(m) WHERE n.comments='22 pages, to appear in Topology. http://jdc.math.uwo.ca Lots of minor   revisions. This version should closely match the published version' RETURN m.author_id"
    },
    {
        "cypher": "MATCH (n:Appointment) RETURN COUNT(*)",
        "gql": "MATCH (n:Appointment) RETURN COUNT(*)"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.pagerank = 0.15000000000000002 RETURN c.name",
        "gql": "MATCH (c:Character) WHERE c.pagerank = 0.15000000000000002 RETURN c.name"
    },
    {
        "cypher": "MATCH (b:Business {name: \"Ninja Mike's\"})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name AS userName",
        "gql": "MATCH (b:Business {name: \"Ninja Mike's\"})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name AS userName"
    },
    {
        "cypher": "MATCH (u:User)-[:POSTS]->(t:Tweet) WHERE u.location IS NOT NULL RETURN u.location AS Location, count(t) AS TweetCount ORDER BY TweetCount DESC LIMIT 3",
        "gql": "MATCH (u:User)-[:POSTS]->(t:Tweet) WHERE u.location IS NOT NULL RETURN u.location AS Location, count(t) AS TweetCount ORDER BY TweetCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(:Machine)-[:TYPE]->(t:Type) RETURN MAX(t.ram) AS maxRamCapacity",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(:Machine)-[:TYPE]->(t:Type) RETURN MAX(t.ram) AS maxRamCapacity"
    },
    {
        "cypher": "MATCH (n:Journal) WHERE n.journal_id IS NULL RETURN n LIMIT 8",
        "gql": "MATCH (n:Journal) WHERE n.journal_id IS NULL RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (c:Character)-[r:INTERACTS2]->(:Character) WHERE r.weight > 50 RETURN c",
        "gql": "MATCH (c:Character)-[r:INTERACTS2]->(:Character) WHERE r.weight > 50 RETURN c"
    },
    {
        "cypher": "MATCH (o:Organization {name: \"New Energy Group\"})<-[:MENTIONS]-(a:Article) RETURN a",
        "gql": "MATCH (o:Organization {name: \"New Energy Group\"})<-[:MENTIONS]-(a:Article) RETURN a"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.runtime < 90 RETURN avg(m.imdbRating) AS averageImdbRating",
        "gql": "MATCH (m:Movie) WHERE m.runtime < 90 RETURN avg(m.imdbRating) AS averageImdbRating"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'explosive'}) RETURN m.title",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'explosive'}) RETURN m.title"
    },
    {
        "cypher": "MATCH (n:Article) MATCH (m:Author) RETURN n.comments, m.first_name LIMIT 8",
        "gql": "MATCH (n:Article) MATCH (m:Author) RETURN n.comments, m.first_name LIMIT 8"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 200000 RETURN count(f) AS number_of_filings",
        "gql": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 200000 RETURN count(f) AS number_of_filings"
    },
    {
        "cypher": "MATCH p=(a:Author{last_name:'Leoni'})-[*]->(d:Topic{cluster:'6'}) RETURN count(p)",
        "gql": "MATCH (a:Author{last_name:'Leoni'})-[]->{1,}(d:Topic{cluster:'6'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (p:Product {discontinued: true}) RETURN p.productName, p.productID ORDER BY p.productID LIMIT 5",
        "gql": "MATCH (p:`Product`{discontinued:true}) RETURN p.productName, p.productID ORDER BY p.productID LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE date(m.release_date).month = 12 RETURN m.title",
        "gql": "MATCH (m:Movie) WHERE m.release_date = 12 RETURN m.title"
    },
    {
        "cypher": "MATCH (f:Filing {sar_id: \"3297\"})-[:BENEFITS]->(e:Entity) RETURN e.name",
        "gql": "MATCH (f:Filing {sar_id: \"3297\"})-[:BENEFITS]->(e:Entity) RETURN e.name"
    },
    {
        "cypher": "MATCH (d:AllDocument) WHERE d.Document_Name = \"Marry CV\" RETURN d.Date_Stored",
        "gql": "MATCH (d:AllDocument) WHERE d.Document_Name = \"Marry CV\" RETURN d.Date_Stored"
    },
    {
        "cypher": "MATCH (s:Stream) WHERE date(s.createdAt).month = 5 WITH s MATCH (s)-[:HAS_TEAM]->(t:Team) RETURN DISTINCT t.name",
        "gql": "MATCH (s:Stream) WHERE s.createdAt = 5 RETURN s NEXT MATCH (s)-[:HAS_TEAM]->(t:Team) RETURN DISTINCT t.name"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.summary = 'An amazing journey' RETURN m.title, count(r) AS reviews ORDER BY reviews DESC LIMIT 5",
        "gql": "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.summary = 'An amazing journey' RETURN m.title, count(r) AS reviews ORDER BY reviews DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE f.begin.year = 2013 RETURN c.name AS Country, count(f) AS Filings ORDER BY Filings DESC LIMIT 3",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE f.begin = 2013 RETURN c.name AS Country, count(f) AS Filings ORDER BY Filings DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing) WITH e, count(f) AS numberOfFilings RETURN e.name AS entityName, numberOfFilings ORDER BY numberOfFilings DESC",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing) RETURN e, count(f) AS numberOfFilings NEXT RETURN e.name AS entityName, numberOfFilings ORDER BY numberOfFilings DESC"
    },
    {
        "cypher": "MATCH (app:Application {name: 'crm'})-[:DEPENDS_ON]->(dependency) RETURN dependency.name AS dependency_name",
        "gql": "MATCH (app:Application {name: 'crm'})-[:DEPENDS_ON]->(dependency) RETURN dependency.name AS dependency_name"
    },
    {
        "cypher": "MATCH (a:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (u:User) WHERE u.betweenness > 1000000 RETURN u.screen_name, u.betweenness",
        "gql": "MATCH (u:User) WHERE u.betweenness > 1000000 RETURN u.screen_name, u.betweenness"
    },
    {
        "cypher": "MATCH p=(a:Keyword{key_id:'6ded85146e3dbfb1bb866831b8948f5b'})-[*]->(d:Topic{label:'Mathematics_6'}) RETURN count(p)",
        "gql": "MATCH (a:Keyword{key_id:'6ded85146e3dbfb1bb866831b8948f5b'})-[]->{1,}(d:Topic{label:'Mathematics_6'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (v:Video)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Azərbaycan'}) RETURN v LIMIT 5",
        "gql": "MATCH (v:Video)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Azərbaycan'}) RETURN v LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:POSTS]->(t:Tweet) WITH u, count(t) AS tweet_count ORDER BY tweet_count DESC LIMIT 3 RETURN u.screen_name AS screen_name, tweet_count",
        "gql": "MATCH (u:User)-[:POSTS]->(t:Tweet) RETURN u, count(t) AS tweet_count ORDER BY tweet_count DESC LIMIT 3 NEXT RETURN u.screen_name AS screen_name, tweet_count"
    },
    {
        "cypher": "MATCH (s:Station) WHERE s.Number_of_Platforms >= 15 AND s.Total_Passengers > 25 RETURN DISTINCT s.Location",
        "gql": "MATCH (s:Station) WHERE s.Number_of_Platforms >= 15 AND s.Total_Passengers > 25 RETURN DISTINCT s.Location"
    },
    {
        "cypher": "MATCH (app:Application)-[:DEPENDS_ON]->(serv:Service {name: 'java'}) RETURN app.name, app.pid ORDER BY app.pid DESC LIMIT 5",
        "gql": "MATCH (app:Application)-[:DEPENDS_ON]->(serv:Service {name: 'java'}) RETURN app.name, app.pid ORDER BY app.pid DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.average_vote < 5 RETURN m.title, m.average_vote ORDER BY m.average_vote ASC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.average_vote < 5 RETURN m.title, m.average_vote ORDER BY m.average_vote ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (f:Farm) WHERE f.Total_Horses > 5000 RETURN avg(f.Working_Horses)",
        "gql": "MATCH (f:Farm) WHERE f.Total_Horses > 5000 RETURN avg(f.Working_Horses)"
    },
    {
        "cypher": "MATCH p=(a:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[*]->(d:Journal{name:'Math. Ann'}) RETURN count(p)",
        "gql": "MATCH (a:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[]->{1,}(d:Journal{name:'Math. Ann'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (n:Author) MATCH (m:DOI) RETURN n.author_id, m.doi_id LIMIT 8",
        "gql": "MATCH (n:Author) MATCH (m:DOI) RETURN n.author_id, m.doi_id LIMIT 8"
    },
    {
        "cypher": "MATCH (l:RefLocation)<-[:CONTAINS]-(d:DocumentLocation) WITH l.Location_Code as location_code, count(d) as cnt WHERE cnt >= 3 RETURN location_code",
        "gql": "MATCH (l:RefLocation)<-[:CONTAINS]-(d:DocumentLocation) RETURN l.Location_Code AS location_code, count(d) AS cnt NEXT RETURN location_code"
    },
    {
        "cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d.name AS director, count(m) AS moviesDirected ORDER BY moviesDirected DESC LIMIT 3",
        "gql": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d.name AS director, count(m) AS moviesDirected ORDER BY moviesDirected DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (e:Entity) WHERE e.jurisdiction_description = \"Samoa\" RETURN e.country_codes",
        "gql": "MATCH (e:Entity) WHERE e.jurisdiction_description = \"Samoa\" RETURN e.country_codes"
    },
    {
        "cypher": "MATCH (a:AllDocument)-[r*]->(b:RefDocumentType) WHERE a.Document_Name = \"How to read a book\" RETURN b.Document_Type_Name",
        "gql": "MATCH (a:AllDocument)-[r]->{1,}(b:RefDocumentType) WHERE a.Document_Name = \"How to read a book\" RETURN b.Document_Type_Name"
    },
    {
        "cypher": "MATCH (org1:Organization) WHERE org1.nbrEmployees > 1000 MATCH (org1)<-[:MENTIONS]-(article:Article)-[:MENTIONS]->(org2:Organization) RETURN DISTINCT org2.name",
        "gql": "MATCH (org1:Organization) WHERE org1.nbrEmployees > 1000 MATCH (org1)<-[:MENTIONS]-(article:Article)-[:MENTIONS]->(org2:Organization) RETURN DISTINCT org2.name"
    },
    {
        "cypher": "MATCH (a:Article{article_id:'1048'})-[*]->(d:Author{first_name:'Amnon'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Article{article_id:'1048'})-[]->{1,}(d:Author{first_name:'Amnon'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation < 1000 RETURN q ORDER BY q.createdAt DESC LIMIT 5",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation < 1000 RETURN q ORDER BY q.createdAt DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WITH c.name AS CategoryName, COUNT(b) AS NumberOfBusinesses ORDER BY NumberOfBusinesses DESC LIMIT 5 RETURN CategoryName, NumberOfBusinesses",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) RETURN c.name AS CategoryName, COUNT(b) AS NumberOfBusinesses ORDER BY NumberOfBusinesses DESC LIMIT 5 NEXT RETURN CategoryName, NumberOfBusinesses"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) WITH m, COUNT(k) AS keyword_count ORDER BY keyword_count DESC LIMIT 1 RETURN m.title AS movie_title, keyword_count",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) RETURN m, COUNT(k) AS keyword_count ORDER BY keyword_count DESC LIMIT 1 NEXT RETURN m.title AS movie_title, keyword_count"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE p.born > 1970 AND m.released < 1990 RETURN p.name AS actor_name, p.born AS birth_year, m.title AS movie_title, m.released AS release_year ORDER BY p.born LIMIT 3",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE p.born > 1970 AND m.released < 1990 RETURN p.name AS actor_name, p.born AS birth_year, m.title AS movie_title, m.released AS release_year ORDER BY p.born LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) WITH ic, count(o) AS numOrganizations ORDER BY numOrganizations DESC RETURN ic.name, numOrganizations",
        "gql": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) RETURN ic, count(o) AS numOrganizations ORDER BY numOrganizations DESC NEXT RETURN ic.name, numOrganizations"
    },
    {
        "cypher": "MATCH (g:Gymnast) RETURN g.Total_Points ORDER BY g.Total_Points DESC",
        "gql": "MATCH (g:Gymnast) RETURN g.Total_Points ORDER BY g.Total_Points DESC"
    },
    {
        "cypher": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.name='log-balanced' RETURN m.cluster",
        "gql": "MATCH (n:Keyword) -[ha:HAS_TOPIC]->(m) WHERE n.name='log-balanced' RETURN m.cluster"
    },
    {
        "cypher": "MATCH (a:Article {prodName: '1p Short Socks'})-[:FROM_DEPARTMENT]->(d:Department) RETURN d",
        "gql": "MATCH (a:Article {prodName: '1p Short Socks'})-[:FROM_DEPARTMENT]->(d:Department) RETURN d"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN singer.name,singer.country,singer.age ORDER BY singer.age DESC",
        "gql": "MATCH (singer:singer) RETURN singer.name,singer.country,singer.age ORDER BY singer.age DESC"
    },
    {
        "cypher": "MATCH (cc:CatalogContent) WHERE cc.price_in_dollars > 700 RETURN cc.catalog_entry_name, cc.capacity",
        "gql": "MATCH (cc:CatalogContent) WHERE cc.price_in_dollars > 700 RETURN cc.catalog_entry_name, cc.capacity"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.originator_bank_country = 'Singapore' RETURN f ORDER BY f.amount DESC LIMIT 3",
        "gql": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.originator_bank_country = 'Singapore' RETURN f ORDER BY f.amount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Keyword), (:Author {affiliation: 'unspecified'}) WHERE NOT (n) --> (:Author) RETURN n.key_id",
        "gql": "MATCH (n:Keyword), (:Author {affiliation: 'unspecified'}) WHERE NOT (n) --> (:Author) RETURN n.key_id"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.article_id > 1013 OR n.article_id < 1006 RETURN n LIMIT 8",
        "gql": "MATCH (n:Article) WHERE n.article_id > 1013 OR n.article_id < 1006 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category) WITH c.categoryName AS categoryName, COUNT(DISTINCT s.supplierID) AS supplierCount ORDER BY supplierCount DESC LIMIT 3 RETURN categoryName, supplierCount",
        "gql": "MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS categoryName, COUNT(s.supplierID) AS supplierCount ORDER BY supplierCount DESC LIMIT 3 NEXT RETURN categoryName, supplierCount"
    },
    {
        "cypher": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born < 1950 RETURN count(DISTINCT p)",
        "gql": "MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born < 1950 RETURN count(DISTINCT p)"
    },
    {
        "cypher": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'adventure'}) WHERE m.status = 'Released' RETURN m LIMIT 3",
        "gql": "MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'adventure'}) WHERE m.status = 'Released' RETURN m LIMIT 3"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet)-[:TAGS]->(hashtag:Hashtag) RETURN hashtag.name AS hashtag, COUNT(*) AS usage_count ORDER BY usage_count DESC LIMIT 5",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet)-[:TAGS]->(hashtag:Hashtag) RETURN hashtag.name AS hashtag, COUNT(*) AS usage_count ORDER BY usage_count DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Beer'}) RETURN b.name LIMIT 3",
        "gql": "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Beer'}) RETURN b.name LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {city: 'Missoula'})-[:WROTE]->(r:Review) RETURN avg(r.stars) AS average_rating",
        "gql": "MATCH (u:User {city: 'Missoula'})-[:WROTE]->(r:Review) RETURN avg(r.stars) AS average_rating"
    },
    {
        "cypher": "MATCH (d:Director {name: 'Anthony Stacchi'})-[:DIRECTED]->(m:Movie) RETURN m LIMIT 3",
        "gql": "MATCH (d:Director {name: 'Anthony Stacchi'})-[:DIRECTED]->(m:Movie) RETURN m LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {name: '9linda'})-[:VIP]->(s:Stream) RETURN s.id, s.createdAt, s.description, s.url, s.name, s.followers, s.total_view_count",
        "gql": "MATCH (u:User {name: '9linda'})-[:VIP]->(s:Stream) RETURN s.id, s.createdAt, s.description, s.url, s.name, s.followers, s.total_view_count"
    },
    {
        "cypher": "MATCH (:Person)-[r:REVIEWED]->(:Movie) RETURN max(r.rating) AS highest_rating",
        "gql": "MATCH (:Person)-[r:REVIEWED]->(:Movie) RETURN max(r.rating) AS highest_rating"
    },
    {
        "cypher": "MATCH (s:Storm)-[:AFFECTS]->(r:Region) WHERE r.Region_name = 'Denmark' RETURN s.Name as name",
        "gql": "MATCH (s:Storm)-[:AFFECTS]->(r:Region) WHERE r.Region_name = 'Denmark' RETURN s.Name as name"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.date.year = 2016 WITH b, avg(r.stars) AS average_rating ORDER BY average_rating DESC RETURN b.name, average_rating LIMIT 3",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.`date` = 2016 RETURN b, avg(r.stars) AS average_rating ORDER BY average_rating DESC NEXT RETURN b.name, average_rating LIMIT 3"
    },
    {
        "cypher": "MATCH (w:WebClientAccelerator) WHERE w.Connection <> 'Broadband' RETURN w.name, w.Operating_system",
        "gql": "MATCH (w:WebClientAccelerator) WHERE w.Connection <> 'Broadband' RETURN w.name, w.Operating_system"
    },
    {
        "cypher": "MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) WHERE m.release_date < date('2000-01-01') AND l.id = 'en' RETURN m.title, m.release_date, m.average_vote ORDER BY m.average_vote DESC LIMIT 3",
        "gql": "MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) WHERE m.release_date < date('2000-01-01') AND l.id = 'en' RETURN m.title, m.release_date, m.average_vote ORDER BY m.average_vote DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.author_id <> '13c7b3c4f69c510e94c671c881522bac' RETURN DISTINCT n.first_name AS first_name",
        "gql": "MATCH (n:Author) WHERE n.author_id <> '13c7b3c4f69c510e94c671c881522bac' RETURN DISTINCT n.first_name AS first_name"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '217'}]->(m) WHERE n.comments='latex, 38 pages, typos corrected' RETURN m.name",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {meta : '217'}]->(m) WHERE n.comments='latex, 38 pages, typos corrected' RETURN m.name"
    },
    {
        "cypher": "MATCH (c:Customer) WHERE c.country = 'Germany' RETURN c.companyName",
        "gql": "MATCH (c:Customer) WHERE c.country = 'Germany' RETURN c.companyName"
    },
    {
        "cypher": "MATCH (e:Employee {Role_Code: \"HR\"}) RETURN e.Employee_Name",
        "gql": "MATCH (e:Employee {Role_Code: \"HR\"}) RETURN e.Employee_Name"
    },
    {
        "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WITH s, count(distinct l) as numLanguages ORDER BY numLanguages DESC LIMIT 3 RETURN s.name as streamName, numLanguages",
        "gql": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN s, count(l) AS numLanguages ORDER BY numLanguages DESC LIMIT 3 NEXT RETURN s.name AS streamName, numLanguages"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.isPublic = true RETURN c.name AS city, COUNT(o) AS publicOrganizations ORDER BY publicOrganizations DESC LIMIT 5",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.isPublic = true RETURN c.name AS city, COUNT(o) AS publicOrganizations ORDER BY publicOrganizations DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (d:Person {name: 'Steven Spielberg'})-[:CREW_FOR {job: 'Director'}]->(m:Movie) WITH avg(m.runtime) AS average_runtime RETURN average_runtime",
        "gql": "MATCH (d:Person{name:'Steven Spielberg'})-[:CREW_FOR{job:'Director'}]->(m:Movie) RETURN avg(m.runtime) AS average_runtime NEXT RETURN average_runtime"
    },
    {
        "cypher": "MATCH (c:Category {categoryName: 'Seafood'})<-[:PART_OF]-(p:Product) WITH c, sum(p.unitsInStock * p.unitPrice) AS totalRevenue RETURN totalRevenue",
        "gql": "MATCH (c:Category{categoryName:'Seafood'})<-[:PART_OF]-(p:`Product`) RETURN c, sum(p.unitsInStock) AS totalRevenue NEXT RETURN totalRevenue"
    },
    {
        "cypher": "MATCH (m:Movie) WITH m, size(m.countries) AS countryCount ORDER BY countryCount DESC LIMIT 5 RETURN m.title AS title, countryCount",
        "gql": "MATCH (m:Movie) RETURN m, size(m.countries) AS countryCount ORDER BY countryCount DESC LIMIT 5 NEXT RETURN m.title AS title, countryCount"
    },
    {
        "cypher": "MATCH (r:Rack {name: 'DC1-RCK-2-3'})-[:HOLDS]->(s:Switch) RETURN s",
        "gql": "MATCH (r:Rack {name: 'DC1-RCK-2-3'})-[:HOLDS]->(s:Switch) RETURN s"
    },
    {
        "cypher": "MATCH (a:Adult) RETURN a.title, a.poster_path ORDER BY a.popularity DESC LIMIT 3",
        "gql": "MATCH (a:Adult) RETURN a.title, a.poster_path ORDER BY a.popularity DESC LIMIT 3"
    },
    {
        "cypher": "MATCH p=(a:Article{article_id:'1013'})-[*]->(d:Categories{specifications:'math.AT'}) RETURN count(p)",
        "gql": "MATCH (a:Article{article_id:'1013'})-[]->{1,}(d:Categories{specifications:'math.AT'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (c:Course) WHERE c.Credits = 1 RETURN c.CName",
        "gql": "MATCH (c:Course) WHERE c.Credits = 1 RETURN c.CName"
    },
    {
        "cypher": "MATCH (a:Application) RETURN max(a.pid) AS max_pid",
        "gql": "MATCH (a:Application) RETURN max(a.pid) AS max_pid"
    },
    {
        "cypher": "MATCH (zone:Zone {zone: 1})-[:ROUTES]->(interface:Interface) RETURN interface.ip AS ip, interface.name AS name",
        "gql": "MATCH (zone:Zone {zone: 1})-[:ROUTES]->(interface:Interface) RETURN interface.ip AS ip, interface.name AS name"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue > m.budget RETURN m.title",
        "gql": "MATCH (m:Movie) WHERE m.revenue > m.budget RETURN m.title"
    },
    {
        "cypher": "MATCH (u:User)-[r:RATED]->(m:Movie {title: \"Forrest Gump\"}) RETURN COUNT(u) AS numberOfUsers, AVG(r.rating) AS averageRating",
        "gql": "MATCH (u:User)-[r:RATED]->(m:Movie {title: \"Forrest Gump\"}) RETURN COUNT(u) AS numberOfUsers, AVG(r.rating) AS averageRating"
    },
    {
        "cypher": "MATCH (m:Movie {title: \"Underneath\"})-[:IN_GENRE]->(g:Genre) RETURN g.name",
        "gql": "MATCH (m:Movie {title: \"Underneath\"})-[:IN_GENRE]->(g:Genre) RETURN g.name"
    },
    {
        "cypher": "MATCH (n:Inst) RETURN count(n)",
        "gql": "MATCH (n:Inst) RETURN count(n)"
    },
    {
        "cypher": "MATCH (a:Article) WHERE a.sentiment > 0.8 RETURN a ORDER BY a.sentiment DESC LIMIT 5",
        "gql": "MATCH (a:Article) WHERE a.sentiment > 0.8 RETURN a ORDER BY a.sentiment DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.nbrEmployees IS NOT NULL RETURN o.name, o.nbrEmployees ORDER BY o.nbrEmployees DESC LIMIT 5",
        "gql": "MATCH (o:Organization) WHERE o.nbrEmployees IS NOT NULL RETURN o.name, o.nbrEmployees ORDER BY o.nbrEmployees DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title <> 'Summation and transformation formulas for elliptic hypergeometric series' RETURN DISTINCT n.article_id AS article_id",
        "gql": "MATCH (n:Article) WHERE n.title <> 'Summation and transformation formulas for elliptic hypergeometric series' RETURN DISTINCT n.article_id AS article_id"
    },
    {
        "cypher": "MATCH (a:Journal{name:'Journal of Mathematical Logic'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Journal{name:'Journal of Mathematical Logic'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (me:Me {screen_name: 'neo4j'})-[:FOLLOWS]->(u:User) WHERE u.followers > 10000 RETURN u.screen_name, u.followers",
        "gql": "MATCH (me:Me {screen_name: 'neo4j'})-[:FOLLOWS]->(u:User) WHERE u.followers > 10000 RETURN u.screen_name, u.followers"
    },
    {
        "cypher": "MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: \"Healthcare\"}) MATCH (org)-[:HAS_BOARD_MEMBER]->(person:Person) RETURN org.name AS Organization, person.name AS BoardMember",
        "gql": "MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: \"Healthcare\"}) MATCH (org)-[:HAS_BOARD_MEMBER]->(person:Person) RETURN org.name AS Organization, person.name AS BoardMember"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.first_name = 'Randall' RETURN n",
        "gql": "MATCH (n:Author) WHERE n.first_name = 'Randall' RETURN n"
    },
    {
        "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WITH avg(toFloat(p.unitPrice)) AS averageUnitPrice RETURN averageUnitPrice",
        "gql": "MATCH (c:Customer{companyName:'Ernst Handel'})-[:PURCHASED]->(o:`Order`)-[:ORDERS]->(p:`Product`) RETURN avg(p.unitPrice) AS averageUnitPrice NEXT RETURN averageUnitPrice"
    },
    {
        "cypher": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Missoula Public Library'}) RETURN r.text",
        "gql": "MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Missoula Public Library'}) RETURN r.text"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.comments = '44 pages' RETURN n",
        "gql": "MATCH (n:Article) WHERE n.comments = '44 pages' RETURN n"
    },
    {
        "cypher": "MATCH (user:User)-[:WROTE]->(review:Review)-[:REVIEWS]->(business:Business) WITH business, count(DISTINCT user) AS numUsers WHERE numUsers > 1 RETURN business.name",
        "gql": "MATCH (user:User)-[:WROTE]->(review:Review)-[:REVIEWS]->(business:Business) RETURN business, count(user) AS numUsers NEXT RETURN business.name"
    },
    {
        "cypher": "MATCH p=(a:DOI{doi_id:'6ecd77a291d325cb3e01160880d88c69'})-[*]->(d:UpdateDate{update_date:'2017-07-11'}) RETURN count(p)",
        "gql": "MATCH (a:DOI{doi_id:'6ecd77a291d325cb3e01160880d88c69'})-[]->{1,}(d:UpdateDate{update_date:'2017-07-11'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (b:Business) WHERE b.state = 'MT' RETURN b.address",
        "gql": "MATCH (b:Business) WHERE b.state = 'MT' RETURN b.address"
    },
    {
        "cypher": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN p.name AS person_name, m.title AS movie_title",
        "gql": "MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN p.name AS person_name, m.title AS movie_title"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.motto IS NOT NULL RETURN o",
        "gql": "MATCH (o:Organization) WHERE o.motto IS NOT NULL RETURN o"
    },
    {
        "cypher": "MATCH (n:DOI) WHERE n.name IS NOT NULL RETURN count(n)",
        "gql": "MATCH (n:DOI) WHERE n.name IS NOT NULL RETURN count(n)"
    },
    {
        "cypher": "MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:BENEFITS]-(f:Filing) WITH c.name AS country, COUNT(DISTINCT e) AS beneficiary_bank_count ORDER BY beneficiary_bank_count DESC LIMIT 3 RETURN country, beneficiary_bank_count",
        "gql": "MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:BENEFITS]-(f:Filing) RETURN c.name AS country, COUNT(e) AS beneficiary_bank_count ORDER BY beneficiary_bank_count DESC LIMIT 3 NEXT RETURN country, beneficiary_bank_count"
    },
    {
        "cypher": "MATCH (a:Keyword{name:'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-'})-[*]->(d:Article{article_id:'1063'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Keyword{name:'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-'})-[]->{1,}(d:Article{article_id:'1063'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.runtime IS NOT NULL RETURN m ORDER BY m.runtime DESC LIMIT 3",
        "gql": "MATCH (m:Movie) WHERE m.runtime IS NOT NULL RETURN m ORDER BY m.runtime DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (c1:Character) WHERE c1.community = 759 MATCH (c1)-[:INTERACTS1]-(c2:Character) WITH c2 ORDER BY c2.book1PageRank LIMIT 1 RETURN c2.name",
        "gql": "MATCH (c1:Character) WHERE c1.community = 759 MATCH (c1)-[:INTERACTS1]-(c2:Character) RETURN c2 ORDER BY c2.book1PageRank LIMIT 1 NEXT RETURN c2.name"
    },
    {
        "cypher": "MATCH (o:Organization) WHERE o.nbrEmployees > 1000 MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN o.name AS Organization, p.name AS BoardMember",
        "gql": "MATCH (o:Organization) WHERE o.nbrEmployees > 1000 MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN o.name AS Organization, p.name AS BoardMember"
    },
    {
        "cypher": "MATCH (b:Business {name: 'Neo4j'})-[:REVIEWS]-(r:Review) RETURN count(r) AS NumberOfReviews",
        "gql": "MATCH (b:Business {name: 'Neo4j'})-[:REVIEWS]-(r:Review) RETURN count(r) AS NumberOfReviews"
    },
    {
        "cypher": "MATCH (p:Process)-[:LISTENS]->(port:Port) RETURN p.name AS process_name, port.port AS port_number ORDER BY port_number DESC LIMIT 1",
        "gql": "MATCH (p:Process)-[:LISTENS]->(port:Port) RETURN p.name AS process_name, port.port AS port_number ORDER BY port_number DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (q:Question)<-[:ASKED]-(u:User) RETURN q.title AS question_title, q.view_count AS views, u.display_name AS user ORDER BY q.view_count DESC LIMIT 3",
        "gql": "MATCH (q:Question)<-[:ASKED]-(u:User) RETURN q.title AS question_title, q.view_count AS views, u.display_name AS user ORDER BY q.view_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (a:DOI{doi_id:'fe8768ee88f2d27ed51861639e63a4ff'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:DOI{doi_id:'fe8768ee88f2d27ed51861639e63a4ff'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (City:City) RETURN City.Official_Name, City.Status ORDER BY City.Population DESC LIMIT 1",
        "gql": "MATCH (City:City) RETURN City.Official_Name, City.Status ORDER BY City.Population DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN s.name AS stream_name, s.url AS stream_url LIMIT 5",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN s.name AS stream_name, s.url AS stream_url LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) WHERE n.title = 'Chow groups of weighted hypersurfaces' RETURN n",
        "gql": "MATCH (n:Article) WHERE n.title = 'Chow groups of weighted hypersurfaces' RETURN n"
    },
    {
        "cypher": "MATCH (n:Report) WHERE n.report_no = 'SISSA: 39/99/FM/GEO' RETURN n",
        "gql": "MATCH (n:Report) WHERE n.report_no = 'SISSA: 39/99/FM/GEO' RETURN n"
    },
    {
        "cypher": "MATCH (o:Organization) RETURN o.name, o.nbrEmployees ORDER BY o.nbrEmployees DESC LIMIT 5",
        "gql": "MATCH (o:Organization) RETURN o.name, o.nbrEmployees ORDER BY o.nbrEmployees DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:REVIEWED]-() WHERE r.summary = \"A solid romp\" RETURN m.title",
        "gql": "MATCH (m:Movie)<-[r:REVIEWED]-() WHERE r.summary = \"A solid romp\" RETURN m.title"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.cluster > 10 OR n.cluster < 2 RETURN n LIMIT 8",
        "gql": "MATCH (n:Topic) WHERE n.cluster > 10 OR n.cluster < 2 RETURN n LIMIT 8"
    },
    {
        "cypher": "MATCH (m:Movie {title: \"The Matrix Revolutions\"}) WITH m.released AS releaseYear MATCH (movies:Movie {released: releaseYear}) WITH avg(movies.votes) AS averageVotes RETURN averageVotes",
        "gql": "MATCH (m:Movie{title:\"The Matrix Revolutions\"}) MATCH (movies:Movie{released:releaseYear}) RETURN m.released AS releaseYear NEXT RETURN averageVotes"
    },
    {
        "cypher": "MATCH (n:Topic) WHERE n.description = 'Studies eigenvalues and eigenvectors of operators, analyzing how structures behave under various conditions in mathematics and physics.' RETURN n",
        "gql": "MATCH (n:Topic) WHERE n.description = 'Studies eigenvalues and eigenvectors of operators, analyzing how structures behave under various conditions in mathematics and physics.' RETURN n"
    },
    {
        "cypher": "MATCH (app:Application {name: 'logstash'})-[:DEPENDS_ON]->(service:Service) WITH service MATCH (process:Process)-[:DEPENDS_ON]->(service) RETURN DISTINCT process.name",
        "gql": "MATCH (app:Application{name:'logstash'})-[:DEPENDS_ON]->(service:Service) RETURN service NEXT MATCH (process:Process)-[:DEPENDS_ON]->(service) RETURN DISTINCT process.name"
    },
    {
        "cypher": "MATCH (o1:Officer)-[:same_id_as]->(o2:Officer) RETURN o1, o2",
        "gql": "MATCH (o1:Officer)-[:same_id_as]->(o2:Officer) RETURN o1, o2"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.community = 795 RETURN c.name ORDER BY c.pagerank DESC LIMIT 5",
        "gql": "MATCH (c:Character) WHERE c.community = 795 RETURN c.name ORDER BY c.pagerank DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.article_id='601494' RETURN m.category_id",
        "gql": "MATCH (n:Article) -[ha:HAS_CATEGORY]->(m) WHERE n.article_id='601494' RETURN m.category_id"
    },
    {
        "cypher": "MATCH (m:Movie)<-[r:RATED]-(:User) WITH m, avg(r.rating) AS avgRating, count(r) AS numRatings WHERE numRatings >= 10 RETURN m.title AS movieTitle, avgRating ORDER BY avgRating DESC LIMIT 5",
        "gql": "MATCH (m:Movie)<-[r:RATED]-(:User) RETURN m, avg(r.rating) AS avgRating, count(r) AS numRatings NEXT RETURN m.title AS movieTitle, avgRating ORDER BY avgRating DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (z:Zone {zone: 2})-[:ROUTES]->(:Interface)<-[:ROUTES]-(:Switch)<-[:HOLDS]-(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) RETURN DISTINCT t.type AS machineType LIMIT 3",
        "gql": "MATCH (z:Zone {zone: 2})-[:ROUTES]->(:Interface)<-[:ROUTES]-(:Switch)<-[:HOLDS]-(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) RETURN DISTINCT t.type AS machineType LIMIT 3"
    },
    {
        "cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) WITH c, sum(f.amount) AS totalAmount ORDER BY totalAmount DESC RETURN c.name AS countryName, totalAmount LIMIT 10",
        "gql": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c, sum(f.amount) AS totalAmount ORDER BY totalAmount DESC NEXT RETURN c.name AS countryName, totalAmount LIMIT 10"
    },
    {
        "cypher": "MATCH (b:Business {name: 'Zootown Brew'})-[:IN_CATEGORY]->(c:Category)<-[:IN_CATEGORY]-(otherBusiness:Business {state: b.state}) MATCH (review:Review)-[:REVIEWS]->(otherBusiness) RETURN review.text, review.date, review.stars, otherBusiness.name",
        "gql": "MATCH (b:Business{name:'Zootown Brew'})-[:IN_CATEGORY]->(c:Category)<-[:IN_CATEGORY]-(otherBusiness:Business{state:b.state}) MATCH (review:Review)-[:REVIEWS]->(otherBusiness) RETURN review.text, review.`date`, review.stars, otherBusiness.name"
    },
    {
        "cypher": "MATCH (n:Keyword) WHERE n.name = 'logarithmic barrier penalty' RETURN n",
        "gql": "MATCH (n:Keyword) WHERE n.name = 'logarithmic barrier penalty' RETURN n"
    },
    {
        "cypher": "MATCH (n:Article {comments:'21 pages, AMS-LaTeX'}) RETURN n",
        "gql": "MATCH (n:Article {comments:'21 pages, AMS-LaTeX'}) RETURN n"
    },
    {
        "cypher": "MATCH (c:Character)-[r:INTERACTS2]->(:Character) WHERE r.book = 2 AND r.weight > 50 RETURN c.name",
        "gql": "MATCH (c:Character)-[r:INTERACTS2]->(:Character) WHERE r.book = 2 AND r.weight > 50 RETURN c.name"
    },
    {
        "cypher": "MATCH (a:Article {author: \"David Correa\"})-[:MENTIONS]->(o:Organization) RETURN DISTINCT o.name",
        "gql": "MATCH (a:Article {author: \"David Correa\"})-[:MENTIONS]->(o:Organization) RETURN DISTINCT o.name"
    },
    {
        "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.followers > 500000 RETURN g.name, count(s) AS stream_count ORDER BY stream_count DESC LIMIT 3",
        "gql": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.followers > 500000 RETURN g.name, count(s) AS stream_count ORDER BY stream_count DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (:Order)-[o:ORDERS]->(:Product) RETURN avg(toFloat(o.discount)) AS averageDiscount",
        "gql": "MATCH (:`Order`)-[o:ORDERS]->(:`Product`) RETURN avg(o.discount) AS averageDiscount"
    },
    {
        "cypher": "MATCH (l:List) WHERE l.Grade = 4 RETURN DISTINCT l.Classroom",
        "gql": "MATCH (l:`List`) WHERE l.Grade = 4 RETURN DISTINCT l.Classroom"
    },
    {
        "cypher": "MATCH (s:Software)-[:DEPENDS_ON]->(:Application {name: 'webserver'}) RETURN s.name AS software_name ORDER BY s.name LIMIT 3",
        "gql": "MATCH (s:Software)-[:DEPENDS_ON]->(:Application {name: 'webserver'}) RETURN s.name AS software_name ORDER BY s.name LIMIT 3"
    },
    {
        "cypher": "MATCH (v:Video)-[:HAS_KEYWORD]->(k:Keyword) WITH k, COUNT(v) AS video_count ORDER BY video_count DESC LIMIT 5 RETURN k.name AS keyword, video_count",
        "gql": "MATCH (v:Video)-[:HAS_KEYWORD]->(k:Keyword) RETURN k, COUNT(v) AS video_count ORDER BY video_count DESC LIMIT 5 NEXT RETURN k.name AS keyword, video_count"
    },
    {
        "cypher": "MATCH (d:domain) RETURN d.name",
        "gql": "MATCH (d:domain) RETURN d.name"
    },
    {
        "cypher": "MATCH (d:AllDocument {Document_Name: \"Marry CV\"}) RETURN d.Date_Stored",
        "gql": "MATCH (d:AllDocument {Document_Name: \"Marry CV\"}) RETURN d.Date_Stored"
    },
    {
        "cypher": "MATCH (a:Article{article_id:'1015'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n",
        "gql": "MATCH (a:Article{article_id:'1015'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1BetweennessCentrality = 0.0 RETURN c.name",
        "gql": "MATCH (c:Character) WHERE c.book1BetweennessCentrality = 0.0 RETURN c.name"
    },
    {
        "cypher": "MATCH (r1:Region {Region_name: \"Afghanistan\"})<-[:affected_Region]-(s1:Storm)-[:AFFECTS]->(r2:Region {Region_name: \"Albania\"}) RETURN s1.Name",
        "gql": "MATCH (r1:Region {Region_name: \"Afghanistan\"})<-[:affected_Region]-(s1:Storm)-[:AFFECTS]->(r2:Region {Region_name: \"Albania\"}) RETURN s1.Name"
    },
    {
        "cypher": "MATCH (p:Paper) RETURN count(p)",
        "gql": "MATCH (p:Paper) RETURN count(p)"
    },
    {
        "cypher": "MATCH (q:Question)-[:ANSWERED]-(a:Answer) WITH q, a ORDER BY q.view_count DESC LIMIT 3 WITH a ORDER BY a.score ASC LIMIT 3 RETURN a.link AS answer_link, a.score AS answer_score, a.body_markdown AS answer_body",
        "gql": "MATCH (q:Question)-[:ANSWERED]-(a:Answer) RETURN q, a ORDER BY q.view_count DESC LIMIT 3 NEXT RETURN a.link AS answer_link, a.score AS answer_score, a.body_markdown AS answer_body"
    },
    {
        "cypher": "MATCH (n:Author) WHERE n.last_name <> 'Christensen' RETURN DISTINCT n.affiliation AS affiliation",
        "gql": "MATCH (n:Author) WHERE n.last_name <> 'Christensen' RETURN DISTINCT n.affiliation AS affiliation"
    },
    {
        "cypher": "MATCH (e:Entity {country_codes: 'HKG'}) RETURN e",
        "gql": "MATCH (e:Entity {country_codes: 'HKG'}) RETURN e"
    },
    {
        "cypher": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) RETURN p.name, p.born, count(m) AS movies_produced ORDER BY movies_produced DESC LIMIT 5",
        "gql": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) RETURN p.name, p.born, count(m) AS movies_produced ORDER BY movies_produced DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.nbrEmployees > 500 RETURN c.name, count(o) AS numberOfOrganizations ORDER BY numberOfOrganizations DESC LIMIT 3",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.nbrEmployees > 500 RETURN c.name, count(o) AS numberOfOrganizations ORDER BY numberOfOrganizations DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (d:Director {name: \"Harold Lloyd\"})-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g.name LIMIT 3",
        "gql": "MATCH (d:Director {name: \"Harold Lloyd\"})-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g.name LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality > 0.5 AND c.book1BetweennessCentrality > 3000 RETURN c",
        "gql": "MATCH (c:Character) WHERE c.centrality > 0.5 AND c.book1BetweennessCentrality > 3000 RETURN c"
    },
    {
        "cypher": "MATCH (d:RefDocumentStatu {document_status_code:\"working\"}) RETURN d.document_status_description",
        "gql": "MATCH (d:RefDocumentStatu {document_status_code:\"working\"}) RETURN d.document_status_description"
    },
    {
        "cypher": "MATCH (f:Farm) RETURN f.Total_Horses ORDER BY f.Total_Horses ASC",
        "gql": "MATCH (f:Farm) RETURN f.Total_Horses ORDER BY f.Total_Horses ASC"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.revenue IS NOT NULL RETURN m ORDER BY m.revenue ASC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.revenue IS NOT NULL RETURN m ORDER BY m.revenue ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (City:City) WHERE City.Population > 1500 OR City.Population < 500 RETURN City.Official_Name",
        "gql": "MATCH (City:City) WHERE City.Population > 1500 OR City.Population < 500 RETURN City.Official_Name"
    },
    {
        "cypher": "MATCH (n:Keyword) WHERE n.name = 'logarithms' OR n.name IS NOT NULL RETURN DISTINCT n.name AS name",
        "gql": "MATCH (n:Keyword) WHERE n.name = 'logarithms' OR n.name IS NOT NULL RETURN DISTINCT n.name AS name"
    },
    {
        "cypher": "MATCH (a:Answer {uuid: 69273049}) RETURN a.body_markdown",
        "gql": "MATCH (a:Answer {uuid: 69273049}) RETURN a.body_markdown"
    },
    {
        "cypher": "MATCH (o:Officer) WHERE o.country_codes = 'KOR' RETURN o.name",
        "gql": "MATCH (o:Officer) WHERE o.country_codes = 'KOR' RETURN o.name"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Australia'}) RETURN f ORDER BY f.amount DESC LIMIT 5",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Australia'}) RETURN f ORDER BY f.amount DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream) WHERE u.total_view_count > 1000000 RETURN s.name",
        "gql": "MATCH (u:User)-[:MODERATOR]->(s:Stream) WHERE u.total_view_count > 1000000 RETURN s.name"
    },
    {
        "cypher": "MATCH (p:Patient)-[:HAS_APPOINTMENT]->(a:Appointment) WHERE a.reason = 'Follow-up' WITH p MATCH (p)-[:HAD_SURGERY]->() RETURN p",
        "gql": "MATCH (p:Patient)-[:HAS_APPOINTMENT]->(a:Appointment) WHERE a.reason = 'Follow-up' RETURN p NEXT MATCH (p)-[:HAD_SURGERY]->() RETURN p"
    },
    {
        "cypher": "MATCH (n:Company) RETURN avg(n.Profits_billion) as averageProfitInBillions",
        "gql": "MATCH (n:Company) RETURN avg(n.Profits_billion) as averageProfitInBillions"
    },
    {
        "cypher": "MATCH (singer:singer) RETURN singer.Song_Name,singer.Song_release_year ORDER BY singer.Age LIMIT 1",
        "gql": "MATCH (singer:singer) RETURN singer.Song_Name,singer.Song_release_year ORDER BY singer.Age LIMIT 1"
    },
    {
        "cypher": "MATCH (n:RefDocumentStatu) RETURN n.document_status_code",
        "gql": "MATCH (n:RefDocumentStatu) RETURN n.document_status_code"
    },
    {
        "cypher": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Area ASC LIMIT 1",
        "gql": "MATCH (d:District) RETURN d.District_name ORDER BY d.City_Area ASC LIMIT 1"
    },
    {
        "cypher": "MATCH (m:Musical) WHERE m.Award = \"Tony Award\" OR m.Award = \"Cleavant Derricks\" RETURN m.Nominee",
        "gql": "MATCH (m:Musical) WHERE m.Award = \"Tony Award\" OR m.Award = \"Cleavant Derricks\" RETURN m.Nominee"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q ORDER BY q.upVotes DESC LIMIT 5",
        "gql": "MATCH (q:Question) RETURN q ORDER BY q.upVotes DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (a:Journal{journal_id:'f762cb2c3b5bd7f0b3941598cfce8f15'})-[r]->(n) RETURN AVG(SIZE(keys(n))) AS AvgProps",
        "gql": "MATCH (a:Journal{journal_id:'f762cb2c3b5bd7f0b3941598cfce8f15'})-[r]->(n) RETURN AVG(n) AS AvgProps"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.average_vote > 8.0 RETURN m.title, m.average_vote ORDER BY m.average_vote DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.average_vote > 8.0 RETURN m.title, m.average_vote ORDER BY m.average_vote DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(oc:Country),       (f:Filing)-[:BENEFITS]->(b:Entity)-[:COUNTRY]->(bc:Country) WHERE o.country <> b.country RETURN f.id, f.amount, f.originator_bank, f.beneficiary_bank ORDER BY f.id LIMIT 3",
        "gql": "MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(oc:Country),       (f:Filing)-[:BENEFITS]->(b:Entity)-[:COUNTRY]->(bc:Country) WHERE o.country <> b.country RETURN f.id, f.amount, f.originator_bank, f.beneficiary_bank ORDER BY f.id LIMIT 3"
    },
    {
        "cypher": "MATCH (b:Business {state: 'MT'}) RETURN b.name LIMIT 3",
        "gql": "MATCH (b:Business {state: 'MT'}) RETURN b.name LIMIT 3"
    },
    {
        "cypher": "MATCH (s:Stream)<-[:MODERATOR]-(u:User) WITH s, COUNT(u) AS moderator_count ORDER BY moderator_count DESC LIMIT 3 RETURN s.name AS stream_name, moderator_count",
        "gql": "MATCH (s:Stream)<-[:MODERATOR]-(u:User) RETURN s, COUNT(u) AS moderator_count ORDER BY moderator_count DESC LIMIT 3 NEXT RETURN s.name AS stream_name, moderator_count"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.pagerank > 8.0 AND c.degree > 250.0 RETURN c.name, c.pagerank, c.degree ORDER BY c.pagerank DESC, c.degree DESC LIMIT 5",
        "gql": "MATCH (c:Character) WHERE c.pagerank > 8.0 AND c.degree > 250.0 RETURN c.name, c.pagerank, c.degree ORDER BY c.pagerank DESC, c.degree DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE size(m.countries) = 1 RETURN m.title, m.imdbRating ORDER BY m.imdbRating DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE size(m.countries) = 1 RETURN m.title, m.imdbRating ORDER BY m.imdbRating DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (e:Entity)-[:FILED]->(f:Filing)-[:BENEFITS]->(:Entity)-[:COUNTRY]->(c:Country {name: \"United Kingdom\"}) WITH e, COUNT(f) AS transaction_count ORDER BY transaction_count DESC LIMIT 5 RETURN e.name AS entity_name, transaction_count",
        "gql": "MATCH (e:Entity)-[:FILED]->(f:Filing)-[:BENEFITS]->(:Entity)-[:COUNTRY]->(c:Country{name:\"United Kingdom\"}) RETURN e, COUNT(f) AS transaction_count ORDER BY transaction_count DESC LIMIT 5 NEXT RETURN e.name AS entity_name, transaction_count"
    },
    {
        "cypher": "MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'}) WHERE u.profile_image_url IS NOT NULL RETURN u LIMIT 3",
        "gql": "MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'}) WHERE u.profile_image_url IS NOT NULL RETURN u LIMIT 3"
    },
    {
        "cypher": "MATCH (l:Language)<-[:ORIGINAL_LANGUAGE]-(m:Movie) WITH l, count(m) AS movieCount WHERE movieCount > 10 RETURN l.id, l.name ORDER BY movieCount DESC LIMIT 3",
        "gql": "MATCH (l:Language)<-[:ORIGINAL_LANGUAGE]-(m:Movie) RETURN l, count(m) AS movieCount NEXT RETURN l.id, l.name ORDER BY movieCount DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.runtime > 120 RETURN m.title, m.runtime",
        "gql": "MATCH (m:Movie) WHERE m.runtime > 120 RETURN m.title, m.runtime"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {year : '2004'}]->(m) WHERE n.title='A New Cohomology Theory for Orbifold' RETURN m.journal_id",
        "gql": "MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2004'}]->(m) WHERE n.title = 'A New Cohomology Theory for Orbifold' RETURN m.journal_id"
    },
    {
        "cypher": "MATCH (r:Region) RETURN r.Region_code, r.Region_name ORDER BY r.Region_code",
        "gql": "MATCH (r:Region) RETURN r.Region_code, r.Region_name ORDER BY r.Region_code"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question {title: 'Neo.ClientError.Statement.ExternalResourceFailed error on loading CSV file from local'}) RETURN u.display_name AS asked_by",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question {title: 'Neo.ClientError.Statement.ExternalResourceFailed error on loading CSV file from local'}) RETURN u.display_name AS asked_by"
    },
    {
        "cypher": "MATCH (q:Question) RETURN q.title, q.downVotes ORDER BY q.downVotes DESC LIMIT 5",
        "gql": "MATCH (q:Question) RETURN q.title, q.downVotes ORDER BY q.downVotes DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (f:Filing) WHERE f.amount > 100000 RETURN f ORDER BY f.begin ASC LIMIT 3",
        "gql": "MATCH (f:Filing) WHERE f.amount > 100000 RETURN f ORDER BY f.begin ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (n:Keyword) MATCH (m:Journal) RETURN n.key_id, m.journal_id LIMIT 8",
        "gql": "MATCH (n:Keyword) MATCH (m:Journal) RETURN n.key_id, m.journal_id LIMIT 8"
    },
    {
        "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router) RETURN dc.name AS DataCenterName, dc.location AS Location, r.name AS RouterName",
        "gql": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router) RETURN dc.name AS DataCenterName, dc.location AS Location, r.name AS RouterName"
    },
    {
        "cypher": "MATCH (c:Character) RETURN c.name AS character_name, c.community ORDER BY c.community DESC LIMIT 5",
        "gql": "MATCH (c:Character) RETURN c.name AS character_name, c.community ORDER BY c.community DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (q:Question)-[:TAGGED]->(t:Tag) WITH t, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 3 RETURN t.name AS tag_name, question_count",
        "gql": "MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN t, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 3 NEXT RETURN t.name AS tag_name, question_count"
    },
    {
        "cypher": "MATCH (t:Tag {name: \"neo4j\"})<-[:TAGGED]-(q:Question) WHERE q.view_count > 100 WITH distinct q MATCH (q)<-[:ANSWERED]-(a:Answer)<-[:PROVIDED]-(u:User) WITH distinct u MATCH (u)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q2:Question) WITH collect(c.score) AS comment_scores RETURN max(comment_scores) AS max_comment_score",
        "gql": "MATCH (t:Tag{name:\"neo4j\"})<-[:TAGGED]-(q:Question) WHERE q.view_count > 100 MATCH (q)<-[:ANSWERED]-(a:Answer)<-[:PROVIDED]-(u:User) MATCH (u)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q2:Question) RETURN DISTINCT q NEXT RETURN max(comment_scores) AS max_comment_score"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WITH b, count(r) AS reviewsCount WHERE reviewsCount >= 2 RETURN b.name",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) RETURN b, count(r) AS reviewsCount NEXT RETURN b.name"
    },
    {
        "cypher": "MATCH (u:User)-[:ASKED]->(q:Question)<-[:ANSWERED]-(a:Answer) WHERE exists((u)-[:PROVIDED]->(a)) RETURN DISTINCT u.display_name",
        "gql": "MATCH (u:User)-[:ASKED]->(q:Question)<-[:ANSWERED]-(a:Answer) WHERE exists((u)-[:PROVIDED]->(a)) RETURN DISTINCT u.display_name"
    },
    {
        "cypher": "MATCH (c:City)-[:IN_COUNTRY]->(co:Country {name: \"United States of America\"}) RETURN c.name LIMIT 3",
        "gql": "MATCH (c:City)-[:IN_COUNTRY]->(co:Country {name: \"United States of America\"}) RETURN c.name LIMIT 3"
    },
    {
        "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order) WITH c, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5 RETURN c.companyName AS customerName, orderCount",
        "gql": "MATCH (c:Customer)-[:PURCHASED]->(o:`Order`) RETURN c, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5 NEXT RETURN c.companyName AS customerName, orderCount"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.centrality IS NOT NULL RETURN c.name, c.centrality ORDER BY c.centrality ASC LIMIT 5",
        "gql": "MATCH (c:Character) WHERE c.centrality IS NOT NULL RETURN c.name, c.centrality ORDER BY c.centrality ASC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '479-502'}]->(m) WHERE n.title='Summation and transformation formulas for elliptic hypergeometric series' RETURN m.name",
        "gql": "MATCH (n:Article) -[pu:PUBLISHED_IN {pages : '479-502'}]->(m) WHERE n.title='Summation and transformation formulas for elliptic hypergeometric series' RETURN m.name"
    },
    {
        "cypher": "MATCH (p:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) WHERE m.runtime > 180 RETURN p.name AS ProductionCompany, COUNT(m) AS NumberOfMovies ORDER BY NumberOfMovies DESC LIMIT 3",
        "gql": "MATCH (p:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) WHERE m.runtime > 180 RETURN p.name AS ProductionCompany, COUNT(m) AS NumberOfMovies ORDER BY NumberOfMovies DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Order)-[:ORDERS]->(p:Product) WHERE o.requiredDate < '1997-01-01' RETURN DISTINCT p.productName AS ProductName, p.productID AS ProductID",
        "gql": "MATCH (o:`Order`)-[:ORDERS]->(p:`Product`) WHERE o.requiredDate < '1997-01-01' RETURN DISTINCT p.productName AS ProductName, p.productID AS ProductID"
    },
    {
        "cypher": "MATCH (f:Filing)-[:CONCERNS]->(e:Entity) WHERE f.amount > 750000 RETURN e.name AS concerned_entity, f.amount AS filing_amount",
        "gql": "MATCH (f:Filing)-[:CONCERNS]->(e:Entity) WHERE f.amount > 750000 RETURN e.name AS concerned_entity, f.amount AS filing_amount"
    },
    {
        "cypher": "MATCH (dc:DataCenter {location: 'Iceland, Rekjavik'}) RETURN dc.name",
        "gql": "MATCH (dc:DataCenter {location: 'Iceland, Rekjavik'}) RETURN dc.name"
    },
    {
        "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack {rack: 10})-[:HOLDS]->(machine:Machine) RETURN count(machine) AS numberOfMachines",
        "gql": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack {rack: 10})-[:HOLDS]->(machine:Machine) RETURN count(machine) AS numberOfMachines"
    },
    {
        "cypher": "MATCH (s:Station)-[:SERVES]->(t:Train) RETURN t.Name, t.Time, t.Service",
        "gql": "MATCH (s:Station)-[:SERVES]->(t:Train) RETURN t.Name, t.`Time`, t.Service"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS1 {weight: 291}]->(c2:Character) RETURN c1.name AS Character1, c2.name AS Character2",
        "gql": "MATCH (c1:Character)-[r:INTERACTS1 {weight: 291}]->(c2:Character) RETURN c1.name AS Character1, c2.name AS Character2"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE (m.revenue + m.budget) > 1000000000 RETURN m",
        "gql": "MATCH (m:Movie) WHERE (m.revenue + m.budget) > 1000000000 RETURN m"
    },
    {
        "cypher": "MATCH p=(a:DOI{doi_id:'0ef3b1eb742dfb0bc64bdfab8ed422f1'})-[*]->(d:Article{comments:'23 pages, 1 figure'}) RETURN count(p)",
        "gql": "MATCH (a:DOI{doi_id:'0ef3b1eb742dfb0bc64bdfab8ed422f1'})-[]->{1,}(d:Article{comments:'23 pages, 1 figure'}) RETURN count(p)"
    },
    {
        "cypher": "MATCH (c1:Character)-[r:INTERACTS3]->(c2:Character) WHERE c1.book1BetweennessCentrality > 400 RETURN min(r.weight)",
        "gql": "MATCH (c1:Character)-[r:INTERACTS3]->(c2:Character) WHERE c1.book1BetweennessCentrality > 400 RETURN min(r.weight)"
    },
    {
        "cypher": "MATCH (stadium:stadium) RETURN stadium.Name,stadium.Capacity ORDER BY stadium.Average DESC LIMIT 1",
        "gql": "MATCH (stadium:stadium) RETURN stadium.Name,stadium.Capacity ORDER BY stadium.Average DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (c:Character) WHERE c.book1BetweennessCentrality IS NOT NULL AND c.community = 579 RETURN c ORDER BY c.book1BetweennessCentrality ASC LIMIT 3",
        "gql": "MATCH (c:Character) WHERE c.book1BetweennessCentrality IS NOT NULL AND c.community = 579 RETURN c ORDER BY c.book1BetweennessCentrality ASC LIMIT 3"
    },
    {
        "cypher": "MATCH (u:User {name: \"Neo4j\"})-[:POSTS]->(t:Tweet) RETURN t.text ORDER BY t.created_at DESC LIMIT 1",
        "gql": "MATCH (u:User {name: \"Neo4j\"})-[:POSTS]->(t:Tweet) RETURN t.text ORDER BY t.created_at DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (n:List) WHERE n.Classroom = 107 RETURN DISTINCT n.FirstName",
        "gql": "MATCH (n:`List`) WHERE n.Classroom = 107 RETURN DISTINCT n.FirstName"
    },
    {
        "cypher": "MATCH (p:Person) WHERE p.Weight > 85 RETURN count(*), p.Sex",
        "gql": "MATCH (p:Person) WHERE p.Weight > 85 RETURN count(*), p.Sex"
    },
    {
        "cypher": "MATCH (r:Role) WHERE r.Role_Name = \"Proof Reader\" RETURN r.Role_Description",
        "gql": "MATCH (r:Role) WHERE r.Role_Name = \"Proof Reader\" RETURN r.Role_Description"
    },
    {
        "cypher": "MATCH (s:Supplier {supplierID: '1'})-[:SUPPLIES]->(p:Product) RETURN p.productName",
        "gql": "MATCH (s:Supplier{supplierID:'1'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName"
    },
    {
        "cypher": "MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) WHERE c.score = 3 RETURN q LIMIT 3",
        "gql": "MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) WHERE c.score = 3 RETURN q LIMIT 3"
    },
    {
        "cypher": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.revenue < 10000000 RETURN DISTINCT country.name",
        "gql": "MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.revenue < 10000000 RETURN DISTINCT country.name"
    },
    {
        "cypher": "MATCH (o:Organization)-[:HAS_CEO]->(p:Person) WHERE o.isDissolved = true RETURN p.name AS CEO, o.name AS Organization ORDER BY o.revenue DESC LIMIT 3",
        "gql": "MATCH (o:Organization)-[:HAS_CEO]->(p:Person) WHERE o.isDissolved = true RETURN p.name AS CEO, o.name AS Organization ORDER BY o.revenue DESC LIMIT 3"
    },
    {
        "cypher": "MATCH (m:Movie) UNWIND m.countries AS country WITH country, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 5 RETURN country, movieCount",
        "gql": "MATCH (m:Movie) RETURN country, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 5 NEXT RETURN country, movieCount"
    },
    {
        "cypher": "MATCH (c:Course {Credits:1}) RETURN c.CName",
        "gql": "MATCH (c:Course {Credits:1}) RETURN c.CName"
    },
    {
        "cypher": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) WITH a, count(distinct g) AS genreCount ORDER BY genreCount DESC LIMIT 5 RETURN a.name AS actor, genreCount AS numberOfGenres",
        "gql": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN a, count(g) AS genreCount ORDER BY genreCount DESC LIMIT 5 NEXT RETURN a.name AS actor, genreCount AS numberOfGenres"
    },
    {
        "cypher": "MATCH (m:Movie) WHERE m.countries IS NOT NULL RETURN m.title, size(m.countries) AS numCountries ORDER BY numCountries DESC LIMIT 5",
        "gql": "MATCH (m:Movie) WHERE m.countries IS NOT NULL RETURN m.title, size(m.countries) AS numCountries ORDER BY numCountries DESC LIMIT 5"
    },
    {
        "cypher": "MATCH (n:Article) -[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta='18' WITH DISTINCT n, m RETURN n.article_id AS article_id, count(m) AS count LIMIT 20",
        "gql": "MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '18' RETURN DISTINCT n, m NEXT RETURN n.article_id AS article_id, count(m) AS `count` LIMIT 20"
    },
    {
        "cypher": "MATCH (s:Supplier {city: 'London'})-[:SUPPLIES]->(p:Product) RETURN p.productName AS ProductName, p.productID AS ProductID",
        "gql": "MATCH (s:Supplier{city:'London'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName AS ProductName, p.productID AS ProductID"
    },
    {
        "cypher": "MATCH (s:Stream) WHERE s.total_view_count < 1000000 RETURN s.name AS stream_name, s.followers AS follower_count ORDER BY s.followers DESC LIMIT 10",
        "gql": "MATCH (s:Stream) WHERE s.total_view_count < 1000000 RETURN s.name AS stream_name, s.followers AS follower_count ORDER BY s.followers DESC LIMIT 10"
    },
    {
        "cypher": "MATCH (t:Teacher) WHERE t.Classroom = 110 RETURN t.FirstName",
        "gql": "MATCH (t:Teacher) WHERE t.Classroom = 110 RETURN t.FirstName"
    },
    {
        "cypher": "MATCH (a:Topic{description:'The study of how systems change over time, focusing on the existence, stability, and structure of fixed points and equilibria.'})-[*]->(d:DOI{name:'10.1007/s00220-004-1078-7'})-[*]->(n) RETURN n",
        "gql": "MATCH (a:Topic{description:'The study of how systems change over time, focusing on the existence, stability, and structure of fixed points and equilibria.'})-[]->{1,}(d:DOI{name:'10.1007/s00220-004-1078-7'})-[]->{1,}(n) RETURN n"
    },
    {
        "cypher": "MATCH (neo4j:User {screen_name: 'neo4j'})<-[:FOLLOWS]-(follower:User) WITH avg(follower.followers) AS average_followers RETURN average_followers",
        "gql": "MATCH (neo4j:User{screen_name:'neo4j'})<-[:FOLLOWS]-(follower:User) RETURN avg(follower.followers) AS average_followers NEXT RETURN average_followers"
    },
    {
        "cypher": "MATCH (b:Business)<-[:REVIEWS]-(review:Review) WITH b, count(review) AS reviewCount RETURN b.name AS businessName, reviewCount ORDER BY reviewCount DESC LIMIT 1",
        "gql": "MATCH (b:Business)<-[:REVIEWS]-(review:Review) RETURN b, count(review) AS reviewCount NEXT RETURN b.name AS businessName, reviewCount ORDER BY reviewCount DESC LIMIT 1"
    },
    {
        "cypher": "MATCH (t:Teacher) WHERE t.Classroom = 109 RETURN t.LastName",
        "gql": "MATCH (t:Teacher) WHERE t.Classroom = 109 RETURN t.LastName"
    }
]